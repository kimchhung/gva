// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimchhung/gva/internal/ent/predicate"
	"github.com/kimchhung/gva/internal/ent/todoyou"
)

// TodoYouUpdate is the builder for updating TodoYou entities.
type TodoYouUpdate struct {
	config
	hooks    []Hook
	mutation *TodoYouMutation
}

// Where appends a list predicates to the TodoYouUpdate builder.
func (tyu *TodoYouUpdate) Where(ps ...predicate.TodoYou) *TodoYouUpdate {
	tyu.mutation.Where(ps...)
	return tyu
}

// SetCreatedAt sets the "created_at" field.
func (tyu *TodoYouUpdate) SetCreatedAt(t time.Time) *TodoYouUpdate {
	tyu.mutation.SetCreatedAt(t)
	return tyu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tyu *TodoYouUpdate) SetNillableCreatedAt(t *time.Time) *TodoYouUpdate {
	if t != nil {
		tyu.SetCreatedAt(*t)
	}
	return tyu
}

// SetUpdatedAt sets the "updated_at" field.
func (tyu *TodoYouUpdate) SetUpdatedAt(t time.Time) *TodoYouUpdate {
	tyu.mutation.SetUpdatedAt(t)
	return tyu
}

// SetName sets the "name" field.
func (tyu *TodoYouUpdate) SetName(s string) *TodoYouUpdate {
	tyu.mutation.SetName(s)
	return tyu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tyu *TodoYouUpdate) SetNillableName(s *string) *TodoYouUpdate {
	if s != nil {
		tyu.SetName(*s)
	}
	return tyu
}

// Mutation returns the TodoYouMutation object of the builder.
func (tyu *TodoYouUpdate) Mutation() *TodoYouMutation {
	return tyu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tyu *TodoYouUpdate) Save(ctx context.Context) (int, error) {
	tyu.defaults()
	return withHooks(ctx, tyu.sqlSave, tyu.mutation, tyu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tyu *TodoYouUpdate) SaveX(ctx context.Context) int {
	affected, err := tyu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tyu *TodoYouUpdate) Exec(ctx context.Context) error {
	_, err := tyu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tyu *TodoYouUpdate) ExecX(ctx context.Context) {
	if err := tyu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tyu *TodoYouUpdate) defaults() {
	if _, ok := tyu.mutation.UpdatedAt(); !ok {
		v := todoyou.UpdateDefaultUpdatedAt()
		tyu.mutation.SetUpdatedAt(v)
	}
}

func (tyu *TodoYouUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(todoyou.Table, todoyou.Columns, sqlgraph.NewFieldSpec(todoyou.FieldID, field.TypeInt))
	if ps := tyu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tyu.mutation.CreatedAt(); ok {
		_spec.SetField(todoyou.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tyu.mutation.UpdatedAt(); ok {
		_spec.SetField(todoyou.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tyu.mutation.Name(); ok {
		_spec.SetField(todoyou.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tyu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todoyou.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tyu.mutation.done = true
	return n, nil
}

// TodoYouUpdateOne is the builder for updating a single TodoYou entity.
type TodoYouUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TodoYouMutation
}

// SetCreatedAt sets the "created_at" field.
func (tyuo *TodoYouUpdateOne) SetCreatedAt(t time.Time) *TodoYouUpdateOne {
	tyuo.mutation.SetCreatedAt(t)
	return tyuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tyuo *TodoYouUpdateOne) SetNillableCreatedAt(t *time.Time) *TodoYouUpdateOne {
	if t != nil {
		tyuo.SetCreatedAt(*t)
	}
	return tyuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tyuo *TodoYouUpdateOne) SetUpdatedAt(t time.Time) *TodoYouUpdateOne {
	tyuo.mutation.SetUpdatedAt(t)
	return tyuo
}

// SetName sets the "name" field.
func (tyuo *TodoYouUpdateOne) SetName(s string) *TodoYouUpdateOne {
	tyuo.mutation.SetName(s)
	return tyuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tyuo *TodoYouUpdateOne) SetNillableName(s *string) *TodoYouUpdateOne {
	if s != nil {
		tyuo.SetName(*s)
	}
	return tyuo
}

// Mutation returns the TodoYouMutation object of the builder.
func (tyuo *TodoYouUpdateOne) Mutation() *TodoYouMutation {
	return tyuo.mutation
}

// Where appends a list predicates to the TodoYouUpdate builder.
func (tyuo *TodoYouUpdateOne) Where(ps ...predicate.TodoYou) *TodoYouUpdateOne {
	tyuo.mutation.Where(ps...)
	return tyuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tyuo *TodoYouUpdateOne) Select(field string, fields ...string) *TodoYouUpdateOne {
	tyuo.fields = append([]string{field}, fields...)
	return tyuo
}

// Save executes the query and returns the updated TodoYou entity.
func (tyuo *TodoYouUpdateOne) Save(ctx context.Context) (*TodoYou, error) {
	tyuo.defaults()
	return withHooks(ctx, tyuo.sqlSave, tyuo.mutation, tyuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tyuo *TodoYouUpdateOne) SaveX(ctx context.Context) *TodoYou {
	node, err := tyuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tyuo *TodoYouUpdateOne) Exec(ctx context.Context) error {
	_, err := tyuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tyuo *TodoYouUpdateOne) ExecX(ctx context.Context) {
	if err := tyuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tyuo *TodoYouUpdateOne) defaults() {
	if _, ok := tyuo.mutation.UpdatedAt(); !ok {
		v := todoyou.UpdateDefaultUpdatedAt()
		tyuo.mutation.SetUpdatedAt(v)
	}
}

func (tyuo *TodoYouUpdateOne) sqlSave(ctx context.Context) (_node *TodoYou, err error) {
	_spec := sqlgraph.NewUpdateSpec(todoyou.Table, todoyou.Columns, sqlgraph.NewFieldSpec(todoyou.FieldID, field.TypeInt))
	id, ok := tyuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TodoYou.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tyuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todoyou.FieldID)
		for _, f := range fields {
			if !todoyou.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != todoyou.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tyuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tyuo.mutation.CreatedAt(); ok {
		_spec.SetField(todoyou.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tyuo.mutation.UpdatedAt(); ok {
		_spec.SetField(todoyou.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tyuo.mutation.Name(); ok {
		_spec.SetField(todoyou.FieldName, field.TypeString, value)
	}
	_node = &TodoYou{config: tyuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tyuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todoyou.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tyuo.mutation.done = true
	return _node, nil
}
