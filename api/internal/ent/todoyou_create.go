// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimchhung/gva/internal/ent/todoyou"
)

// TodoYouCreate is the builder for creating a TodoYou entity.
type TodoYouCreate struct {
	config
	mutation *TodoYouMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tyc *TodoYouCreate) SetCreatedAt(t time.Time) *TodoYouCreate {
	tyc.mutation.SetCreatedAt(t)
	return tyc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tyc *TodoYouCreate) SetNillableCreatedAt(t *time.Time) *TodoYouCreate {
	if t != nil {
		tyc.SetCreatedAt(*t)
	}
	return tyc
}

// SetUpdatedAt sets the "updated_at" field.
func (tyc *TodoYouCreate) SetUpdatedAt(t time.Time) *TodoYouCreate {
	tyc.mutation.SetUpdatedAt(t)
	return tyc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tyc *TodoYouCreate) SetNillableUpdatedAt(t *time.Time) *TodoYouCreate {
	if t != nil {
		tyc.SetUpdatedAt(*t)
	}
	return tyc
}

// SetName sets the "name" field.
func (tyc *TodoYouCreate) SetName(s string) *TodoYouCreate {
	tyc.mutation.SetName(s)
	return tyc
}

// Mutation returns the TodoYouMutation object of the builder.
func (tyc *TodoYouCreate) Mutation() *TodoYouMutation {
	return tyc.mutation
}

// Save creates the TodoYou in the database.
func (tyc *TodoYouCreate) Save(ctx context.Context) (*TodoYou, error) {
	tyc.defaults()
	return withHooks(ctx, tyc.sqlSave, tyc.mutation, tyc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tyc *TodoYouCreate) SaveX(ctx context.Context) *TodoYou {
	v, err := tyc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tyc *TodoYouCreate) Exec(ctx context.Context) error {
	_, err := tyc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tyc *TodoYouCreate) ExecX(ctx context.Context) {
	if err := tyc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tyc *TodoYouCreate) defaults() {
	if _, ok := tyc.mutation.CreatedAt(); !ok {
		v := todoyou.DefaultCreatedAt()
		tyc.mutation.SetCreatedAt(v)
	}
	if _, ok := tyc.mutation.UpdatedAt(); !ok {
		v := todoyou.DefaultUpdatedAt()
		tyc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tyc *TodoYouCreate) check() error {
	if _, ok := tyc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TodoYou.created_at"`)}
	}
	if _, ok := tyc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TodoYou.updated_at"`)}
	}
	if _, ok := tyc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TodoYou.name"`)}
	}
	return nil
}

func (tyc *TodoYouCreate) sqlSave(ctx context.Context) (*TodoYou, error) {
	if err := tyc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tyc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tyc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tyc.mutation.id = &_node.ID
	tyc.mutation.done = true
	return _node, nil
}

func (tyc *TodoYouCreate) createSpec() (*TodoYou, *sqlgraph.CreateSpec) {
	var (
		_node = &TodoYou{config: tyc.config}
		_spec = sqlgraph.NewCreateSpec(todoyou.Table, sqlgraph.NewFieldSpec(todoyou.FieldID, field.TypeInt))
	)
	if value, ok := tyc.mutation.CreatedAt(); ok {
		_spec.SetField(todoyou.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tyc.mutation.UpdatedAt(); ok {
		_spec.SetField(todoyou.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tyc.mutation.Name(); ok {
		_spec.SetField(todoyou.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// TodoYouCreateBulk is the builder for creating many TodoYou entities in bulk.
type TodoYouCreateBulk struct {
	config
	err      error
	builders []*TodoYouCreate
}

// Save creates the TodoYou entities in the database.
func (tycb *TodoYouCreateBulk) Save(ctx context.Context) ([]*TodoYou, error) {
	if tycb.err != nil {
		return nil, tycb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tycb.builders))
	nodes := make([]*TodoYou, len(tycb.builders))
	mutators := make([]Mutator, len(tycb.builders))
	for i := range tycb.builders {
		func(i int, root context.Context) {
			builder := tycb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TodoYouMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tycb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tycb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tycb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tycb *TodoYouCreateBulk) SaveX(ctx context.Context) []*TodoYou {
	v, err := tycb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tycb *TodoYouCreateBulk) Exec(ctx context.Context) error {
	_, err := tycb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tycb *TodoYouCreateBulk) ExecX(ctx context.Context) {
	if err := tycb.Exec(ctx); err != nil {
		panic(err)
	}
}
