// Code generated by ent, DO NOT EDIT.

package ent

import (
	"gva/internal/ent/predicate"
	"gva/internal/ent/todo2"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// Todo2Update is the builder for updating Todo2 entities.
type Todo2Update struct {
	config
	hooks    []Hook
	mutation *Todo2Mutation
}

// Where appends a list predicates to the Todo2Update builder.
func (t *Todo2Update) Where(ps ...predicate.Todo2) *Todo2Update {
	t.mutation.Where(ps...)
	return t
}

// SetUpdatedAt sets the "updated_at" field.
func (t *Todo2Update) SetUpdatedAt(value time.Time) *Todo2Update {
	t.mutation.SetUpdatedAt(value)
	return t
}

// SetDeletedAt sets the "deleted_at" field.
func (t *Todo2Update) SetDeletedAt(value time.Time) *Todo2Update {
	t.mutation.SetDeletedAt(value)
	return t
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (t *Todo2Update) SetNillableDeletedAt(value *time.Time) *Todo2Update {
	if value != nil {
		t.SetDeletedAt(*value)
	}
	return t
}

// Mutation returns the Todo2Mutation object of the builder.
func (t *Todo2Update) Mutation() *Todo2Mutation {
	return t.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (t *Todo2Update) Save(ctx context.Context) (int, error) {
	t.defaults()
	return withHooks(ctx, t.sqlSave, t.mutation, t.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (t *Todo2Update) SaveX(ctx context.Context) int {
	affected, err := t.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (t *Todo2Update) Exec(ctx context.Context) error {
	_, err := t.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (t *Todo2Update) ExecX(ctx context.Context) {
	if err := t.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (t *Todo2Update) defaults() {
	if _, ok := t.mutation.UpdatedAt(); !ok {
		v := todo2.UpdateDefaultUpdatedAt()
		t.mutation.SetUpdatedAt(v)
	}
}

func (t *Todo2Update) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(todo2.Table, todo2.Columns, sqlgraph.NewFieldSpec(todo2.FieldID, field.TypeInt))
	if ps := t.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := t.mutation.UpdatedAt(); ok {
		_spec.SetField(todo2.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := t.mutation.DeletedAt(); ok {
		_spec.SetField(todo2.FieldDeletedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, t.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todo2.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	t.mutation.done = true
	return n, nil
}

// Todo2UpdateOne is the builder for updating a single Todo2 entity.
type Todo2UpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Todo2Mutation
}

// SetUpdatedAt sets the "updated_at" field.
func (to *Todo2UpdateOne) SetUpdatedAt(t time.Time) *Todo2UpdateOne {
	to.mutation.SetUpdatedAt(t)
	return to
}

// SetDeletedAt sets the "deleted_at" field.
func (to *Todo2UpdateOne) SetDeletedAt(t time.Time) *Todo2UpdateOne {
	to.mutation.SetDeletedAt(t)
	return to
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (to *Todo2UpdateOne) SetNillableDeletedAt(t *time.Time) *Todo2UpdateOne {
	if t != nil {
		to.SetDeletedAt(*t)
	}
	return to
}

// Mutation returns the Todo2Mutation object of the builder.
func (to *Todo2UpdateOne) Mutation() *Todo2Mutation {
	return to.mutation
}

// Where appends a list predicates to the Todo2Update builder.
func (to *Todo2UpdateOne) Where(ps ...predicate.Todo2) *Todo2UpdateOne {
	to.mutation.Where(ps...)
	return to
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (to *Todo2UpdateOne) Select(field string, fields ...string) *Todo2UpdateOne {
	to.fields = append([]string{field}, fields...)
	return to
}

// Save executes the query and returns the updated Todo2 entity.
func (to *Todo2UpdateOne) Save(ctx context.Context) (*Todo2, error) {
	to.defaults()
	return withHooks(ctx, to.sqlSave, to.mutation, to.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (to *Todo2UpdateOne) SaveX(ctx context.Context) *Todo2 {
	node, err := to.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (to *Todo2UpdateOne) Exec(ctx context.Context) error {
	_, err := to.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (to *Todo2UpdateOne) ExecX(ctx context.Context) {
	if err := to.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (to *Todo2UpdateOne) defaults() {
	if _, ok := to.mutation.UpdatedAt(); !ok {
		v := todo2.UpdateDefaultUpdatedAt()
		to.mutation.SetUpdatedAt(v)
	}
}

func (to *Todo2UpdateOne) sqlSave(ctx context.Context) (_node *Todo2, err error) {
	_spec := sqlgraph.NewUpdateSpec(todo2.Table, todo2.Columns, sqlgraph.NewFieldSpec(todo2.FieldID, field.TypeInt))
	id, ok := to.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Todo2.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := to.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todo2.FieldID)
		for _, f := range fields {
			if !todo2.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != todo2.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := to.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := to.mutation.UpdatedAt(); ok {
		_spec.SetField(todo2.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := to.mutation.DeletedAt(); ok {
		_spec.SetField(todo2.FieldDeletedAt, field.TypeTime, value)
	}
	_node = &Todo2{config: to.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, to.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todo2.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	to.mutation.done = true
	return _node, nil
}
