// Code generated by ent, DO NOT EDIT.

package ent

import (
	"gva/internal/ent/predicate"
	"gva/internal/ent/todo2"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// Todo2Delete is the builder for deleting a Todo2 entity.
type Todo2Delete struct {
	config
	hooks    []Hook
	mutation *Todo2Mutation
}

// Where appends a list predicates to the Todo2Delete builder.
func (t *Todo2Delete) Where(ps ...predicate.Todo2) *Todo2Delete {
	t.mutation.Where(ps...)
	return t
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (t *Todo2Delete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, t.sqlExec, t.mutation, t.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (t *Todo2Delete) ExecX(ctx context.Context) int {
	n, err := t.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (t *Todo2Delete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(todo2.Table, sqlgraph.NewFieldSpec(todo2.FieldID, field.TypeInt))
	if ps := t.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, t.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	t.mutation.done = true
	return affected, err
}

// Todo2DeleteOne is the builder for deleting a single Todo2 entity.
type Todo2DeleteOne struct {
	t *Todo2Delete
}

// Where appends a list predicates to the Todo2Delete builder.
func (to *Todo2DeleteOne) Where(ps ...predicate.Todo2) *Todo2DeleteOne {
	to.t.mutation.Where(ps...)
	return to
}

// Exec executes the deletion query.
func (to *Todo2DeleteOne) Exec(ctx context.Context) error {
	n, err := to.t.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{todo2.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (to *Todo2DeleteOne) ExecX(ctx context.Context) {
	if err := to.Exec(ctx); err != nil {
		panic(err)
	}
}
