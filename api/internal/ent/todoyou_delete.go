// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimchhung/gva/internal/ent/predicate"
	"github.com/kimchhung/gva/internal/ent/todoyou"
)

// TodoYouDelete is the builder for deleting a TodoYou entity.
type TodoYouDelete struct {
	config
	hooks    []Hook
	mutation *TodoYouMutation
}

// Where appends a list predicates to the TodoYouDelete builder.
func (tyd *TodoYouDelete) Where(ps ...predicate.TodoYou) *TodoYouDelete {
	tyd.mutation.Where(ps...)
	return tyd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tyd *TodoYouDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tyd.sqlExec, tyd.mutation, tyd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tyd *TodoYouDelete) ExecX(ctx context.Context) int {
	n, err := tyd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tyd *TodoYouDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(todoyou.Table, sqlgraph.NewFieldSpec(todoyou.FieldID, field.TypeInt))
	if ps := tyd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tyd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tyd.mutation.done = true
	return affected, err
}

// TodoYouDeleteOne is the builder for deleting a single TodoYou entity.
type TodoYouDeleteOne struct {
	tyd *TodoYouDelete
}

// Where appends a list predicates to the TodoYouDelete builder.
func (tydo *TodoYouDeleteOne) Where(ps ...predicate.TodoYou) *TodoYouDeleteOne {
	tydo.tyd.mutation.Where(ps...)
	return tydo
}

// Exec executes the deletion query.
func (tydo *TodoYouDeleteOne) Exec(ctx context.Context) error {
	n, err := tydo.tyd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{todoyou.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tydo *TodoYouDeleteOne) ExecX(ctx context.Context) {
	if err := tydo.Exec(ctx); err != nil {
		panic(err)
	}
}
