// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimchhung/gva/internal/ent/mytodo"
	"github.com/kimchhung/gva/internal/ent/predicate"
)

// MyTodoUpdate is the builder for updating MyTodo entities.
type MyTodoUpdate struct {
	config
	hooks    []Hook
	mutation *MyTodoMutation
}

// Where appends a list predicates to the MyTodoUpdate builder.
func (mtu *MyTodoUpdate) Where(ps ...predicate.MyTodo) *MyTodoUpdate {
	mtu.mutation.Where(ps...)
	return mtu
}

// SetCreatedAt sets the "created_at" field.
func (mtu *MyTodoUpdate) SetCreatedAt(t time.Time) *MyTodoUpdate {
	mtu.mutation.SetCreatedAt(t)
	return mtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mtu *MyTodoUpdate) SetNillableCreatedAt(t *time.Time) *MyTodoUpdate {
	if t != nil {
		mtu.SetCreatedAt(*t)
	}
	return mtu
}

// SetUpdatedAt sets the "updated_at" field.
func (mtu *MyTodoUpdate) SetUpdatedAt(t time.Time) *MyTodoUpdate {
	mtu.mutation.SetUpdatedAt(t)
	return mtu
}

// SetName sets the "name" field.
func (mtu *MyTodoUpdate) SetName(s string) *MyTodoUpdate {
	mtu.mutation.SetName(s)
	return mtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mtu *MyTodoUpdate) SetNillableName(s *string) *MyTodoUpdate {
	if s != nil {
		mtu.SetName(*s)
	}
	return mtu
}

// Mutation returns the MyTodoMutation object of the builder.
func (mtu *MyTodoUpdate) Mutation() *MyTodoMutation {
	return mtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MyTodoUpdate) Save(ctx context.Context) (int, error) {
	mtu.defaults()
	return withHooks(ctx, mtu.sqlSave, mtu.mutation, mtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MyTodoUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MyTodoUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MyTodoUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtu *MyTodoUpdate) defaults() {
	if _, ok := mtu.mutation.UpdatedAt(); !ok {
		v := mytodo.UpdateDefaultUpdatedAt()
		mtu.mutation.SetUpdatedAt(v)
	}
}

func (mtu *MyTodoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mytodo.Table, mytodo.Columns, sqlgraph.NewFieldSpec(mytodo.FieldID, field.TypeInt))
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.CreatedAt(); ok {
		_spec.SetField(mytodo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mtu.mutation.UpdatedAt(); ok {
		_spec.SetField(mytodo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mtu.mutation.Name(); ok {
		_spec.SetField(mytodo.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mytodo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mtu.mutation.done = true
	return n, nil
}

// MyTodoUpdateOne is the builder for updating a single MyTodo entity.
type MyTodoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MyTodoMutation
}

// SetCreatedAt sets the "created_at" field.
func (mtuo *MyTodoUpdateOne) SetCreatedAt(t time.Time) *MyTodoUpdateOne {
	mtuo.mutation.SetCreatedAt(t)
	return mtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mtuo *MyTodoUpdateOne) SetNillableCreatedAt(t *time.Time) *MyTodoUpdateOne {
	if t != nil {
		mtuo.SetCreatedAt(*t)
	}
	return mtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mtuo *MyTodoUpdateOne) SetUpdatedAt(t time.Time) *MyTodoUpdateOne {
	mtuo.mutation.SetUpdatedAt(t)
	return mtuo
}

// SetName sets the "name" field.
func (mtuo *MyTodoUpdateOne) SetName(s string) *MyTodoUpdateOne {
	mtuo.mutation.SetName(s)
	return mtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mtuo *MyTodoUpdateOne) SetNillableName(s *string) *MyTodoUpdateOne {
	if s != nil {
		mtuo.SetName(*s)
	}
	return mtuo
}

// Mutation returns the MyTodoMutation object of the builder.
func (mtuo *MyTodoUpdateOne) Mutation() *MyTodoMutation {
	return mtuo.mutation
}

// Where appends a list predicates to the MyTodoUpdate builder.
func (mtuo *MyTodoUpdateOne) Where(ps ...predicate.MyTodo) *MyTodoUpdateOne {
	mtuo.mutation.Where(ps...)
	return mtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *MyTodoUpdateOne) Select(field string, fields ...string) *MyTodoUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated MyTodo entity.
func (mtuo *MyTodoUpdateOne) Save(ctx context.Context) (*MyTodo, error) {
	mtuo.defaults()
	return withHooks(ctx, mtuo.sqlSave, mtuo.mutation, mtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MyTodoUpdateOne) SaveX(ctx context.Context) *MyTodo {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MyTodoUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MyTodoUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtuo *MyTodoUpdateOne) defaults() {
	if _, ok := mtuo.mutation.UpdatedAt(); !ok {
		v := mytodo.UpdateDefaultUpdatedAt()
		mtuo.mutation.SetUpdatedAt(v)
	}
}

func (mtuo *MyTodoUpdateOne) sqlSave(ctx context.Context) (_node *MyTodo, err error) {
	_spec := sqlgraph.NewUpdateSpec(mytodo.Table, mytodo.Columns, sqlgraph.NewFieldSpec(mytodo.FieldID, field.TypeInt))
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MyTodo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mytodo.FieldID)
		for _, f := range fields {
			if !mytodo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mytodo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtuo.mutation.CreatedAt(); ok {
		_spec.SetField(mytodo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(mytodo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mtuo.mutation.Name(); ok {
		_spec.SetField(mytodo.FieldName, field.TypeString, value)
	}
	_node = &MyTodo{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mytodo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mtuo.mutation.done = true
	return _node, nil
}
