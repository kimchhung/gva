// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimchhung/gva/internal/ent/predicate"
	"github.com/kimchhung/gva/internal/ent/todome"
)

// TodoMeUpdate is the builder for updating TodoMe entities.
type TodoMeUpdate struct {
	config
	hooks    []Hook
	mutation *TodoMeMutation
}

// Where appends a list predicates to the TodoMeUpdate builder.
func (tmu *TodoMeUpdate) Where(ps ...predicate.TodoMe) *TodoMeUpdate {
	tmu.mutation.Where(ps...)
	return tmu
}

// SetCreatedAt sets the "created_at" field.
func (tmu *TodoMeUpdate) SetCreatedAt(t time.Time) *TodoMeUpdate {
	tmu.mutation.SetCreatedAt(t)
	return tmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmu *TodoMeUpdate) SetNillableCreatedAt(t *time.Time) *TodoMeUpdate {
	if t != nil {
		tmu.SetCreatedAt(*t)
	}
	return tmu
}

// SetUpdatedAt sets the "updated_at" field.
func (tmu *TodoMeUpdate) SetUpdatedAt(t time.Time) *TodoMeUpdate {
	tmu.mutation.SetUpdatedAt(t)
	return tmu
}

// SetName sets the "name" field.
func (tmu *TodoMeUpdate) SetName(s string) *TodoMeUpdate {
	tmu.mutation.SetName(s)
	return tmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tmu *TodoMeUpdate) SetNillableName(s *string) *TodoMeUpdate {
	if s != nil {
		tmu.SetName(*s)
	}
	return tmu
}

// Mutation returns the TodoMeMutation object of the builder.
func (tmu *TodoMeUpdate) Mutation() *TodoMeMutation {
	return tmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmu *TodoMeUpdate) Save(ctx context.Context) (int, error) {
	tmu.defaults()
	return withHooks(ctx, tmu.sqlSave, tmu.mutation, tmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmu *TodoMeUpdate) SaveX(ctx context.Context) int {
	affected, err := tmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmu *TodoMeUpdate) Exec(ctx context.Context) error {
	_, err := tmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmu *TodoMeUpdate) ExecX(ctx context.Context) {
	if err := tmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmu *TodoMeUpdate) defaults() {
	if _, ok := tmu.mutation.UpdatedAt(); !ok {
		v := todome.UpdateDefaultUpdatedAt()
		tmu.mutation.SetUpdatedAt(v)
	}
}

func (tmu *TodoMeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(todome.Table, todome.Columns, sqlgraph.NewFieldSpec(todome.FieldID, field.TypeInt))
	if ps := tmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmu.mutation.CreatedAt(); ok {
		_spec.SetField(todome.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tmu.mutation.UpdatedAt(); ok {
		_spec.SetField(todome.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tmu.mutation.Name(); ok {
		_spec.SetField(todome.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todome.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tmu.mutation.done = true
	return n, nil
}

// TodoMeUpdateOne is the builder for updating a single TodoMe entity.
type TodoMeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TodoMeMutation
}

// SetCreatedAt sets the "created_at" field.
func (tmuo *TodoMeUpdateOne) SetCreatedAt(t time.Time) *TodoMeUpdateOne {
	tmuo.mutation.SetCreatedAt(t)
	return tmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tmuo *TodoMeUpdateOne) SetNillableCreatedAt(t *time.Time) *TodoMeUpdateOne {
	if t != nil {
		tmuo.SetCreatedAt(*t)
	}
	return tmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tmuo *TodoMeUpdateOne) SetUpdatedAt(t time.Time) *TodoMeUpdateOne {
	tmuo.mutation.SetUpdatedAt(t)
	return tmuo
}

// SetName sets the "name" field.
func (tmuo *TodoMeUpdateOne) SetName(s string) *TodoMeUpdateOne {
	tmuo.mutation.SetName(s)
	return tmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tmuo *TodoMeUpdateOne) SetNillableName(s *string) *TodoMeUpdateOne {
	if s != nil {
		tmuo.SetName(*s)
	}
	return tmuo
}

// Mutation returns the TodoMeMutation object of the builder.
func (tmuo *TodoMeUpdateOne) Mutation() *TodoMeMutation {
	return tmuo.mutation
}

// Where appends a list predicates to the TodoMeUpdate builder.
func (tmuo *TodoMeUpdateOne) Where(ps ...predicate.TodoMe) *TodoMeUpdateOne {
	tmuo.mutation.Where(ps...)
	return tmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmuo *TodoMeUpdateOne) Select(field string, fields ...string) *TodoMeUpdateOne {
	tmuo.fields = append([]string{field}, fields...)
	return tmuo
}

// Save executes the query and returns the updated TodoMe entity.
func (tmuo *TodoMeUpdateOne) Save(ctx context.Context) (*TodoMe, error) {
	tmuo.defaults()
	return withHooks(ctx, tmuo.sqlSave, tmuo.mutation, tmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmuo *TodoMeUpdateOne) SaveX(ctx context.Context) *TodoMe {
	node, err := tmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmuo *TodoMeUpdateOne) Exec(ctx context.Context) error {
	_, err := tmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmuo *TodoMeUpdateOne) ExecX(ctx context.Context) {
	if err := tmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tmuo *TodoMeUpdateOne) defaults() {
	if _, ok := tmuo.mutation.UpdatedAt(); !ok {
		v := todome.UpdateDefaultUpdatedAt()
		tmuo.mutation.SetUpdatedAt(v)
	}
}

func (tmuo *TodoMeUpdateOne) sqlSave(ctx context.Context) (_node *TodoMe, err error) {
	_spec := sqlgraph.NewUpdateSpec(todome.Table, todome.Columns, sqlgraph.NewFieldSpec(todome.FieldID, field.TypeInt))
	id, ok := tmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TodoMe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todome.FieldID)
		for _, f := range fields {
			if !todome.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != todome.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmuo.mutation.CreatedAt(); ok {
		_spec.SetField(todome.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(todome.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tmuo.mutation.Name(); ok {
		_spec.SetField(todome.FieldName, field.TypeString, value)
	}
	_node = &TodoMe{config: tmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todome.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tmuo.mutation.done = true
	return _node, nil
}
