basePath: /
definitions:
  dto.AdminRequest:
    properties:
      createdAt:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      displayName:
        description: DisplayName holds the value of the "display_name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.AdminEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the AdminQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      updatedAt:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
      username:
        description: Username holds the value of the "username" field.
        type: string
    type: object
  dto.AdminResponse:
    properties:
      createdAt:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      displayName:
        description: DisplayName holds the value of the "display_name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.AdminEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the AdminQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      updatedAt:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
      username:
        description: Username holds the value of the "username" field.
        type: string
    type: object
  dto.MyTodoRequest:
    properties:
      createdAt:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      updatedAt:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
    type: object
  dto.MyTodoResponse:
    properties:
      createdAt:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      updatedAt:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
    type: object
  dto.PermissionRequest:
    properties:
      edges:
        $ref: '#/definitions/ent.PermissionEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PermissionQuery when eager-loading is set.
      group:
        description: Group holds the value of the "group" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      key:
        description: Key holds the value of the "key" field.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  dto.PermissionResponse:
    properties:
      edges:
        $ref: '#/definitions/ent.PermissionEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PermissionQuery when eager-loading is set.
      group:
        description: Group holds the value of the "group" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      key:
        description: Key holds the value of the "key" field.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  dto.RoleRequest:
    properties:
      createdAt:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      edges:
        $ref: '#/definitions/ent.RoleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoleQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      updatedAt:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
    type: object
  dto.RoleResponse:
    properties:
      createdAt:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      edges:
        $ref: '#/definitions/ent.RoleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoleQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      updatedAt:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
    type: object
  ent.Admin:
    properties:
      createdAt:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      displayName:
        description: DisplayName holds the value of the "display_name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.AdminEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the AdminQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      updatedAt:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
      username:
        description: Username holds the value of the "username" field.
        type: string
    type: object
  ent.AdminEdges:
    properties:
      roles:
        description: Roles holds the value of the roles edge.
        items:
          $ref: '#/definitions/ent.Role'
        type: array
    type: object
  ent.Permission:
    properties:
      edges:
        $ref: '#/definitions/ent.PermissionEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PermissionQuery when eager-loading is set.
      group:
        description: Group holds the value of the "group" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      key:
        description: Key holds the value of the "key" field.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  ent.PermissionEdges:
    properties:
      roles:
        description: Roles holds the value of the roles edge.
        items:
          $ref: '#/definitions/ent.Role'
        type: array
    type: object
  ent.Role:
    properties:
      createdAt:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      edges:
        $ref: '#/definitions/ent.RoleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoleQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      updatedAt:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
    type: object
  ent.RoleEdges:
    properties:
      admins:
        description: Admins holds the value of the admins edge.
        items:
          $ref: '#/definitions/ent.Admin'
        type: array
      permissions:
        description: Permissions holds the value of the permissions edge.
        items:
          $ref: '#/definitions/ent.Permission'
        type: array
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      errors:
        items: {}
        type: array
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: GO VUE ADMIN Boilerplate
  title: GVA API
  version: "1.0"
paths:
  /admin:
    get:
      consumes:
      - application/json
      description: Get a list of all Admins
      operationId: list-all-Admins
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved Admins
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.AdminResponse'
                  type: array
              type: object
      summary: List all Admins
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Create a new Admin with the provided details
      operationId: create-Admin
      parameters:
      - description: Admin data
        in: body
        name: Admin
        required: true
        schema:
          $ref: '#/definitions/dto.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created Admin
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AdminResponse'
              type: object
      summary: Create a Admin
      tags:
      - Admin
  /admin/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Admin by ID
      operationId: delete-Admin-by-id
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted Admin
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a Admin
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Get a Admin by ID
      operationId: get-Admin-by-id
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AdminResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Get a Admin
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      description: Update a Admin by ID
      operationId: update-Admin-by-id
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      - description: Admin data
        in: body
        name: Admin
        required: true
        schema:
          $ref: '#/definitions/dto.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated Admin
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AdminResponse'
              type: object
      summary: Update a Admin
      tags:
      - Admin
  /my-todo:
    get:
      consumes:
      - application/json
      description: Get a list of all MyTodos
      operationId: list-all-MyTodos
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved MyTodos
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.MyTodoResponse'
                  type: array
              type: object
      summary: List all MyTodos
      tags:
      - MyTodo
    post:
      consumes:
      - application/json
      description: Create a new MyTodo with the provided details
      operationId: create-MyTodo
      parameters:
      - description: MyTodo data
        in: body
        name: MyTodo
        required: true
        schema:
          $ref: '#/definitions/dto.MyTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created MyTodo
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MyTodoResponse'
              type: object
      summary: Create a MyTodo
      tags:
      - MyTodo
  /my-todo/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a MyTodo by ID
      operationId: delete-MyTodo-by-id
      parameters:
      - description: MyTodo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted MyTodo
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a MyTodo
      tags:
      - MyTodo
    get:
      consumes:
      - application/json
      description: Get a MyTodo by ID
      operationId: get-MyTodo-by-id
      parameters:
      - description: MyTodo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MyTodoResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Get a MyTodo
      tags:
      - MyTodo
    patch:
      consumes:
      - application/json
      description: Update a MyTodo by ID
      operationId: update-MyTodo-by-id
      parameters:
      - description: MyTodo ID
        in: path
        name: id
        required: true
        type: integer
      - description: MyTodo data
        in: body
        name: MyTodo
        required: true
        schema:
          $ref: '#/definitions/dto.MyTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated MyTodo
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MyTodoResponse'
              type: object
      summary: Update a MyTodo
      tags:
      - MyTodo
  /permission:
    get:
      consumes:
      - application/json
      description: Get a list of all Permissions
      operationId: list-all-Permissions
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved Permissions
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.PermissionResponse'
                  type: array
              type: object
      summary: List all Permissions
      tags:
      - Permission
    post:
      consumes:
      - application/json
      description: Create a new Permission with the provided details
      operationId: create-Permission
      parameters:
      - description: Permission data
        in: body
        name: Permission
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created Permission
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.PermissionResponse'
              type: object
      summary: Create a Permission
      tags:
      - Permission
  /permission/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Permission by ID
      operationId: delete-Permission-by-id
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted Permission
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a Permission
      tags:
      - Permission
    get:
      consumes:
      - application/json
      description: Get a Permission by ID
      operationId: get-Permission-by-id
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.PermissionResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Get a Permission
      tags:
      - Permission
    patch:
      consumes:
      - application/json
      description: Update a Permission by ID
      operationId: update-Permission-by-id
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Permission data
        in: body
        name: Permission
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated Permission
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.PermissionResponse'
              type: object
      summary: Update a Permission
      tags:
      - Permission
  /role:
    get:
      consumes:
      - application/json
      description: Get a list of all Roles
      operationId: list-all-Roles
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved Roles
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.RoleResponse'
                  type: array
              type: object
      summary: List all Roles
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Create a new Role with the provided details
      operationId: create-Role
      parameters:
      - description: Role data
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/dto.RoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created Role
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
      summary: Create a Role
      tags:
      - Role
  /role/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Role by ID
      operationId: delete-Role-by-id
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted Role
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a Role
      tags:
      - Role
    get:
      consumes:
      - application/json
      description: Get a Role by ID
      operationId: get-Role-by-id
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Get a Role
      tags:
      - Role
    patch:
      consumes:
      - application/json
      description: Update a Role by ID
      operationId: update-Role-by-id
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role data
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/dto.RoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated Role
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
      summary: Update a Role
      tags:
      - Role
swagger: "2.0"
