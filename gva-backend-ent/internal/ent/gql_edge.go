// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Admin) Roles(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryRoles().All(ctx)
	}
	return result, err
}

func (a *Admin) Department(ctx context.Context) (*Department, error) {
	result, err := a.Edges.DepartmentOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryDepartment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Department) Parent(ctx context.Context) (*Department, error) {
	result, err := d.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Department) Children(ctx context.Context) (result []*Department, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.ChildrenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryChildren().All(ctx)
	}
	return result, err
}

func (d *Department) Members(ctx context.Context) (result []*Admin, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedMembers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.MembersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryMembers().All(ctx)
	}
	return result, err
}

func (ge *Genre) Mangas(ctx context.Context) (result []*Manga, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ge.NamedMangas(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ge.Edges.MangasOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ge.QueryMangas().All(ctx)
	}
	return result, err
}

func (m *Manga) Chapters(ctx context.Context) (result []*MangaChapter, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedChapters(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.ChaptersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryChapters().All(ctx)
	}
	return result, err
}

func (m *Manga) Genres(ctx context.Context) (result []*Genre, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedGenres(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.GenresOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryGenres().All(ctx)
	}
	return result, err
}

func (mc *MangaChapter) Manga(ctx context.Context) (*Manga, error) {
	result, err := mc.Edges.MangaOrErr()
	if IsNotLoaded(err) {
		result, err = mc.QueryManga().Only(ctx)
	}
	return result, err
}

func (pe *Permission) Roles(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pe.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pe.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pe.QueryRoles().All(ctx)
	}
	return result, err
}

func (r *Role) Admins(ctx context.Context) (result []*Admin, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedAdmins(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.AdminsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryAdmins().All(ctx)
	}
	return result, err
}

func (r *Role) Permissions(ctx context.Context) (result []*Permission, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedPermissions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.PermissionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryPermissions().All(ctx)
	}
	return result, err
}
