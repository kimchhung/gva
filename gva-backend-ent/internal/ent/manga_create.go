// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gva/app/database/schema/pxid"
	"github.com/gva/internal/ent/genre"
	"github.com/gva/internal/ent/manga"
	"github.com/gva/internal/ent/mangachapter"
)

// MangaCreate is the builder for creating a Manga entity.
type MangaCreate struct {
	config
	mutation *MangaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mc *MangaCreate) SetCreatedAt(t time.Time) *MangaCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MangaCreate) SetNillableCreatedAt(t *time.Time) *MangaCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MangaCreate) SetUpdatedAt(t time.Time) *MangaCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MangaCreate) SetNillableUpdatedAt(t *time.Time) *MangaCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetIsEnable sets the "is_enable" field.
func (mc *MangaCreate) SetIsEnable(b bool) *MangaCreate {
	mc.mutation.SetIsEnable(b)
	return mc
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (mc *MangaCreate) SetNillableIsEnable(b *bool) *MangaCreate {
	if b != nil {
		mc.SetIsEnable(*b)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MangaCreate) SetDeletedAt(i int) *MangaCreate {
	mc.mutation.SetDeletedAt(i)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MangaCreate) SetNillableDeletedAt(i *int) *MangaCreate {
	if i != nil {
		mc.SetDeletedAt(*i)
	}
	return mc
}

// SetNameID sets the "name_id" field.
func (mc *MangaCreate) SetNameID(s string) *MangaCreate {
	mc.mutation.SetNameID(s)
	return mc
}

// SetName sets the "name" field.
func (mc *MangaCreate) SetName(s string) *MangaCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetDesc sets the "desc" field.
func (mc *MangaCreate) SetDesc(s string) *MangaCreate {
	mc.mutation.SetDesc(s)
	return mc
}

// SetProdiver sets the "prodiver" field.
func (mc *MangaCreate) SetProdiver(s string) *MangaCreate {
	mc.mutation.SetProdiver(s)
	return mc
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (mc *MangaCreate) SetThumbnailURL(s string) *MangaCreate {
	mc.mutation.SetThumbnailURL(s)
	return mc
}

// SetAuthors sets the "authors" field.
func (mc *MangaCreate) SetAuthors(s []string) *MangaCreate {
	mc.mutation.SetAuthors(s)
	return mc
}

// SetID sets the "id" field.
func (mc *MangaCreate) SetID(px pxid.ID) *MangaCreate {
	mc.mutation.SetID(px)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MangaCreate) SetNillableID(px *pxid.ID) *MangaCreate {
	if px != nil {
		mc.SetID(*px)
	}
	return mc
}

// AddChapterIDs adds the "chapters" edge to the MangaChapter entity by IDs.
func (mc *MangaCreate) AddChapterIDs(ids ...pxid.ID) *MangaCreate {
	mc.mutation.AddChapterIDs(ids...)
	return mc
}

// AddChapters adds the "chapters" edges to the MangaChapter entity.
func (mc *MangaCreate) AddChapters(m ...*MangaChapter) *MangaCreate {
	ids := make([]pxid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddChapterIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the Genre entity by IDs.
func (mc *MangaCreate) AddGenreIDs(ids ...pxid.ID) *MangaCreate {
	mc.mutation.AddGenreIDs(ids...)
	return mc
}

// AddGenres adds the "genres" edges to the Genre entity.
func (mc *MangaCreate) AddGenres(g ...*Genre) *MangaCreate {
	ids := make([]pxid.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mc.AddGenreIDs(ids...)
}

// Mutation returns the MangaMutation object of the builder.
func (mc *MangaCreate) Mutation() *MangaMutation {
	return mc.mutation
}

// Save creates the Manga in the database.
func (mc *MangaCreate) Save(ctx context.Context) (*Manga, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MangaCreate) SaveX(ctx context.Context) *Manga {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MangaCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MangaCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MangaCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := manga.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := manga.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.IsEnable(); !ok {
		v := manga.DefaultIsEnable
		mc.mutation.SetIsEnable(v)
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		v := manga.DefaultDeletedAt
		mc.mutation.SetDeletedAt(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := manga.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MangaCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Manga.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Manga.updated_at"`)}
	}
	if _, ok := mc.mutation.IsEnable(); !ok {
		return &ValidationError{Name: "is_enable", err: errors.New(`ent: missing required field "Manga.is_enable"`)}
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Manga.deleted_at"`)}
	}
	if _, ok := mc.mutation.NameID(); !ok {
		return &ValidationError{Name: "name_id", err: errors.New(`ent: missing required field "Manga.name_id"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Manga.name"`)}
	}
	if _, ok := mc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "Manga.desc"`)}
	}
	if _, ok := mc.mutation.Prodiver(); !ok {
		return &ValidationError{Name: "prodiver", err: errors.New(`ent: missing required field "Manga.prodiver"`)}
	}
	if _, ok := mc.mutation.ThumbnailURL(); !ok {
		return &ValidationError{Name: "thumbnail_url", err: errors.New(`ent: missing required field "Manga.thumbnail_url"`)}
	}
	if _, ok := mc.mutation.Authors(); !ok {
		return &ValidationError{Name: "authors", err: errors.New(`ent: missing required field "Manga.authors"`)}
	}
	return nil
}

func (mc *MangaCreate) sqlSave(ctx context.Context) (*Manga, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pxid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MangaCreate) createSpec() (*Manga, *sqlgraph.CreateSpec) {
	var (
		_node = &Manga{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(manga.Table, sqlgraph.NewFieldSpec(manga.FieldID, field.TypeString))
	)
	_spec.Schema = mc.schemaConfig.Manga
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(manga.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(manga.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.IsEnable(); ok {
		_spec.SetField(manga.FieldIsEnable, field.TypeBool, value)
		_node.IsEnable = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(manga.FieldDeletedAt, field.TypeInt, value)
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.NameID(); ok {
		_spec.SetField(manga.FieldNameID, field.TypeString, value)
		_node.NameID = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(manga.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Desc(); ok {
		_spec.SetField(manga.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := mc.mutation.Prodiver(); ok {
		_spec.SetField(manga.FieldProdiver, field.TypeString, value)
		_node.Prodiver = value
	}
	if value, ok := mc.mutation.ThumbnailURL(); ok {
		_spec.SetField(manga.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := mc.mutation.Authors(); ok {
		_spec.SetField(manga.FieldAuthors, field.TypeJSON, value)
		_node.Authors = value
	}
	if nodes := mc.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mangachapter.FieldID, field.TypeString),
			},
		}
		edge.Schema = mc.schemaConfig.MangaChapter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manga.GenresTable,
			Columns: manga.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeString),
			},
		}
		edge.Schema = mc.schemaConfig.GenreMangas
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Manga.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MangaUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mc *MangaCreate) OnConflict(opts ...sql.ConflictOption) *MangaUpsertOne {
	mc.conflict = opts
	return &MangaUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Manga.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MangaCreate) OnConflictColumns(columns ...string) *MangaUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MangaUpsertOne{
		create: mc,
	}
}

type (
	// MangaUpsertOne is the builder for "upsert"-ing
	//  one Manga node.
	MangaUpsertOne struct {
		create *MangaCreate
	}

	// MangaUpsert is the "OnConflict" setter.
	MangaUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *MangaUpsert) SetCreatedAt(v time.Time) *MangaUpsert {
	u.Set(manga.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MangaUpsert) UpdateCreatedAt() *MangaUpsert {
	u.SetExcluded(manga.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MangaUpsert) SetUpdatedAt(v time.Time) *MangaUpsert {
	u.Set(manga.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MangaUpsert) UpdateUpdatedAt() *MangaUpsert {
	u.SetExcluded(manga.FieldUpdatedAt)
	return u
}

// SetIsEnable sets the "is_enable" field.
func (u *MangaUpsert) SetIsEnable(v bool) *MangaUpsert {
	u.Set(manga.FieldIsEnable, v)
	return u
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *MangaUpsert) UpdateIsEnable() *MangaUpsert {
	u.SetExcluded(manga.FieldIsEnable)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MangaUpsert) SetDeletedAt(v int) *MangaUpsert {
	u.Set(manga.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MangaUpsert) UpdateDeletedAt() *MangaUpsert {
	u.SetExcluded(manga.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MangaUpsert) AddDeletedAt(v int) *MangaUpsert {
	u.Add(manga.FieldDeletedAt, v)
	return u
}

// SetNameID sets the "name_id" field.
func (u *MangaUpsert) SetNameID(v string) *MangaUpsert {
	u.Set(manga.FieldNameID, v)
	return u
}

// UpdateNameID sets the "name_id" field to the value that was provided on create.
func (u *MangaUpsert) UpdateNameID() *MangaUpsert {
	u.SetExcluded(manga.FieldNameID)
	return u
}

// SetName sets the "name" field.
func (u *MangaUpsert) SetName(v string) *MangaUpsert {
	u.Set(manga.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MangaUpsert) UpdateName() *MangaUpsert {
	u.SetExcluded(manga.FieldName)
	return u
}

// SetDesc sets the "desc" field.
func (u *MangaUpsert) SetDesc(v string) *MangaUpsert {
	u.Set(manga.FieldDesc, v)
	return u
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *MangaUpsert) UpdateDesc() *MangaUpsert {
	u.SetExcluded(manga.FieldDesc)
	return u
}

// SetProdiver sets the "prodiver" field.
func (u *MangaUpsert) SetProdiver(v string) *MangaUpsert {
	u.Set(manga.FieldProdiver, v)
	return u
}

// UpdateProdiver sets the "prodiver" field to the value that was provided on create.
func (u *MangaUpsert) UpdateProdiver() *MangaUpsert {
	u.SetExcluded(manga.FieldProdiver)
	return u
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *MangaUpsert) SetThumbnailURL(v string) *MangaUpsert {
	u.Set(manga.FieldThumbnailURL, v)
	return u
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *MangaUpsert) UpdateThumbnailURL() *MangaUpsert {
	u.SetExcluded(manga.FieldThumbnailURL)
	return u
}

// SetAuthors sets the "authors" field.
func (u *MangaUpsert) SetAuthors(v []string) *MangaUpsert {
	u.Set(manga.FieldAuthors, v)
	return u
}

// UpdateAuthors sets the "authors" field to the value that was provided on create.
func (u *MangaUpsert) UpdateAuthors() *MangaUpsert {
	u.SetExcluded(manga.FieldAuthors)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Manga.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(manga.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MangaUpsertOne) UpdateNewValues() *MangaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(manga.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Manga.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MangaUpsertOne) Ignore() *MangaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MangaUpsertOne) DoNothing() *MangaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MangaCreate.OnConflict
// documentation for more info.
func (u *MangaUpsertOne) Update(set func(*MangaUpsert)) *MangaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MangaUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MangaUpsertOne) SetCreatedAt(v time.Time) *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MangaUpsertOne) UpdateCreatedAt() *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MangaUpsertOne) SetUpdatedAt(v time.Time) *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MangaUpsertOne) UpdateUpdatedAt() *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetIsEnable sets the "is_enable" field.
func (u *MangaUpsertOne) SetIsEnable(v bool) *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.SetIsEnable(v)
	})
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *MangaUpsertOne) UpdateIsEnable() *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateIsEnable()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MangaUpsertOne) SetDeletedAt(v int) *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MangaUpsertOne) AddDeletedAt(v int) *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MangaUpsertOne) UpdateDeletedAt() *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetNameID sets the "name_id" field.
func (u *MangaUpsertOne) SetNameID(v string) *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.SetNameID(v)
	})
}

// UpdateNameID sets the "name_id" field to the value that was provided on create.
func (u *MangaUpsertOne) UpdateNameID() *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateNameID()
	})
}

// SetName sets the "name" field.
func (u *MangaUpsertOne) SetName(v string) *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MangaUpsertOne) UpdateName() *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateName()
	})
}

// SetDesc sets the "desc" field.
func (u *MangaUpsertOne) SetDesc(v string) *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *MangaUpsertOne) UpdateDesc() *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateDesc()
	})
}

// SetProdiver sets the "prodiver" field.
func (u *MangaUpsertOne) SetProdiver(v string) *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.SetProdiver(v)
	})
}

// UpdateProdiver sets the "prodiver" field to the value that was provided on create.
func (u *MangaUpsertOne) UpdateProdiver() *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateProdiver()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *MangaUpsertOne) SetThumbnailURL(v string) *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *MangaUpsertOne) UpdateThumbnailURL() *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateThumbnailURL()
	})
}

// SetAuthors sets the "authors" field.
func (u *MangaUpsertOne) SetAuthors(v []string) *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.SetAuthors(v)
	})
}

// UpdateAuthors sets the "authors" field to the value that was provided on create.
func (u *MangaUpsertOne) UpdateAuthors() *MangaUpsertOne {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateAuthors()
	})
}

// Exec executes the query.
func (u *MangaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MangaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MangaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MangaUpsertOne) ID(ctx context.Context) (id pxid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MangaUpsertOne.ID is not supported by MySQL driver. Use MangaUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MangaUpsertOne) IDX(ctx context.Context) pxid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MangaCreateBulk is the builder for creating many Manga entities in bulk.
type MangaCreateBulk struct {
	config
	err      error
	builders []*MangaCreate
	conflict []sql.ConflictOption
}

// Save creates the Manga entities in the database.
func (mcb *MangaCreateBulk) Save(ctx context.Context) ([]*Manga, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Manga, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MangaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MangaCreateBulk) SaveX(ctx context.Context) []*Manga {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MangaCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MangaCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Manga.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MangaUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mcb *MangaCreateBulk) OnConflict(opts ...sql.ConflictOption) *MangaUpsertBulk {
	mcb.conflict = opts
	return &MangaUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Manga.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MangaCreateBulk) OnConflictColumns(columns ...string) *MangaUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MangaUpsertBulk{
		create: mcb,
	}
}

// MangaUpsertBulk is the builder for "upsert"-ing
// a bulk of Manga nodes.
type MangaUpsertBulk struct {
	create *MangaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Manga.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(manga.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MangaUpsertBulk) UpdateNewValues() *MangaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(manga.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Manga.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MangaUpsertBulk) Ignore() *MangaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MangaUpsertBulk) DoNothing() *MangaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MangaCreateBulk.OnConflict
// documentation for more info.
func (u *MangaUpsertBulk) Update(set func(*MangaUpsert)) *MangaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MangaUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MangaUpsertBulk) SetCreatedAt(v time.Time) *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MangaUpsertBulk) UpdateCreatedAt() *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MangaUpsertBulk) SetUpdatedAt(v time.Time) *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MangaUpsertBulk) UpdateUpdatedAt() *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetIsEnable sets the "is_enable" field.
func (u *MangaUpsertBulk) SetIsEnable(v bool) *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.SetIsEnable(v)
	})
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *MangaUpsertBulk) UpdateIsEnable() *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateIsEnable()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MangaUpsertBulk) SetDeletedAt(v int) *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MangaUpsertBulk) AddDeletedAt(v int) *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MangaUpsertBulk) UpdateDeletedAt() *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetNameID sets the "name_id" field.
func (u *MangaUpsertBulk) SetNameID(v string) *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.SetNameID(v)
	})
}

// UpdateNameID sets the "name_id" field to the value that was provided on create.
func (u *MangaUpsertBulk) UpdateNameID() *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateNameID()
	})
}

// SetName sets the "name" field.
func (u *MangaUpsertBulk) SetName(v string) *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MangaUpsertBulk) UpdateName() *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateName()
	})
}

// SetDesc sets the "desc" field.
func (u *MangaUpsertBulk) SetDesc(v string) *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *MangaUpsertBulk) UpdateDesc() *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateDesc()
	})
}

// SetProdiver sets the "prodiver" field.
func (u *MangaUpsertBulk) SetProdiver(v string) *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.SetProdiver(v)
	})
}

// UpdateProdiver sets the "prodiver" field to the value that was provided on create.
func (u *MangaUpsertBulk) UpdateProdiver() *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateProdiver()
	})
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (u *MangaUpsertBulk) SetThumbnailURL(v string) *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.SetThumbnailURL(v)
	})
}

// UpdateThumbnailURL sets the "thumbnail_url" field to the value that was provided on create.
func (u *MangaUpsertBulk) UpdateThumbnailURL() *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateThumbnailURL()
	})
}

// SetAuthors sets the "authors" field.
func (u *MangaUpsertBulk) SetAuthors(v []string) *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.SetAuthors(v)
	})
}

// UpdateAuthors sets the "authors" field to the value that was provided on create.
func (u *MangaUpsertBulk) UpdateAuthors() *MangaUpsertBulk {
	return u.Update(func(s *MangaUpsert) {
		s.UpdateAuthors()
	})
}

// Exec executes the query.
func (u *MangaUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MangaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MangaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MangaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
