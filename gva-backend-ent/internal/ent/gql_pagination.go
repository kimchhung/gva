// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/gva/app/database/schema/pxid"
	"github.com/gva/internal/ent/admin"
	"github.com/gva/internal/ent/department"
	"github.com/gva/internal/ent/genre"
	"github.com/gva/internal/ent/manga"
	"github.com/gva/internal/ent/mangachapter"
	"github.com/gva/internal/ent/permission"
	"github.com/gva/internal/ent/role"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[pxid.ID]
	PageInfo       = entgql.PageInfo[pxid.ID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AdminEdge is the edge representation of Admin.
type AdminEdge struct {
	Node   *Admin `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// AdminConnection is the connection containing edges to Admin.
type AdminConnection struct {
	Edges      []*AdminEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *AdminConnection) build(nodes []*Admin, pager *adminPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Admin
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Admin {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Admin {
			return nodes[i]
		}
	}
	c.Edges = make([]*AdminEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AdminEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AdminPaginateOption enables pagination customization.
type AdminPaginateOption func(*adminPager) error

// WithAdminOrder configures pagination ordering.
func WithAdminOrder(order *AdminOrder) AdminPaginateOption {
	if order == nil {
		order = DefaultAdminOrder
	}
	o := *order
	return func(pager *adminPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAdminOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAdminFilter configures pagination filter.
func WithAdminFilter(filter func(*AdminQuery) (*AdminQuery, error)) AdminPaginateOption {
	return func(pager *adminPager) error {
		if filter == nil {
			return errors.New("AdminQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type adminPager struct {
	reverse bool
	order   *AdminOrder
	filter  func(*AdminQuery) (*AdminQuery, error)
}

func newAdminPager(opts []AdminPaginateOption, reverse bool) (*adminPager, error) {
	pager := &adminPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAdminOrder
	}
	return pager, nil
}

func (p *adminPager) applyFilter(query *AdminQuery) (*AdminQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *adminPager) toCursor(a *Admin) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *adminPager) applyCursors(query *AdminQuery, after, before *Cursor) (*AdminQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAdminOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *adminPager) applyOrder(query *AdminQuery) *AdminQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAdminOrder.Field {
		query = query.Order(DefaultAdminOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *adminPager) orderExpr(query *AdminQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAdminOrder.Field {
			b.Comma().Ident(DefaultAdminOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Admin.
func (a *AdminQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AdminPaginateOption,
) (*AdminConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAdminPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AdminConnection{Edges: []*AdminEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := a.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AdminOrderFieldID orders Admin by id.
	AdminOrderFieldID = &AdminOrderField{
		Value: func(a *Admin) (ent.Value, error) {
			return a.ID, nil
		},
		column: admin.FieldID,
		toTerm: admin.ByID,
		toCursor: func(a *Admin) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.ID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AdminOrderField) String() string {
	var str string
	switch f.column {
	case AdminOrderFieldID.column:
		str = "id"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AdminOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AdminOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AdminOrderField %T must be a string", v)
	}
	switch str {
	case "id":
		*f = *AdminOrderFieldID
	default:
		return fmt.Errorf("%s is not a valid AdminOrderField", str)
	}
	return nil
}

// AdminOrderField defines the ordering field of Admin.
type AdminOrderField struct {
	// Value extracts the ordering value from the given Admin.
	Value    func(*Admin) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) admin.OrderOption
	toCursor func(*Admin) Cursor
}

// AdminOrder defines the ordering of Admin.
type AdminOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *AdminOrderField `json:"field"`
}

// DefaultAdminOrder is the default ordering of Admin.
var DefaultAdminOrder = &AdminOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AdminOrderField{
		Value: func(a *Admin) (ent.Value, error) {
			return a.ID, nil
		},
		column: admin.FieldID,
		toTerm: admin.ByID,
		toCursor: func(a *Admin) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Admin into AdminEdge.
func (a *Admin) ToEdge(order *AdminOrder) *AdminEdge {
	if order == nil {
		order = DefaultAdminOrder
	}
	return &AdminEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// DepartmentEdge is the edge representation of Department.
type DepartmentEdge struct {
	Node   *Department `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// DepartmentConnection is the connection containing edges to Department.
type DepartmentConnection struct {
	Edges      []*DepartmentEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *DepartmentConnection) build(nodes []*Department, pager *departmentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Department
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Department {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Department {
			return nodes[i]
		}
	}
	c.Edges = make([]*DepartmentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DepartmentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DepartmentPaginateOption enables pagination customization.
type DepartmentPaginateOption func(*departmentPager) error

// WithDepartmentOrder configures pagination ordering.
func WithDepartmentOrder(order *DepartmentOrder) DepartmentPaginateOption {
	if order == nil {
		order = DefaultDepartmentOrder
	}
	o := *order
	return func(pager *departmentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDepartmentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDepartmentFilter configures pagination filter.
func WithDepartmentFilter(filter func(*DepartmentQuery) (*DepartmentQuery, error)) DepartmentPaginateOption {
	return func(pager *departmentPager) error {
		if filter == nil {
			return errors.New("DepartmentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type departmentPager struct {
	reverse bool
	order   *DepartmentOrder
	filter  func(*DepartmentQuery) (*DepartmentQuery, error)
}

func newDepartmentPager(opts []DepartmentPaginateOption, reverse bool) (*departmentPager, error) {
	pager := &departmentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDepartmentOrder
	}
	return pager, nil
}

func (p *departmentPager) applyFilter(query *DepartmentQuery) (*DepartmentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *departmentPager) toCursor(d *Department) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *departmentPager) applyCursors(query *DepartmentQuery, after, before *Cursor) (*DepartmentQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDepartmentOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *departmentPager) applyOrder(query *DepartmentQuery) *DepartmentQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDepartmentOrder.Field {
		query = query.Order(DefaultDepartmentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *departmentPager) orderExpr(query *DepartmentQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDepartmentOrder.Field {
			b.Comma().Ident(DefaultDepartmentOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Department.
func (d *DepartmentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DepartmentPaginateOption,
) (*DepartmentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDepartmentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}
	conn := &DepartmentConnection{Edges: []*DepartmentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := d.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if d, err = pager.applyCursors(d, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		d.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := d.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	d = pager.applyOrder(d)
	nodes, err := d.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// DepartmentOrderFieldID orders Department by id.
	DepartmentOrderFieldID = &DepartmentOrderField{
		Value: func(d *Department) (ent.Value, error) {
			return d.ID, nil
		},
		column: department.FieldID,
		toTerm: department.ByID,
		toCursor: func(d *Department) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.ID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DepartmentOrderField) String() string {
	var str string
	switch f.column {
	case DepartmentOrderFieldID.column:
		str = "id"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DepartmentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DepartmentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DepartmentOrderField %T must be a string", v)
	}
	switch str {
	case "id":
		*f = *DepartmentOrderFieldID
	default:
		return fmt.Errorf("%s is not a valid DepartmentOrderField", str)
	}
	return nil
}

// DepartmentOrderField defines the ordering field of Department.
type DepartmentOrderField struct {
	// Value extracts the ordering value from the given Department.
	Value    func(*Department) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) department.OrderOption
	toCursor func(*Department) Cursor
}

// DepartmentOrder defines the ordering of Department.
type DepartmentOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *DepartmentOrderField `json:"field"`
}

// DefaultDepartmentOrder is the default ordering of Department.
var DefaultDepartmentOrder = &DepartmentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DepartmentOrderField{
		Value: func(d *Department) (ent.Value, error) {
			return d.ID, nil
		},
		column: department.FieldID,
		toTerm: department.ByID,
		toCursor: func(d *Department) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Department into DepartmentEdge.
func (d *Department) ToEdge(order *DepartmentOrder) *DepartmentEdge {
	if order == nil {
		order = DefaultDepartmentOrder
	}
	return &DepartmentEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// GenreEdge is the edge representation of Genre.
type GenreEdge struct {
	Node   *Genre `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// GenreConnection is the connection containing edges to Genre.
type GenreConnection struct {
	Edges      []*GenreEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *GenreConnection) build(nodes []*Genre, pager *genrePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Genre
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Genre {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Genre {
			return nodes[i]
		}
	}
	c.Edges = make([]*GenreEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GenreEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GenrePaginateOption enables pagination customization.
type GenrePaginateOption func(*genrePager) error

// WithGenreOrder configures pagination ordering.
func WithGenreOrder(order *GenreOrder) GenrePaginateOption {
	if order == nil {
		order = DefaultGenreOrder
	}
	o := *order
	return func(pager *genrePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGenreOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGenreFilter configures pagination filter.
func WithGenreFilter(filter func(*GenreQuery) (*GenreQuery, error)) GenrePaginateOption {
	return func(pager *genrePager) error {
		if filter == nil {
			return errors.New("GenreQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type genrePager struct {
	reverse bool
	order   *GenreOrder
	filter  func(*GenreQuery) (*GenreQuery, error)
}

func newGenrePager(opts []GenrePaginateOption, reverse bool) (*genrePager, error) {
	pager := &genrePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGenreOrder
	}
	return pager, nil
}

func (p *genrePager) applyFilter(query *GenreQuery) (*GenreQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *genrePager) toCursor(ge *Genre) Cursor {
	return p.order.Field.toCursor(ge)
}

func (p *genrePager) applyCursors(query *GenreQuery, after, before *Cursor) (*GenreQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultGenreOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *genrePager) applyOrder(query *GenreQuery) *GenreQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultGenreOrder.Field {
		query = query.Order(DefaultGenreOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *genrePager) orderExpr(query *GenreQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGenreOrder.Field {
			b.Comma().Ident(DefaultGenreOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Genre.
func (ge *GenreQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GenrePaginateOption,
) (*GenreConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGenrePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ge, err = pager.applyFilter(ge); err != nil {
		return nil, err
	}
	conn := &GenreConnection{Edges: []*GenreEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ge.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ge, err = pager.applyCursors(ge, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ge.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ge.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ge = pager.applyOrder(ge)
	nodes, err := ge.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// GenreOrderFieldID orders Genre by id.
	GenreOrderFieldID = &GenreOrderField{
		Value: func(ge *Genre) (ent.Value, error) {
			return ge.ID, nil
		},
		column: genre.FieldID,
		toTerm: genre.ByID,
		toCursor: func(ge *Genre) Cursor {
			return Cursor{
				ID:    ge.ID,
				Value: ge.ID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f GenreOrderField) String() string {
	var str string
	switch f.column {
	case GenreOrderFieldID.column:
		str = "id"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f GenreOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *GenreOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("GenreOrderField %T must be a string", v)
	}
	switch str {
	case "id":
		*f = *GenreOrderFieldID
	default:
		return fmt.Errorf("%s is not a valid GenreOrderField", str)
	}
	return nil
}

// GenreOrderField defines the ordering field of Genre.
type GenreOrderField struct {
	// Value extracts the ordering value from the given Genre.
	Value    func(*Genre) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) genre.OrderOption
	toCursor func(*Genre) Cursor
}

// GenreOrder defines the ordering of Genre.
type GenreOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *GenreOrderField `json:"field"`
}

// DefaultGenreOrder is the default ordering of Genre.
var DefaultGenreOrder = &GenreOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &GenreOrderField{
		Value: func(ge *Genre) (ent.Value, error) {
			return ge.ID, nil
		},
		column: genre.FieldID,
		toTerm: genre.ByID,
		toCursor: func(ge *Genre) Cursor {
			return Cursor{ID: ge.ID}
		},
	},
}

// ToEdge converts Genre into GenreEdge.
func (ge *Genre) ToEdge(order *GenreOrder) *GenreEdge {
	if order == nil {
		order = DefaultGenreOrder
	}
	return &GenreEdge{
		Node:   ge,
		Cursor: order.Field.toCursor(ge),
	}
}

// MangaEdge is the edge representation of Manga.
type MangaEdge struct {
	Node   *Manga `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// MangaConnection is the connection containing edges to Manga.
type MangaConnection struct {
	Edges      []*MangaEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *MangaConnection) build(nodes []*Manga, pager *mangaPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Manga
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Manga {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Manga {
			return nodes[i]
		}
	}
	c.Edges = make([]*MangaEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MangaEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MangaPaginateOption enables pagination customization.
type MangaPaginateOption func(*mangaPager) error

// WithMangaOrder configures pagination ordering.
func WithMangaOrder(order *MangaOrder) MangaPaginateOption {
	if order == nil {
		order = DefaultMangaOrder
	}
	o := *order
	return func(pager *mangaPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMangaOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMangaFilter configures pagination filter.
func WithMangaFilter(filter func(*MangaQuery) (*MangaQuery, error)) MangaPaginateOption {
	return func(pager *mangaPager) error {
		if filter == nil {
			return errors.New("MangaQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type mangaPager struct {
	reverse bool
	order   *MangaOrder
	filter  func(*MangaQuery) (*MangaQuery, error)
}

func newMangaPager(opts []MangaPaginateOption, reverse bool) (*mangaPager, error) {
	pager := &mangaPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMangaOrder
	}
	return pager, nil
}

func (p *mangaPager) applyFilter(query *MangaQuery) (*MangaQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *mangaPager) toCursor(m *Manga) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *mangaPager) applyCursors(query *MangaQuery, after, before *Cursor) (*MangaQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultMangaOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *mangaPager) applyOrder(query *MangaQuery) *MangaQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultMangaOrder.Field {
		query = query.Order(DefaultMangaOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *mangaPager) orderExpr(query *MangaQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMangaOrder.Field {
			b.Comma().Ident(DefaultMangaOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Manga.
func (m *MangaQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MangaPaginateOption,
) (*MangaConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMangaPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MangaConnection{Edges: []*MangaEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if m, err = pager.applyCursors(m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	m = pager.applyOrder(m)
	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MangaOrderFieldID orders Manga by id.
	MangaOrderFieldID = &MangaOrderField{
		Value: func(m *Manga) (ent.Value, error) {
			return m.ID, nil
		},
		column: manga.FieldID,
		toTerm: manga.ByID,
		toCursor: func(m *Manga) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.ID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MangaOrderField) String() string {
	var str string
	switch f.column {
	case MangaOrderFieldID.column:
		str = "id"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MangaOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MangaOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MangaOrderField %T must be a string", v)
	}
	switch str {
	case "id":
		*f = *MangaOrderFieldID
	default:
		return fmt.Errorf("%s is not a valid MangaOrderField", str)
	}
	return nil
}

// MangaOrderField defines the ordering field of Manga.
type MangaOrderField struct {
	// Value extracts the ordering value from the given Manga.
	Value    func(*Manga) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) manga.OrderOption
	toCursor func(*Manga) Cursor
}

// MangaOrder defines the ordering of Manga.
type MangaOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *MangaOrderField `json:"field"`
}

// DefaultMangaOrder is the default ordering of Manga.
var DefaultMangaOrder = &MangaOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MangaOrderField{
		Value: func(m *Manga) (ent.Value, error) {
			return m.ID, nil
		},
		column: manga.FieldID,
		toTerm: manga.ByID,
		toCursor: func(m *Manga) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Manga into MangaEdge.
func (m *Manga) ToEdge(order *MangaOrder) *MangaEdge {
	if order == nil {
		order = DefaultMangaOrder
	}
	return &MangaEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// MangaChapterEdge is the edge representation of MangaChapter.
type MangaChapterEdge struct {
	Node   *MangaChapter `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// MangaChapterConnection is the connection containing edges to MangaChapter.
type MangaChapterConnection struct {
	Edges      []*MangaChapterEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *MangaChapterConnection) build(nodes []*MangaChapter, pager *mangachapterPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *MangaChapter
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *MangaChapter {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *MangaChapter {
			return nodes[i]
		}
	}
	c.Edges = make([]*MangaChapterEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MangaChapterEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MangaChapterPaginateOption enables pagination customization.
type MangaChapterPaginateOption func(*mangachapterPager) error

// WithMangaChapterOrder configures pagination ordering.
func WithMangaChapterOrder(order *MangaChapterOrder) MangaChapterPaginateOption {
	if order == nil {
		order = DefaultMangaChapterOrder
	}
	o := *order
	return func(pager *mangachapterPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMangaChapterOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMangaChapterFilter configures pagination filter.
func WithMangaChapterFilter(filter func(*MangaChapterQuery) (*MangaChapterQuery, error)) MangaChapterPaginateOption {
	return func(pager *mangachapterPager) error {
		if filter == nil {
			return errors.New("MangaChapterQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type mangachapterPager struct {
	reverse bool
	order   *MangaChapterOrder
	filter  func(*MangaChapterQuery) (*MangaChapterQuery, error)
}

func newMangaChapterPager(opts []MangaChapterPaginateOption, reverse bool) (*mangachapterPager, error) {
	pager := &mangachapterPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMangaChapterOrder
	}
	return pager, nil
}

func (p *mangachapterPager) applyFilter(query *MangaChapterQuery) (*MangaChapterQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *mangachapterPager) toCursor(mc *MangaChapter) Cursor {
	return p.order.Field.toCursor(mc)
}

func (p *mangachapterPager) applyCursors(query *MangaChapterQuery, after, before *Cursor) (*MangaChapterQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultMangaChapterOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *mangachapterPager) applyOrder(query *MangaChapterQuery) *MangaChapterQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultMangaChapterOrder.Field {
		query = query.Order(DefaultMangaChapterOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *mangachapterPager) orderExpr(query *MangaChapterQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMangaChapterOrder.Field {
			b.Comma().Ident(DefaultMangaChapterOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to MangaChapter.
func (mc *MangaChapterQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MangaChapterPaginateOption,
) (*MangaChapterConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMangaChapterPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if mc, err = pager.applyFilter(mc); err != nil {
		return nil, err
	}
	conn := &MangaChapterConnection{Edges: []*MangaChapterEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := mc.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if mc, err = pager.applyCursors(mc, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		mc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := mc.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	mc = pager.applyOrder(mc)
	nodes, err := mc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MangaChapterOrderFieldID orders MangaChapter by id.
	MangaChapterOrderFieldID = &MangaChapterOrderField{
		Value: func(mc *MangaChapter) (ent.Value, error) {
			return mc.ID, nil
		},
		column: mangachapter.FieldID,
		toTerm: mangachapter.ByID,
		toCursor: func(mc *MangaChapter) Cursor {
			return Cursor{
				ID:    mc.ID,
				Value: mc.ID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MangaChapterOrderField) String() string {
	var str string
	switch f.column {
	case MangaChapterOrderFieldID.column:
		str = "id"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MangaChapterOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MangaChapterOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MangaChapterOrderField %T must be a string", v)
	}
	switch str {
	case "id":
		*f = *MangaChapterOrderFieldID
	default:
		return fmt.Errorf("%s is not a valid MangaChapterOrderField", str)
	}
	return nil
}

// MangaChapterOrderField defines the ordering field of MangaChapter.
type MangaChapterOrderField struct {
	// Value extracts the ordering value from the given MangaChapter.
	Value    func(*MangaChapter) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) mangachapter.OrderOption
	toCursor func(*MangaChapter) Cursor
}

// MangaChapterOrder defines the ordering of MangaChapter.
type MangaChapterOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *MangaChapterOrderField `json:"field"`
}

// DefaultMangaChapterOrder is the default ordering of MangaChapter.
var DefaultMangaChapterOrder = &MangaChapterOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MangaChapterOrderField{
		Value: func(mc *MangaChapter) (ent.Value, error) {
			return mc.ID, nil
		},
		column: mangachapter.FieldID,
		toTerm: mangachapter.ByID,
		toCursor: func(mc *MangaChapter) Cursor {
			return Cursor{ID: mc.ID}
		},
	},
}

// ToEdge converts MangaChapter into MangaChapterEdge.
func (mc *MangaChapter) ToEdge(order *MangaChapterOrder) *MangaChapterEdge {
	if order == nil {
		order = DefaultMangaChapterOrder
	}
	return &MangaChapterEdge{
		Node:   mc,
		Cursor: order.Field.toCursor(mc),
	}
}

// PermissionEdge is the edge representation of Permission.
type PermissionEdge struct {
	Node   *Permission `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// PermissionConnection is the connection containing edges to Permission.
type PermissionConnection struct {
	Edges      []*PermissionEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *PermissionConnection) build(nodes []*Permission, pager *permissionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Permission
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Permission {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Permission {
			return nodes[i]
		}
	}
	c.Edges = make([]*PermissionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PermissionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PermissionPaginateOption enables pagination customization.
type PermissionPaginateOption func(*permissionPager) error

// WithPermissionOrder configures pagination ordering.
func WithPermissionOrder(order *PermissionOrder) PermissionPaginateOption {
	if order == nil {
		order = DefaultPermissionOrder
	}
	o := *order
	return func(pager *permissionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPermissionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPermissionFilter configures pagination filter.
func WithPermissionFilter(filter func(*PermissionQuery) (*PermissionQuery, error)) PermissionPaginateOption {
	return func(pager *permissionPager) error {
		if filter == nil {
			return errors.New("PermissionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type permissionPager struct {
	reverse bool
	order   *PermissionOrder
	filter  func(*PermissionQuery) (*PermissionQuery, error)
}

func newPermissionPager(opts []PermissionPaginateOption, reverse bool) (*permissionPager, error) {
	pager := &permissionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPermissionOrder
	}
	return pager, nil
}

func (p *permissionPager) applyFilter(query *PermissionQuery) (*PermissionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *permissionPager) toCursor(pe *Permission) Cursor {
	return p.order.Field.toCursor(pe)
}

func (p *permissionPager) applyCursors(query *PermissionQuery, after, before *Cursor) (*PermissionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPermissionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *permissionPager) applyOrder(query *PermissionQuery) *PermissionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPermissionOrder.Field {
		query = query.Order(DefaultPermissionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *permissionPager) orderExpr(query *PermissionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPermissionOrder.Field {
			b.Comma().Ident(DefaultPermissionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Permission.
func (pe *PermissionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PermissionPaginateOption,
) (*PermissionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPermissionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pe, err = pager.applyFilter(pe); err != nil {
		return nil, err
	}
	conn := &PermissionConnection{Edges: []*PermissionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pe.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pe, err = pager.applyCursors(pe, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pe.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pe.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pe = pager.applyOrder(pe)
	nodes, err := pe.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PermissionOrderFieldID orders Permission by id.
	PermissionOrderFieldID = &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.ID, nil
		},
		column: permission.FieldID,
		toTerm: permission.ByID,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{
				ID:    pe.ID,
				Value: pe.ID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PermissionOrderField) String() string {
	var str string
	switch f.column {
	case PermissionOrderFieldID.column:
		str = "id"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PermissionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PermissionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PermissionOrderField %T must be a string", v)
	}
	switch str {
	case "id":
		*f = *PermissionOrderFieldID
	default:
		return fmt.Errorf("%s is not a valid PermissionOrderField", str)
	}
	return nil
}

// PermissionOrderField defines the ordering field of Permission.
type PermissionOrderField struct {
	// Value extracts the ordering value from the given Permission.
	Value    func(*Permission) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) permission.OrderOption
	toCursor func(*Permission) Cursor
}

// PermissionOrder defines the ordering of Permission.
type PermissionOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *PermissionOrderField `json:"field"`
}

// DefaultPermissionOrder is the default ordering of Permission.
var DefaultPermissionOrder = &PermissionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.ID, nil
		},
		column: permission.FieldID,
		toTerm: permission.ByID,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{ID: pe.ID}
		},
	},
}

// ToEdge converts Permission into PermissionEdge.
func (pe *Permission) ToEdge(order *PermissionOrder) *PermissionEdge {
	if order == nil {
		order = DefaultPermissionOrder
	}
	return &PermissionEdge{
		Node:   pe,
		Cursor: order.Field.toCursor(pe),
	}
}

// RoleEdge is the edge representation of Role.
type RoleEdge struct {
	Node   *Role  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// RoleConnection is the connection containing edges to Role.
type RoleConnection struct {
	Edges      []*RoleEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *RoleConnection) build(nodes []*Role, pager *rolePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Role
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Role {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Role {
			return nodes[i]
		}
	}
	c.Edges = make([]*RoleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RoleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RolePaginateOption enables pagination customization.
type RolePaginateOption func(*rolePager) error

// WithRoleOrder configures pagination ordering.
func WithRoleOrder(order *RoleOrder) RolePaginateOption {
	if order == nil {
		order = DefaultRoleOrder
	}
	o := *order
	return func(pager *rolePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRoleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRoleFilter configures pagination filter.
func WithRoleFilter(filter func(*RoleQuery) (*RoleQuery, error)) RolePaginateOption {
	return func(pager *rolePager) error {
		if filter == nil {
			return errors.New("RoleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type rolePager struct {
	reverse bool
	order   *RoleOrder
	filter  func(*RoleQuery) (*RoleQuery, error)
}

func newRolePager(opts []RolePaginateOption, reverse bool) (*rolePager, error) {
	pager := &rolePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRoleOrder
	}
	return pager, nil
}

func (p *rolePager) applyFilter(query *RoleQuery) (*RoleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *rolePager) toCursor(r *Role) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *rolePager) applyCursors(query *RoleQuery, after, before *Cursor) (*RoleQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRoleOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *rolePager) applyOrder(query *RoleQuery) *RoleQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRoleOrder.Field {
		query = query.Order(DefaultRoleOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *rolePager) orderExpr(query *RoleQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRoleOrder.Field {
			b.Comma().Ident(DefaultRoleOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Role.
func (r *RoleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RolePaginateOption,
) (*RoleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRolePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RoleConnection{Edges: []*RoleEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := r.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RoleOrderFieldID orders Role by id.
	RoleOrderFieldID = &RoleOrderField{
		Value: func(r *Role) (ent.Value, error) {
			return r.ID, nil
		},
		column: role.FieldID,
		toTerm: role.ByID,
		toCursor: func(r *Role) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.ID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RoleOrderField) String() string {
	var str string
	switch f.column {
	case RoleOrderFieldID.column:
		str = "id"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RoleOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RoleOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RoleOrderField %T must be a string", v)
	}
	switch str {
	case "id":
		*f = *RoleOrderFieldID
	default:
		return fmt.Errorf("%s is not a valid RoleOrderField", str)
	}
	return nil
}

// RoleOrderField defines the ordering field of Role.
type RoleOrderField struct {
	// Value extracts the ordering value from the given Role.
	Value    func(*Role) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) role.OrderOption
	toCursor func(*Role) Cursor
}

// RoleOrder defines the ordering of Role.
type RoleOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *RoleOrderField `json:"field"`
}

// DefaultRoleOrder is the default ordering of Role.
var DefaultRoleOrder = &RoleOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RoleOrderField{
		Value: func(r *Role) (ent.Value, error) {
			return r.ID, nil
		},
		column: role.FieldID,
		toTerm: role.ByID,
		toCursor: func(r *Role) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Role into RoleEdge.
func (r *Role) ToEdge(order *RoleOrder) *RoleEdge {
	if order == nil {
		order = DefaultRoleOrder
	}
	return &RoleEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}
