// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/gva/app/database/schema/pxid"
	"github.com/gva/internal/ent/genre"
	"github.com/gva/internal/ent/manga"
	"github.com/gva/internal/ent/mangachapter"
	"github.com/gva/internal/ent/predicate"

	"github.com/gva/internal/ent/internal"
)

// MangaUpdate is the builder for updating Manga entities.
type MangaUpdate struct {
	config
	hooks     []Hook
	mutation  *MangaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MangaUpdate builder.
func (mu *MangaUpdate) Where(ps ...predicate.Manga) *MangaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MangaUpdate) SetCreatedAt(t time.Time) *MangaUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableCreatedAt(t *time.Time) *MangaUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MangaUpdate) SetUpdatedAt(t time.Time) *MangaUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetIsEnable sets the "is_enable" field.
func (mu *MangaUpdate) SetIsEnable(b bool) *MangaUpdate {
	mu.mutation.SetIsEnable(b)
	return mu
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableIsEnable(b *bool) *MangaUpdate {
	if b != nil {
		mu.SetIsEnable(*b)
	}
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MangaUpdate) SetDeletedAt(i int) *MangaUpdate {
	mu.mutation.ResetDeletedAt()
	mu.mutation.SetDeletedAt(i)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableDeletedAt(i *int) *MangaUpdate {
	if i != nil {
		mu.SetDeletedAt(*i)
	}
	return mu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (mu *MangaUpdate) AddDeletedAt(i int) *MangaUpdate {
	mu.mutation.AddDeletedAt(i)
	return mu
}

// SetNameID sets the "name_id" field.
func (mu *MangaUpdate) SetNameID(s string) *MangaUpdate {
	mu.mutation.SetNameID(s)
	return mu
}

// SetNillableNameID sets the "name_id" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableNameID(s *string) *MangaUpdate {
	if s != nil {
		mu.SetNameID(*s)
	}
	return mu
}

// SetName sets the "name" field.
func (mu *MangaUpdate) SetName(s string) *MangaUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableName(s *string) *MangaUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetDesc sets the "desc" field.
func (mu *MangaUpdate) SetDesc(s string) *MangaUpdate {
	mu.mutation.SetDesc(s)
	return mu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableDesc(s *string) *MangaUpdate {
	if s != nil {
		mu.SetDesc(*s)
	}
	return mu
}

// SetProdiver sets the "prodiver" field.
func (mu *MangaUpdate) SetProdiver(s string) *MangaUpdate {
	mu.mutation.SetProdiver(s)
	return mu
}

// SetNillableProdiver sets the "prodiver" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableProdiver(s *string) *MangaUpdate {
	if s != nil {
		mu.SetProdiver(*s)
	}
	return mu
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (mu *MangaUpdate) SetThumbnailURL(s string) *MangaUpdate {
	mu.mutation.SetThumbnailURL(s)
	return mu
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableThumbnailURL(s *string) *MangaUpdate {
	if s != nil {
		mu.SetThumbnailURL(*s)
	}
	return mu
}

// SetAuthors sets the "authors" field.
func (mu *MangaUpdate) SetAuthors(s []string) *MangaUpdate {
	mu.mutation.SetAuthors(s)
	return mu
}

// AppendAuthors appends s to the "authors" field.
func (mu *MangaUpdate) AppendAuthors(s []string) *MangaUpdate {
	mu.mutation.AppendAuthors(s)
	return mu
}

// AddChapterIDs adds the "chapters" edge to the MangaChapter entity by IDs.
func (mu *MangaUpdate) AddChapterIDs(ids ...pxid.ID) *MangaUpdate {
	mu.mutation.AddChapterIDs(ids...)
	return mu
}

// AddChapters adds the "chapters" edges to the MangaChapter entity.
func (mu *MangaUpdate) AddChapters(m ...*MangaChapter) *MangaUpdate {
	ids := make([]pxid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddChapterIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the Genre entity by IDs.
func (mu *MangaUpdate) AddGenreIDs(ids ...pxid.ID) *MangaUpdate {
	mu.mutation.AddGenreIDs(ids...)
	return mu
}

// AddGenres adds the "genres" edges to the Genre entity.
func (mu *MangaUpdate) AddGenres(g ...*Genre) *MangaUpdate {
	ids := make([]pxid.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mu.AddGenreIDs(ids...)
}

// Mutation returns the MangaMutation object of the builder.
func (mu *MangaUpdate) Mutation() *MangaMutation {
	return mu.mutation
}

// ClearChapters clears all "chapters" edges to the MangaChapter entity.
func (mu *MangaUpdate) ClearChapters() *MangaUpdate {
	mu.mutation.ClearChapters()
	return mu
}

// RemoveChapterIDs removes the "chapters" edge to MangaChapter entities by IDs.
func (mu *MangaUpdate) RemoveChapterIDs(ids ...pxid.ID) *MangaUpdate {
	mu.mutation.RemoveChapterIDs(ids...)
	return mu
}

// RemoveChapters removes "chapters" edges to MangaChapter entities.
func (mu *MangaUpdate) RemoveChapters(m ...*MangaChapter) *MangaUpdate {
	ids := make([]pxid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveChapterIDs(ids...)
}

// ClearGenres clears all "genres" edges to the Genre entity.
func (mu *MangaUpdate) ClearGenres() *MangaUpdate {
	mu.mutation.ClearGenres()
	return mu
}

// RemoveGenreIDs removes the "genres" edge to Genre entities by IDs.
func (mu *MangaUpdate) RemoveGenreIDs(ids ...pxid.ID) *MangaUpdate {
	mu.mutation.RemoveGenreIDs(ids...)
	return mu
}

// RemoveGenres removes "genres" edges to Genre entities.
func (mu *MangaUpdate) RemoveGenres(g ...*Genre) *MangaUpdate {
	ids := make([]pxid.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mu.RemoveGenreIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MangaUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MangaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MangaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MangaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MangaUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := manga.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MangaUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MangaUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MangaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(manga.Table, manga.Columns, sqlgraph.NewFieldSpec(manga.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(manga.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(manga.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.IsEnable(); ok {
		_spec.SetField(manga.FieldIsEnable, field.TypeBool, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(manga.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(manga.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := mu.mutation.NameID(); ok {
		_spec.SetField(manga.FieldNameID, field.TypeString, value)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(manga.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Desc(); ok {
		_spec.SetField(manga.FieldDesc, field.TypeString, value)
	}
	if value, ok := mu.mutation.Prodiver(); ok {
		_spec.SetField(manga.FieldProdiver, field.TypeString, value)
	}
	if value, ok := mu.mutation.ThumbnailURL(); ok {
		_spec.SetField(manga.FieldThumbnailURL, field.TypeString, value)
	}
	if value, ok := mu.mutation.Authors(); ok {
		_spec.SetField(manga.FieldAuthors, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedAuthors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, manga.FieldAuthors, value)
		})
	}
	if mu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mangachapter.FieldID, field.TypeString),
			},
		}
		edge.Schema = mu.schemaConfig.MangaChapter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !mu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mangachapter.FieldID, field.TypeString),
			},
		}
		edge.Schema = mu.schemaConfig.MangaChapter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mangachapter.FieldID, field.TypeString),
			},
		}
		edge.Schema = mu.schemaConfig.MangaChapter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manga.GenresTable,
			Columns: manga.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeString),
			},
		}
		edge.Schema = mu.schemaConfig.GenreMangas
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedGenresIDs(); len(nodes) > 0 && !mu.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manga.GenresTable,
			Columns: manga.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeString),
			},
		}
		edge.Schema = mu.schemaConfig.GenreMangas
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manga.GenresTable,
			Columns: manga.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeString),
			},
		}
		edge.Schema = mu.schemaConfig.GenreMangas
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mu.schemaConfig.Manga
	ctx = internal.NewSchemaConfigContext(ctx, mu.schemaConfig)
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manga.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MangaUpdateOne is the builder for updating a single Manga entity.
type MangaUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MangaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (muo *MangaUpdateOne) SetCreatedAt(t time.Time) *MangaUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableCreatedAt(t *time.Time) *MangaUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MangaUpdateOne) SetUpdatedAt(t time.Time) *MangaUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetIsEnable sets the "is_enable" field.
func (muo *MangaUpdateOne) SetIsEnable(b bool) *MangaUpdateOne {
	muo.mutation.SetIsEnable(b)
	return muo
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableIsEnable(b *bool) *MangaUpdateOne {
	if b != nil {
		muo.SetIsEnable(*b)
	}
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MangaUpdateOne) SetDeletedAt(i int) *MangaUpdateOne {
	muo.mutation.ResetDeletedAt()
	muo.mutation.SetDeletedAt(i)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableDeletedAt(i *int) *MangaUpdateOne {
	if i != nil {
		muo.SetDeletedAt(*i)
	}
	return muo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (muo *MangaUpdateOne) AddDeletedAt(i int) *MangaUpdateOne {
	muo.mutation.AddDeletedAt(i)
	return muo
}

// SetNameID sets the "name_id" field.
func (muo *MangaUpdateOne) SetNameID(s string) *MangaUpdateOne {
	muo.mutation.SetNameID(s)
	return muo
}

// SetNillableNameID sets the "name_id" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableNameID(s *string) *MangaUpdateOne {
	if s != nil {
		muo.SetNameID(*s)
	}
	return muo
}

// SetName sets the "name" field.
func (muo *MangaUpdateOne) SetName(s string) *MangaUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableName(s *string) *MangaUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetDesc sets the "desc" field.
func (muo *MangaUpdateOne) SetDesc(s string) *MangaUpdateOne {
	muo.mutation.SetDesc(s)
	return muo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableDesc(s *string) *MangaUpdateOne {
	if s != nil {
		muo.SetDesc(*s)
	}
	return muo
}

// SetProdiver sets the "prodiver" field.
func (muo *MangaUpdateOne) SetProdiver(s string) *MangaUpdateOne {
	muo.mutation.SetProdiver(s)
	return muo
}

// SetNillableProdiver sets the "prodiver" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableProdiver(s *string) *MangaUpdateOne {
	if s != nil {
		muo.SetProdiver(*s)
	}
	return muo
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (muo *MangaUpdateOne) SetThumbnailURL(s string) *MangaUpdateOne {
	muo.mutation.SetThumbnailURL(s)
	return muo
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableThumbnailURL(s *string) *MangaUpdateOne {
	if s != nil {
		muo.SetThumbnailURL(*s)
	}
	return muo
}

// SetAuthors sets the "authors" field.
func (muo *MangaUpdateOne) SetAuthors(s []string) *MangaUpdateOne {
	muo.mutation.SetAuthors(s)
	return muo
}

// AppendAuthors appends s to the "authors" field.
func (muo *MangaUpdateOne) AppendAuthors(s []string) *MangaUpdateOne {
	muo.mutation.AppendAuthors(s)
	return muo
}

// AddChapterIDs adds the "chapters" edge to the MangaChapter entity by IDs.
func (muo *MangaUpdateOne) AddChapterIDs(ids ...pxid.ID) *MangaUpdateOne {
	muo.mutation.AddChapterIDs(ids...)
	return muo
}

// AddChapters adds the "chapters" edges to the MangaChapter entity.
func (muo *MangaUpdateOne) AddChapters(m ...*MangaChapter) *MangaUpdateOne {
	ids := make([]pxid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddChapterIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the Genre entity by IDs.
func (muo *MangaUpdateOne) AddGenreIDs(ids ...pxid.ID) *MangaUpdateOne {
	muo.mutation.AddGenreIDs(ids...)
	return muo
}

// AddGenres adds the "genres" edges to the Genre entity.
func (muo *MangaUpdateOne) AddGenres(g ...*Genre) *MangaUpdateOne {
	ids := make([]pxid.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return muo.AddGenreIDs(ids...)
}

// Mutation returns the MangaMutation object of the builder.
func (muo *MangaUpdateOne) Mutation() *MangaMutation {
	return muo.mutation
}

// ClearChapters clears all "chapters" edges to the MangaChapter entity.
func (muo *MangaUpdateOne) ClearChapters() *MangaUpdateOne {
	muo.mutation.ClearChapters()
	return muo
}

// RemoveChapterIDs removes the "chapters" edge to MangaChapter entities by IDs.
func (muo *MangaUpdateOne) RemoveChapterIDs(ids ...pxid.ID) *MangaUpdateOne {
	muo.mutation.RemoveChapterIDs(ids...)
	return muo
}

// RemoveChapters removes "chapters" edges to MangaChapter entities.
func (muo *MangaUpdateOne) RemoveChapters(m ...*MangaChapter) *MangaUpdateOne {
	ids := make([]pxid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveChapterIDs(ids...)
}

// ClearGenres clears all "genres" edges to the Genre entity.
func (muo *MangaUpdateOne) ClearGenres() *MangaUpdateOne {
	muo.mutation.ClearGenres()
	return muo
}

// RemoveGenreIDs removes the "genres" edge to Genre entities by IDs.
func (muo *MangaUpdateOne) RemoveGenreIDs(ids ...pxid.ID) *MangaUpdateOne {
	muo.mutation.RemoveGenreIDs(ids...)
	return muo
}

// RemoveGenres removes "genres" edges to Genre entities.
func (muo *MangaUpdateOne) RemoveGenres(g ...*Genre) *MangaUpdateOne {
	ids := make([]pxid.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return muo.RemoveGenreIDs(ids...)
}

// Where appends a list predicates to the MangaUpdate builder.
func (muo *MangaUpdateOne) Where(ps ...predicate.Manga) *MangaUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MangaUpdateOne) Select(field string, fields ...string) *MangaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Manga entity.
func (muo *MangaUpdateOne) Save(ctx context.Context) (*Manga, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MangaUpdateOne) SaveX(ctx context.Context) *Manga {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MangaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MangaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MangaUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := manga.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MangaUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MangaUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MangaUpdateOne) sqlSave(ctx context.Context) (_node *Manga, err error) {
	_spec := sqlgraph.NewUpdateSpec(manga.Table, manga.Columns, sqlgraph.NewFieldSpec(manga.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Manga.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, manga.FieldID)
		for _, f := range fields {
			if !manga.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != manga.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(manga.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(manga.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.IsEnable(); ok {
		_spec.SetField(manga.FieldIsEnable, field.TypeBool, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(manga.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(manga.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := muo.mutation.NameID(); ok {
		_spec.SetField(manga.FieldNameID, field.TypeString, value)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(manga.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Desc(); ok {
		_spec.SetField(manga.FieldDesc, field.TypeString, value)
	}
	if value, ok := muo.mutation.Prodiver(); ok {
		_spec.SetField(manga.FieldProdiver, field.TypeString, value)
	}
	if value, ok := muo.mutation.ThumbnailURL(); ok {
		_spec.SetField(manga.FieldThumbnailURL, field.TypeString, value)
	}
	if value, ok := muo.mutation.Authors(); ok {
		_spec.SetField(manga.FieldAuthors, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedAuthors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, manga.FieldAuthors, value)
		})
	}
	if muo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mangachapter.FieldID, field.TypeString),
			},
		}
		edge.Schema = muo.schemaConfig.MangaChapter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !muo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mangachapter.FieldID, field.TypeString),
			},
		}
		edge.Schema = muo.schemaConfig.MangaChapter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mangachapter.FieldID, field.TypeString),
			},
		}
		edge.Schema = muo.schemaConfig.MangaChapter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manga.GenresTable,
			Columns: manga.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeString),
			},
		}
		edge.Schema = muo.schemaConfig.GenreMangas
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedGenresIDs(); len(nodes) > 0 && !muo.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manga.GenresTable,
			Columns: manga.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeString),
			},
		}
		edge.Schema = muo.schemaConfig.GenreMangas
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manga.GenresTable,
			Columns: manga.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeString),
			},
		}
		edge.Schema = muo.schemaConfig.GenreMangas
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = muo.schemaConfig.Manga
	ctx = internal.NewSchemaConfigContext(ctx, muo.schemaConfig)
	_spec.AddModifiers(muo.modifiers...)
	_node = &Manga{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manga.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
