// Code generated by ent, DO NOT EDIT.

package mangachapter

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gva/app/database/schema/pxid"
	"github.com/gva/internal/ent/predicate"

	"github.com/gva/internal/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldUpdatedAt, v))
}

// MangaID applies equality check predicate on the "manga_id" field. It's identical to MangaIDEQ.
func MangaID(v pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldMangaID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldTitle, v))
}

// ImgURL applies equality check predicate on the "img_url" field. It's identical to ImgURLEQ.
func ImgURL(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldImgURL, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v uint) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldNumber, v))
}

// ProviderName applies equality check predicate on the "provider_name" field. It's identical to ProviderNameEQ.
func ProviderName(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldProviderName, v))
}

// ChapterUpdatedAt applies equality check predicate on the "chapter_updated_at" field. It's identical to ChapterUpdatedAtEQ.
func ChapterUpdatedAt(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldChapterUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLTE(FieldUpdatedAt, v))
}

// MangaIDEQ applies the EQ predicate on the "manga_id" field.
func MangaIDEQ(v pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldMangaID, v))
}

// MangaIDNEQ applies the NEQ predicate on the "manga_id" field.
func MangaIDNEQ(v pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNEQ(FieldMangaID, v))
}

// MangaIDIn applies the In predicate on the "manga_id" field.
func MangaIDIn(vs ...pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldIn(FieldMangaID, vs...))
}

// MangaIDNotIn applies the NotIn predicate on the "manga_id" field.
func MangaIDNotIn(vs ...pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNotIn(FieldMangaID, vs...))
}

// MangaIDGT applies the GT predicate on the "manga_id" field.
func MangaIDGT(v pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGT(FieldMangaID, v))
}

// MangaIDGTE applies the GTE predicate on the "manga_id" field.
func MangaIDGTE(v pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGTE(FieldMangaID, v))
}

// MangaIDLT applies the LT predicate on the "manga_id" field.
func MangaIDLT(v pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLT(FieldMangaID, v))
}

// MangaIDLTE applies the LTE predicate on the "manga_id" field.
func MangaIDLTE(v pxid.ID) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLTE(FieldMangaID, v))
}

// MangaIDContains applies the Contains predicate on the "manga_id" field.
func MangaIDContains(v pxid.ID) predicate.MangaChapter {
	vc := string(v)
	return predicate.MangaChapter(sql.FieldContains(FieldMangaID, vc))
}

// MangaIDHasPrefix applies the HasPrefix predicate on the "manga_id" field.
func MangaIDHasPrefix(v pxid.ID) predicate.MangaChapter {
	vc := string(v)
	return predicate.MangaChapter(sql.FieldHasPrefix(FieldMangaID, vc))
}

// MangaIDHasSuffix applies the HasSuffix predicate on the "manga_id" field.
func MangaIDHasSuffix(v pxid.ID) predicate.MangaChapter {
	vc := string(v)
	return predicate.MangaChapter(sql.FieldHasSuffix(FieldMangaID, vc))
}

// MangaIDEqualFold applies the EqualFold predicate on the "manga_id" field.
func MangaIDEqualFold(v pxid.ID) predicate.MangaChapter {
	vc := string(v)
	return predicate.MangaChapter(sql.FieldEqualFold(FieldMangaID, vc))
}

// MangaIDContainsFold applies the ContainsFold predicate on the "manga_id" field.
func MangaIDContainsFold(v pxid.ID) predicate.MangaChapter {
	vc := string(v)
	return predicate.MangaChapter(sql.FieldContainsFold(FieldMangaID, vc))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldContainsFold(FieldTitle, v))
}

// ImgURLEQ applies the EQ predicate on the "img_url" field.
func ImgURLEQ(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldImgURL, v))
}

// ImgURLNEQ applies the NEQ predicate on the "img_url" field.
func ImgURLNEQ(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNEQ(FieldImgURL, v))
}

// ImgURLIn applies the In predicate on the "img_url" field.
func ImgURLIn(vs ...string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldIn(FieldImgURL, vs...))
}

// ImgURLNotIn applies the NotIn predicate on the "img_url" field.
func ImgURLNotIn(vs ...string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNotIn(FieldImgURL, vs...))
}

// ImgURLGT applies the GT predicate on the "img_url" field.
func ImgURLGT(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGT(FieldImgURL, v))
}

// ImgURLGTE applies the GTE predicate on the "img_url" field.
func ImgURLGTE(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGTE(FieldImgURL, v))
}

// ImgURLLT applies the LT predicate on the "img_url" field.
func ImgURLLT(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLT(FieldImgURL, v))
}

// ImgURLLTE applies the LTE predicate on the "img_url" field.
func ImgURLLTE(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLTE(FieldImgURL, v))
}

// ImgURLContains applies the Contains predicate on the "img_url" field.
func ImgURLContains(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldContains(FieldImgURL, v))
}

// ImgURLHasPrefix applies the HasPrefix predicate on the "img_url" field.
func ImgURLHasPrefix(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldHasPrefix(FieldImgURL, v))
}

// ImgURLHasSuffix applies the HasSuffix predicate on the "img_url" field.
func ImgURLHasSuffix(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldHasSuffix(FieldImgURL, v))
}

// ImgURLEqualFold applies the EqualFold predicate on the "img_url" field.
func ImgURLEqualFold(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEqualFold(FieldImgURL, v))
}

// ImgURLContainsFold applies the ContainsFold predicate on the "img_url" field.
func ImgURLContainsFold(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldContainsFold(FieldImgURL, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v uint) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v uint) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...uint) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...uint) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v uint) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v uint) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v uint) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v uint) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLTE(FieldNumber, v))
}

// ProviderNameEQ applies the EQ predicate on the "provider_name" field.
func ProviderNameEQ(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldProviderName, v))
}

// ProviderNameNEQ applies the NEQ predicate on the "provider_name" field.
func ProviderNameNEQ(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNEQ(FieldProviderName, v))
}

// ProviderNameIn applies the In predicate on the "provider_name" field.
func ProviderNameIn(vs ...string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldIn(FieldProviderName, vs...))
}

// ProviderNameNotIn applies the NotIn predicate on the "provider_name" field.
func ProviderNameNotIn(vs ...string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNotIn(FieldProviderName, vs...))
}

// ProviderNameGT applies the GT predicate on the "provider_name" field.
func ProviderNameGT(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGT(FieldProviderName, v))
}

// ProviderNameGTE applies the GTE predicate on the "provider_name" field.
func ProviderNameGTE(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGTE(FieldProviderName, v))
}

// ProviderNameLT applies the LT predicate on the "provider_name" field.
func ProviderNameLT(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLT(FieldProviderName, v))
}

// ProviderNameLTE applies the LTE predicate on the "provider_name" field.
func ProviderNameLTE(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLTE(FieldProviderName, v))
}

// ProviderNameContains applies the Contains predicate on the "provider_name" field.
func ProviderNameContains(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldContains(FieldProviderName, v))
}

// ProviderNameHasPrefix applies the HasPrefix predicate on the "provider_name" field.
func ProviderNameHasPrefix(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldHasPrefix(FieldProviderName, v))
}

// ProviderNameHasSuffix applies the HasSuffix predicate on the "provider_name" field.
func ProviderNameHasSuffix(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldHasSuffix(FieldProviderName, v))
}

// ProviderNameEqualFold applies the EqualFold predicate on the "provider_name" field.
func ProviderNameEqualFold(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEqualFold(FieldProviderName, v))
}

// ProviderNameContainsFold applies the ContainsFold predicate on the "provider_name" field.
func ProviderNameContainsFold(v string) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldContainsFold(FieldProviderName, v))
}

// ChapterUpdatedAtEQ applies the EQ predicate on the "chapter_updated_at" field.
func ChapterUpdatedAtEQ(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldEQ(FieldChapterUpdatedAt, v))
}

// ChapterUpdatedAtNEQ applies the NEQ predicate on the "chapter_updated_at" field.
func ChapterUpdatedAtNEQ(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNEQ(FieldChapterUpdatedAt, v))
}

// ChapterUpdatedAtIn applies the In predicate on the "chapter_updated_at" field.
func ChapterUpdatedAtIn(vs ...time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldIn(FieldChapterUpdatedAt, vs...))
}

// ChapterUpdatedAtNotIn applies the NotIn predicate on the "chapter_updated_at" field.
func ChapterUpdatedAtNotIn(vs ...time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldNotIn(FieldChapterUpdatedAt, vs...))
}

// ChapterUpdatedAtGT applies the GT predicate on the "chapter_updated_at" field.
func ChapterUpdatedAtGT(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGT(FieldChapterUpdatedAt, v))
}

// ChapterUpdatedAtGTE applies the GTE predicate on the "chapter_updated_at" field.
func ChapterUpdatedAtGTE(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldGTE(FieldChapterUpdatedAt, v))
}

// ChapterUpdatedAtLT applies the LT predicate on the "chapter_updated_at" field.
func ChapterUpdatedAtLT(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLT(FieldChapterUpdatedAt, v))
}

// ChapterUpdatedAtLTE applies the LTE predicate on the "chapter_updated_at" field.
func ChapterUpdatedAtLTE(v time.Time) predicate.MangaChapter {
	return predicate.MangaChapter(sql.FieldLTE(FieldChapterUpdatedAt, v))
}

// HasManga applies the HasEdge predicate on the "manga" edge.
func HasManga() predicate.MangaChapter {
	return predicate.MangaChapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MangaTable, MangaColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Manga
		step.Edge.Schema = schemaConfig.MangaChapter
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMangaWith applies the HasEdge predicate on the "manga" edge with a given conditions (other predicates).
func HasMangaWith(preds ...predicate.Manga) predicate.MangaChapter {
	return predicate.MangaChapter(func(s *sql.Selector) {
		step := newMangaStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Manga
		step.Edge.Schema = schemaConfig.MangaChapter
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MangaChapter) predicate.MangaChapter {
	return predicate.MangaChapter(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MangaChapter) predicate.MangaChapter {
	return predicate.MangaChapter(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MangaChapter) predicate.MangaChapter {
	return predicate.MangaChapter(sql.NotPredicates(p))
}
