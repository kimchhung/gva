// Code generated by ent, DO NOT EDIT.

package manga

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gva/app/database/schema/pxid"
)

const (
	// Label holds the string label denoting the manga type in the database.
	Label = "manga"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldIsEnable holds the string denoting the is_enable field in the database.
	FieldIsEnable = "is_enable"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldNameID holds the string denoting the name_id field in the database.
	FieldNameID = "name_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldProdiver holds the string denoting the prodiver field in the database.
	FieldProdiver = "prodiver"
	// FieldThumbnailURL holds the string denoting the thumbnail_url field in the database.
	FieldThumbnailURL = "thumbnail_url"
	// FieldAuthors holds the string denoting the authors field in the database.
	FieldAuthors = "authors"
	// EdgeChapters holds the string denoting the chapters edge name in mutations.
	EdgeChapters = "chapters"
	// EdgeGenres holds the string denoting the genres edge name in mutations.
	EdgeGenres = "genres"
	// Table holds the table name of the manga in the database.
	Table = "mangas"
	// ChaptersTable is the table that holds the chapters relation/edge.
	ChaptersTable = "manga_chapters"
	// ChaptersInverseTable is the table name for the MangaChapter entity.
	// It exists in this package in order to avoid circular dependency with the "mangachapter" package.
	ChaptersInverseTable = "manga_chapters"
	// ChaptersColumn is the table column denoting the chapters relation/edge.
	ChaptersColumn = "manga_id"
	// GenresTable is the table that holds the genres relation/edge. The primary key declared below.
	GenresTable = "genre_mangas"
	// GenresInverseTable is the table name for the Genre entity.
	// It exists in this package in order to avoid circular dependency with the "genre" package.
	GenresInverseTable = "genres"
)

// Columns holds all SQL columns for manga fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldIsEnable,
	FieldDeletedAt,
	FieldNameID,
	FieldName,
	FieldDesc,
	FieldProdiver,
	FieldThumbnailURL,
	FieldAuthors,
}

var (
	// GenresPrimaryKey and GenresColumn2 are the table columns denoting the
	// primary key for the genres relation (M2M).
	GenresPrimaryKey = []string{"genre_id", "manga_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/gva/internal/ent/runtime"
var (
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsEnable holds the default value on creation for the "is_enable" field.
	DefaultIsEnable bool
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pxid.ID
)

// OrderOption defines the ordering options for the Manga queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByIsEnable orders the results by the is_enable field.
func ByIsEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEnable, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByNameID orders the results by the name_id field.
func ByNameID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByProdiver orders the results by the prodiver field.
func ByProdiver(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProdiver, opts...).ToFunc()
}

// ByThumbnailURL orders the results by the thumbnail_url field.
func ByThumbnailURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumbnailURL, opts...).ToFunc()
}

// ByChaptersCount orders the results by chapters count.
func ByChaptersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChaptersStep(), opts...)
	}
}

// ByChapters orders the results by chapters terms.
func ByChapters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChaptersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGenresCount orders the results by genres count.
func ByGenresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGenresStep(), opts...)
	}
}

// ByGenres orders the results by genres terms.
func ByGenres(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGenresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newChaptersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChaptersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
	)
}
func newGenresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GenresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GenresTable, GenresPrimaryKey...),
	)
}
