// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gva/app/database/schema/pxid"
	"github.com/gva/internal/ent/manga"
	"github.com/gva/internal/ent/mangachapter"
)

// MangaChapter is the model entity for the MangaChapter schema.
type MangaChapter struct {
	config `json:"-" rql:"-"`
	// ID of the ent.
	ID pxid.ID `json:"id" rql:"filter,sort"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty" rql:"filter,sort"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// MangaID holds the value of the "manga_id" field.
	MangaID pxid.ID `json:"mangaId,omitempty" rql:"filter,sort"`
	// Title holds the value of the "title" field.
	Title string `json:"title" rql:"filter,sort"`
	// ImgURL holds the value of the "img_url" field.
	ImgURL string `json:"imgUrl"`
	// Number holds the value of the "number" field.
	Number uint `json:"number" rql:"filter,sort"`
	// ProviderName holds the value of the "provider_name" field.
	ProviderName string `json:"providerName"`
	// ChapterUpdatedAt holds the value of the "chapter_updated_at" field.
	ChapterUpdatedAt time.Time `json:"chapterUpdatedAt" rql:"filter,sort"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MangaChapterQuery when eager-loading is set.
	Edges        MangaChapterEdges `json:"edges" rql:"-"`
	selectValues sql.SelectValues
}

// MangaChapterEdges holds the relations/edges for other nodes in the graph.
type MangaChapterEdges struct {
	// Manga holds the value of the manga edge.
	Manga *Manga `json:"manga,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// MangaOrErr returns the Manga value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MangaChapterEdges) MangaOrErr() (*Manga, error) {
	if e.Manga != nil {
		return e.Manga, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: manga.Label}
	}
	return nil, &NotLoadedError{edge: "manga"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MangaChapter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mangachapter.FieldID, mangachapter.FieldMangaID:
			values[i] = new(pxid.ID)
		case mangachapter.FieldNumber:
			values[i] = new(sql.NullInt64)
		case mangachapter.FieldTitle, mangachapter.FieldImgURL, mangachapter.FieldProviderName:
			values[i] = new(sql.NullString)
		case mangachapter.FieldCreatedAt, mangachapter.FieldUpdatedAt, mangachapter.FieldChapterUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MangaChapter fields.
func (mc *MangaChapter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mangachapter.FieldID:
			if value, ok := values[i].(*pxid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mc.ID = *value
			}
		case mangachapter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mc.CreatedAt = value.Time
			}
		case mangachapter.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mc.UpdatedAt = value.Time
			}
		case mangachapter.FieldMangaID:
			if value, ok := values[i].(*pxid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field manga_id", values[i])
			} else if value != nil {
				mc.MangaID = *value
			}
		case mangachapter.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				mc.Title = value.String
			}
		case mangachapter.FieldImgURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_url", values[i])
			} else if value.Valid {
				mc.ImgURL = value.String
			}
		case mangachapter.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				mc.Number = uint(value.Int64)
			}
		case mangachapter.FieldProviderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_name", values[i])
			} else if value.Valid {
				mc.ProviderName = value.String
			}
		case mangachapter.FieldChapterUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field chapter_updated_at", values[i])
			} else if value.Valid {
				mc.ChapterUpdatedAt = value.Time
			}
		default:
			mc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MangaChapter.
// This includes values selected through modifiers, order, etc.
func (mc *MangaChapter) Value(name string) (ent.Value, error) {
	return mc.selectValues.Get(name)
}

// QueryManga queries the "manga" edge of the MangaChapter entity.
func (mc *MangaChapter) QueryManga() *MangaQuery {
	return NewMangaChapterClient(mc.config).QueryManga(mc)
}

// Update returns a builder for updating this MangaChapter.
// Note that you need to call MangaChapter.Unwrap() before calling this method if this MangaChapter
// was returned from a transaction, and the transaction was committed or rolled back.
func (mc *MangaChapter) Update() *MangaChapterUpdateOne {
	return NewMangaChapterClient(mc.config).UpdateOne(mc)
}

// Unwrap unwraps the MangaChapter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mc *MangaChapter) Unwrap() *MangaChapter {
	_tx, ok := mc.config.driver.(*txDriver)
	if !ok {
		panic("ent: MangaChapter is not a transactional entity")
	}
	mc.config.driver = _tx.drv
	return mc
}

// String implements the fmt.Stringer.
func (mc *MangaChapter) String() string {
	var builder strings.Builder
	builder.WriteString("MangaChapter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("manga_id=")
	builder.WriteString(fmt.Sprintf("%v", mc.MangaID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(mc.Title)
	builder.WriteString(", ")
	builder.WriteString("img_url=")
	builder.WriteString(mc.ImgURL)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", mc.Number))
	builder.WriteString(", ")
	builder.WriteString("provider_name=")
	builder.WriteString(mc.ProviderName)
	builder.WriteString(", ")
	builder.WriteString("chapter_updated_at=")
	builder.WriteString(mc.ChapterUpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MangaChapters is a parsable slice of MangaChapter.
type MangaChapters []*MangaChapter
