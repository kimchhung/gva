version: "3.8"

networks:
  app:
    driver: bridge

volumes:
  web-data:
  admin-data:
  bot-data:
  mysql-data:
  redis-data:
  grafana-data:
  prom-data:

services:
  grafana:
    image: grafana/grafana:latest
    user: root
    ports:
      - "3000:3000"
    networks:
      - app
    volumes:
      - "grafana-data:/var/lib/grafana"
      - "./etc/grafana/provisioning/:/etc/grafana/provisioning/"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=123456
      - GF_USERS_ALLOW_SIGN_UP=false

  alertmanager:
    image: prom/alertmanager:v0.27.0
    ports:
      - 9093:9093
    networks:
      - app
    volumes:
      - ./etc/alertmanager/:/etc/alertmanager/
    environment:
      - DISCORD_WEBHOOK_URL=""
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"

  prometheus:
    image: prom/prometheus:v2.35.0
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 9090:9090
    networks:
      - app
    volumes:
      - "./etc/alert.rules.yml:/etc/prometheus/rules.yml"
      - "./etc/prometheus/:/etc/prometheus/"
      - "prom-data:/prometheus"

    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    restart: always

  pushgateway:
    image: prom/pushgateway
    ports:
      - "9091:9091"
    networks:
      - app
    depends_on:
      - prometheus

  cortex:
    image: cortexproject/cortex:v0.1.0
    #image: ubuntu/cortex:latest
    ports:
      - "9009:9009"
    networks:
      - app
    command: "-config.file=/etc/single-process-config.yaml"
    depends_on:
      - prometheus
    volumes:
      - "./etc/cortex/single-process-config.yaml:/etc/single-process-config.yaml"

  redis-exporter:
    image: oliver006/redis_exporter:alpine
    depends_on: ["gva-redis"]
    ports:
      - 9121:9121
    restart: always
    networks:
      - app
    environment:
      REDIS_ADDR: gva-redis:6379
      REDIS_USER: null
      REDIS_PASSWORD: password

  mysqld-exporter:
    image: prom/mysqld-exporter:main
    user: root
    networks:
      - app
    ports:
      - "9104:9104"
    volumes:
      - "./etc/mysqld_exporter/.my.cnf:/.my.cnf"
    environment:
      - "MYSQLD_EXPORTER_PASSWORD=${MYSQLD_EXPORTER_PASSWORD}"
      - "mysqld.address=${DB.MYSQL.ADDRESS}"
      - "mysqld.username=${DB.MYSQL.USERNAME}"
      - "collect.info_schema.tablestats=true"
      - "collect.info_schema.userstats=true"
      - "collect.info_schema.query_response_time=true"
      - "collect.auto_increment.columns=true"
      - "collect.perf_schema.tableiowaits=true"
      - "collect.perf_schema.tablelocks=true"
    depends_on:
      - gva-mysql

  gva-mysql:
    image: mysql:8.4.2
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: gva
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app

  gva-redis:
    image: redis:7.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning --requirepass  password
    volumes:
      - redis-data:/data
    networks:
      - app

  gva-backend-web:
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./build/Dockerfile.web
    volumes:
      - web-data:/app
    networks:
      - app
    ports:
      - 5500:5500

  gva-backend-admin:
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./build/Dockerfile.admin
    volumes:
      - admin-data:/app
    networks:
      - app
    ports:
      - 5501:5501

  gva-backend-bot:
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./build/Dockerfile.bot
    volumes:
      - bot-data:/app
    networks:
      - app
    ports:
      - 5502:5502
