directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Admin implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  isEnable: Boolean!
  deletedAt: Int!
  username: String!
  whitelistIps: [String!]!
  displayName: String
  departmentID: ID
  roles: [Role!]
  department: Department
}
"""
Ordering options for Admin connections
"""
input AdminOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Admins.
  """
  field: AdminOrderField!
}
"""
Properties by which Admin connections can be ordered.
"""
enum AdminOrderField {
  id
}
"""
AdminWhereInput is used for filtering Admin objects.
Input was generated by ent.
"""
input AdminWhereInput {
  not: AdminWhereInput
  and: [AdminWhereInput!]
  or: [AdminWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  is_enable field predicates
  """
  isEnable: Boolean
  isEnableNEQ: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIsNil: Boolean
  displayNameNotNil: Boolean
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  department_id field predicates
  """
  departmentID: ID
  departmentIDNEQ: ID
  departmentIDIn: [ID!]
  departmentIDNotIn: [ID!]
  departmentIDGT: ID
  departmentIDGTE: ID
  departmentIDLT: ID
  departmentIDLTE: ID
  departmentIDContains: ID
  departmentIDHasPrefix: ID
  departmentIDHasSuffix: ID
  departmentIDIsNil: Boolean
  departmentIDNotNil: Boolean
  departmentIDEqualFold: ID
  departmentIDContainsFold: ID
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [RoleWhereInput!]
  """
  department edge predicates
  """
  hasDepartment: Boolean
  hasDepartmentWith: [DepartmentWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Department implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Int!
  isEnable: Boolean!
  nameID: String!
  name: String!
  pid: ID
  parent: Department
  children: [Department!]
  members: [Admin!]
}
"""
A connection to a list of items.
"""
type DepartmentConnection {
  """
  A list of edges.
  """
  edges: [DepartmentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DepartmentEdge {
  """
  The item at the end of the edge.
  """
  node: Department
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Department connections
"""
input DepartmentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Departments.
  """
  field: DepartmentOrderField!
}
"""
Properties by which Department connections can be ordered.
"""
enum DepartmentOrderField {
  id
}
"""
DepartmentWhereInput is used for filtering Department objects.
Input was generated by ent.
"""
input DepartmentWhereInput {
  not: DepartmentWhereInput
  and: [DepartmentWhereInput!]
  or: [DepartmentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  is_enable field predicates
  """
  isEnable: Boolean
  isEnableNEQ: Boolean
  """
  name_id field predicates
  """
  nameID: String
  nameIDNEQ: String
  nameIDIn: [String!]
  nameIDNotIn: [String!]
  nameIDGT: String
  nameIDGTE: String
  nameIDLT: String
  nameIDLTE: String
  nameIDContains: String
  nameIDHasPrefix: String
  nameIDHasSuffix: String
  nameIDEqualFold: String
  nameIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  pid field predicates
  """
  pid: ID
  pidNEQ: ID
  pidIn: [ID!]
  pidNotIn: [ID!]
  pidGT: ID
  pidGTE: ID
  pidLT: ID
  pidLTE: ID
  pidContains: ID
  pidHasPrefix: ID
  pidHasSuffix: ID
  pidIsNil: Boolean
  pidNotNil: Boolean
  pidEqualFold: ID
  pidContainsFold: ID
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [DepartmentWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [DepartmentWhereInput!]
  """
  members edge predicates
  """
  hasMembers: Boolean
  hasMembersWith: [AdminWhereInput!]
}
type Genre implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  isEnable: Boolean!
  deletedAt: Int!
  name: String!
  nameID: String!
  mangas: [Manga!]
}
"""
Ordering options for Genre connections
"""
input GenreOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Genres.
  """
  field: GenreOrderField!
}
"""
Properties by which Genre connections can be ordered.
"""
enum GenreOrderField {
  id
}
"""
GenreWhereInput is used for filtering Genre objects.
Input was generated by ent.
"""
input GenreWhereInput {
  not: GenreWhereInput
  and: [GenreWhereInput!]
  or: [GenreWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  is_enable field predicates
  """
  isEnable: Boolean
  isEnableNEQ: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  name_id field predicates
  """
  nameID: String
  nameIDNEQ: String
  nameIDIn: [String!]
  nameIDNotIn: [String!]
  nameIDGT: String
  nameIDGTE: String
  nameIDLT: String
  nameIDLTE: String
  nameIDContains: String
  nameIDHasPrefix: String
  nameIDHasSuffix: String
  nameIDEqualFold: String
  nameIDContainsFold: String
  """
  mangas edge predicates
  """
  hasMangas: Boolean
  hasMangasWith: [MangaWhereInput!]
}
type Manga implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  isEnable: Boolean!
  deletedAt: Int!
  nameID: String!
  name: String!
  desc: String!
  prodiver: String!
  thumbnailURL: String!
  authors: [String!]!
  chapters: [MangaChapter!]
  genres: [Genre!]
}
type MangaChapter implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  mangaID: ID!
  title: String!
  imgURL: String!
  number: Int!
  providerName: String!
  chapterUpdatedAt: Time!
  manga: Manga!
}
"""
Ordering options for MangaChapter connections
"""
input MangaChapterOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MangaChapters.
  """
  field: MangaChapterOrderField!
}
"""
Properties by which MangaChapter connections can be ordered.
"""
enum MangaChapterOrderField {
  id
}
"""
MangaChapterWhereInput is used for filtering MangaChapter objects.
Input was generated by ent.
"""
input MangaChapterWhereInput {
  not: MangaChapterWhereInput
  and: [MangaChapterWhereInput!]
  or: [MangaChapterWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  manga_id field predicates
  """
  mangaID: ID
  mangaIDNEQ: ID
  mangaIDIn: [ID!]
  mangaIDNotIn: [ID!]
  mangaIDGT: ID
  mangaIDGTE: ID
  mangaIDLT: ID
  mangaIDLTE: ID
  mangaIDContains: ID
  mangaIDHasPrefix: ID
  mangaIDHasSuffix: ID
  mangaIDEqualFold: ID
  mangaIDContainsFold: ID
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  img_url field predicates
  """
  imgURL: String
  imgURLNEQ: String
  imgURLIn: [String!]
  imgURLNotIn: [String!]
  imgURLGT: String
  imgURLGTE: String
  imgURLLT: String
  imgURLLTE: String
  imgURLContains: String
  imgURLHasPrefix: String
  imgURLHasSuffix: String
  imgURLEqualFold: String
  imgURLContainsFold: String
  """
  number field predicates
  """
  number: Int
  numberNEQ: Int
  numberIn: [Int!]
  numberNotIn: [Int!]
  numberGT: Int
  numberGTE: Int
  numberLT: Int
  numberLTE: Int
  """
  provider_name field predicates
  """
  providerName: String
  providerNameNEQ: String
  providerNameIn: [String!]
  providerNameNotIn: [String!]
  providerNameGT: String
  providerNameGTE: String
  providerNameLT: String
  providerNameLTE: String
  providerNameContains: String
  providerNameHasPrefix: String
  providerNameHasSuffix: String
  providerNameEqualFold: String
  providerNameContainsFold: String
  """
  chapter_updated_at field predicates
  """
  chapterUpdatedAt: Time
  chapterUpdatedAtNEQ: Time
  chapterUpdatedAtIn: [Time!]
  chapterUpdatedAtNotIn: [Time!]
  chapterUpdatedAtGT: Time
  chapterUpdatedAtGTE: Time
  chapterUpdatedAtLT: Time
  chapterUpdatedAtLTE: Time
  """
  manga edge predicates
  """
  hasManga: Boolean
  hasMangaWith: [MangaWhereInput!]
}
"""
Ordering options for Manga connections
"""
input MangaOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Mangas.
  """
  field: MangaOrderField!
}
"""
Properties by which Manga connections can be ordered.
"""
enum MangaOrderField {
  id
}
"""
MangaWhereInput is used for filtering Manga objects.
Input was generated by ent.
"""
input MangaWhereInput {
  not: MangaWhereInput
  and: [MangaWhereInput!]
  or: [MangaWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  is_enable field predicates
  """
  isEnable: Boolean
  isEnableNEQ: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  name_id field predicates
  """
  nameID: String
  nameIDNEQ: String
  nameIDIn: [String!]
  nameIDNotIn: [String!]
  nameIDGT: String
  nameIDGTE: String
  nameIDLT: String
  nameIDLTE: String
  nameIDContains: String
  nameIDHasPrefix: String
  nameIDHasSuffix: String
  nameIDEqualFold: String
  nameIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  desc field predicates
  """
  desc: String
  descNEQ: String
  descIn: [String!]
  descNotIn: [String!]
  descGT: String
  descGTE: String
  descLT: String
  descLTE: String
  descContains: String
  descHasPrefix: String
  descHasSuffix: String
  descEqualFold: String
  descContainsFold: String
  """
  prodiver field predicates
  """
  prodiver: String
  prodiverNEQ: String
  prodiverIn: [String!]
  prodiverNotIn: [String!]
  prodiverGT: String
  prodiverGTE: String
  prodiverLT: String
  prodiverLTE: String
  prodiverContains: String
  prodiverHasPrefix: String
  prodiverHasSuffix: String
  prodiverEqualFold: String
  prodiverContainsFold: String
  """
  thumbnail_url field predicates
  """
  thumbnailURL: String
  thumbnailURLNEQ: String
  thumbnailURLIn: [String!]
  thumbnailURLNotIn: [String!]
  thumbnailURLGT: String
  thumbnailURLGTE: String
  thumbnailURLLT: String
  thumbnailURLLTE: String
  thumbnailURLContains: String
  thumbnailURLHasPrefix: String
  thumbnailURLHasSuffix: String
  thumbnailURLEqualFold: String
  thumbnailURLContainsFold: String
  """
  chapters edge predicates
  """
  hasChapters: Boolean
  hasChaptersWith: [MangaChapterWhereInput!]
  """
  genres edge predicates
  """
  hasGenres: Boolean
  hasGenresWith: [GenreWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/gva/internal/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Permission implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  group: String!
  name: String!
  scope: String!
  type: PermissionType
  order: Int
  roles: [Role!]
}
"""
Ordering options for Permission connections
"""
input PermissionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Permissions.
  """
  field: PermissionOrderField!
}
"""
Properties by which Permission connections can be ordered.
"""
enum PermissionOrderField {
  id
}
"""
PermissionType is enum for the field type
"""
enum PermissionType @goModel(model: "github.com/gva/internal/ent/permission.Type") {
  dynamic
  static
}
"""
PermissionWhereInput is used for filtering Permission objects.
Input was generated by ent.
"""
input PermissionWhereInput {
  not: PermissionWhereInput
  and: [PermissionWhereInput!]
  or: [PermissionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  group field predicates
  """
  group: String
  groupNEQ: String
  groupIn: [String!]
  groupNotIn: [String!]
  groupGT: String
  groupGTE: String
  groupLT: String
  groupLTE: String
  groupContains: String
  groupHasPrefix: String
  groupHasSuffix: String
  groupEqualFold: String
  groupContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  scope field predicates
  """
  scope: String
  scopeNEQ: String
  scopeIn: [String!]
  scopeNotIn: [String!]
  scopeGT: String
  scopeGTE: String
  scopeLT: String
  scopeLTE: String
  scopeContains: String
  scopeHasPrefix: String
  scopeHasSuffix: String
  scopeEqualFold: String
  scopeContainsFold: String
  """
  type field predicates
  """
  type: PermissionType
  typeNEQ: PermissionType
  typeIn: [PermissionType!]
  typeNotIn: [PermissionType!]
  typeIsNil: Boolean
  typeNotNil: Boolean
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  orderIsNil: Boolean
  orderNotNil: Boolean
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [RoleWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  departments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Departments returned from the connection.
    """
    orderBy: DepartmentOrder

    """
    Filtering options for Departments returned from the connection.
    """
    where: DepartmentWhereInput
  ): DepartmentConnection!
}
type Role implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  isEnable: Boolean!
  deletedAt: Int!
  name: String!
  description: String!
  order: Int!
  isChangeable: Boolean!
  admins: [Admin!]
  permissions: [Permission!]
}
"""
Ordering options for Role connections
"""
input RoleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Roles.
  """
  field: RoleOrderField!
}
"""
Properties by which Role connections can be ordered.
"""
enum RoleOrderField {
  id
}
"""
RoleWhereInput is used for filtering Role objects.
Input was generated by ent.
"""
input RoleWhereInput {
  not: RoleWhereInput
  and: [RoleWhereInput!]
  or: [RoleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  is_enable field predicates
  """
  isEnable: Boolean
  isEnableNEQ: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  is_changeable field predicates
  """
  isChangeable: Boolean
  isChangeableNEQ: Boolean
  """
  admins edge predicates
  """
  hasAdmins: Boolean
  hasAdminsWith: [AdminWhereInput!]
  """
  permissions edge predicates
  """
  hasPermissions: Boolean
  hasPermissionsWith: [PermissionWhereInput!]
}
