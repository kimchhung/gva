// Code generated by ent, DO NOT EDIT.

package comicchapter

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gva/app/database/schema/pulid"
)

const (
	// Label holds the string label denoting the comicchapter type in the database.
	Label = "comic_chapter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldChapter holds the string denoting the chapter field in the database.
	FieldChapter = "chapter"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldVolumn holds the string denoting the volumn field in the database.
	FieldVolumn = "volumn"
	// FieldLang holds the string denoting the lang field in the database.
	FieldLang = "lang"
	// FieldUpCount holds the string denoting the up_count field in the database.
	FieldUpCount = "up_count"
	// FieldDownCount holds the string denoting the down_count field in the database.
	FieldDownCount = "down_count"
	// FieldIsLastChapter holds the string denoting the is_last_chapter field in the database.
	FieldIsLastChapter = "is_last_chapter"
	// EdgeImgs holds the string denoting the imgs edge name in mutations.
	EdgeImgs = "imgs"
	// EdgeComic holds the string denoting the comic edge name in mutations.
	EdgeComic = "comic"
	// Table holds the table name of the comicchapter in the database.
	Table = "comic_chapters"
	// ImgsTable is the table that holds the imgs relation/edge.
	ImgsTable = "comic_imgs"
	// ImgsInverseTable is the table name for the ComicImg entity.
	// It exists in this package in order to avoid circular dependency with the "comicimg" package.
	ImgsInverseTable = "comic_imgs"
	// ImgsColumn is the table column denoting the imgs relation/edge.
	ImgsColumn = "comic_chapter_imgs"
	// ComicTable is the table that holds the comic relation/edge.
	ComicTable = "comic_chapters"
	// ComicInverseTable is the table name for the Comic entity.
	// It exists in this package in order to avoid circular dependency with the "comic" package.
	ComicInverseTable = "comics"
	// ComicColumn is the table column denoting the comic relation/edge.
	ComicColumn = "comic_chapters"
)

// Columns holds all SQL columns for comicchapter fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldChapter,
	FieldTitle,
	FieldVolumn,
	FieldLang,
	FieldUpCount,
	FieldDownCount,
	FieldIsLastChapter,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "comic_chapters"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"comic_chapters",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultUpCount holds the default value on creation for the "up_count" field.
	DefaultUpCount uint
	// DefaultDownCount holds the default value on creation for the "down_count" field.
	DefaultDownCount uint
	// DefaultIsLastChapter holds the default value on creation for the "is_last_chapter" field.
	DefaultIsLastChapter bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the ComicChapter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByChapter orders the results by the chapter field.
func ByChapter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChapter, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByVolumn orders the results by the volumn field.
func ByVolumn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVolumn, opts...).ToFunc()
}

// ByLang orders the results by the lang field.
func ByLang(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLang, opts...).ToFunc()
}

// ByUpCount orders the results by the up_count field.
func ByUpCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpCount, opts...).ToFunc()
}

// ByDownCount orders the results by the down_count field.
func ByDownCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownCount, opts...).ToFunc()
}

// ByIsLastChapter orders the results by the is_last_chapter field.
func ByIsLastChapter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLastChapter, opts...).ToFunc()
}

// ByImgsCount orders the results by imgs count.
func ByImgsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImgsStep(), opts...)
	}
}

// ByImgs orders the results by imgs terms.
func ByImgs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImgsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByComicField orders the results by comic field.
func ByComicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newComicStep(), sql.OrderByField(field, opts...))
	}
}
func newImgsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImgsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImgsTable, ImgsColumn),
	)
}
func newComicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ComicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ComicTable, ComicColumn),
	)
}
