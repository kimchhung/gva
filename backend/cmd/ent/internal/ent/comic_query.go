// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gva/app/database/schema/pulid"
	"github.com/gva/internal/ent/comic"
	"github.com/gva/internal/ent/comicchapter"
	"github.com/gva/internal/ent/predicate"

	"github.com/gva/internal/ent/internal"
)

// ComicQuery is the builder for querying Comic entities.
type ComicQuery struct {
	config
	ctx               *QueryContext
	order             []comic.OrderOption
	inters            []Interceptor
	predicates        []predicate.Comic
	withChapters      *ComicChapterQuery
	withLastChapter   *ComicChapterQuery
	withFinalChapter  *ComicChapterQuery
	loadTotal         []func(context.Context, []*Comic) error
	modifiers         []func(*sql.Selector)
	withNamedChapters map[string]*ComicChapterQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ComicQuery builder.
func (cq *ComicQuery) Where(ps ...predicate.Comic) *ComicQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *ComicQuery) Limit(limit int) *ComicQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *ComicQuery) Offset(offset int) *ComicQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *ComicQuery) Unique(unique bool) *ComicQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *ComicQuery) Order(o ...comic.OrderOption) *ComicQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryChapters chains the current query on the "chapters" edge.
func (cq *ComicQuery) QueryChapters() *ComicChapterQuery {
	query := (&ComicChapterClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(comic.Table, comic.FieldID, selector),
			sqlgraph.To(comicchapter.Table, comicchapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, comic.ChaptersTable, comic.ChaptersColumn),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.ComicChapter
		step.Edge.Schema = schemaConfig.ComicChapter
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLastChapter chains the current query on the "last_chapter" edge.
func (cq *ComicQuery) QueryLastChapter() *ComicChapterQuery {
	query := (&ComicChapterClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(comic.Table, comic.FieldID, selector),
			sqlgraph.To(comicchapter.Table, comicchapter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, comic.LastChapterTable, comic.LastChapterColumn),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.ComicChapter
		step.Edge.Schema = schemaConfig.Comic
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFinalChapter chains the current query on the "final_chapter" edge.
func (cq *ComicQuery) QueryFinalChapter() *ComicChapterQuery {
	query := (&ComicChapterClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(comic.Table, comic.FieldID, selector),
			sqlgraph.To(comicchapter.Table, comicchapter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, comic.FinalChapterTable, comic.FinalChapterColumn),
		)
		schemaConfig := cq.schemaConfig
		step.To.Schema = schemaConfig.ComicChapter
		step.Edge.Schema = schemaConfig.Comic
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Comic entity from the query.
// Returns a *NotFoundError when no Comic was found.
func (cq *ComicQuery) First(ctx context.Context) (*Comic, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{comic.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *ComicQuery) FirstX(ctx context.Context) *Comic {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Comic ID from the query.
// Returns a *NotFoundError when no Comic ID was found.
func (cq *ComicQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{comic.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *ComicQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Comic entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Comic entity is found.
// Returns a *NotFoundError when no Comic entities are found.
func (cq *ComicQuery) Only(ctx context.Context) (*Comic, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{comic.Label}
	default:
		return nil, &NotSingularError{comic.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *ComicQuery) OnlyX(ctx context.Context) *Comic {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Comic ID in the query.
// Returns a *NotSingularError when more than one Comic ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *ComicQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{comic.Label}
	default:
		err = &NotSingularError{comic.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *ComicQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Comics.
func (cq *ComicQuery) All(ctx context.Context) ([]*Comic, error) {
	ctx = setContextOp(ctx, cq.ctx, "All")
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Comic, *ComicQuery]()
	return withInterceptors[[]*Comic](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *ComicQuery) AllX(ctx context.Context) []*Comic {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Comic IDs.
func (cq *ComicQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, "IDs")
	if err = cq.Select(comic.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *ComicQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *ComicQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, "Count")
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*ComicQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *ComicQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *ComicQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, "Exist")
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *ComicQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ComicQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *ComicQuery) Clone() *ComicQuery {
	if cq == nil {
		return nil
	}
	return &ComicQuery{
		config:           cq.config,
		ctx:              cq.ctx.Clone(),
		order:            append([]comic.OrderOption{}, cq.order...),
		inters:           append([]Interceptor{}, cq.inters...),
		predicates:       append([]predicate.Comic{}, cq.predicates...),
		withChapters:     cq.withChapters.Clone(),
		withLastChapter:  cq.withLastChapter.Clone(),
		withFinalChapter: cq.withFinalChapter.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithChapters tells the query-builder to eager-load the nodes that are connected to
// the "chapters" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ComicQuery) WithChapters(opts ...func(*ComicChapterQuery)) *ComicQuery {
	query := (&ComicChapterClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withChapters = query
	return cq
}

// WithLastChapter tells the query-builder to eager-load the nodes that are connected to
// the "last_chapter" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ComicQuery) WithLastChapter(opts ...func(*ComicChapterQuery)) *ComicQuery {
	query := (&ComicChapterClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withLastChapter = query
	return cq
}

// WithFinalChapter tells the query-builder to eager-load the nodes that are connected to
// the "final_chapter" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ComicQuery) WithFinalChapter(opts ...func(*ComicChapterQuery)) *ComicQuery {
	query := (&ComicChapterClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withFinalChapter = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty" rql:"filter,sort"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Comic.Query().
//		GroupBy(comic.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *ComicQuery) GroupBy(field string, fields ...string) *ComicGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ComicGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = comic.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty" rql:"filter,sort"`
//	}
//
//	client.Comic.Query().
//		Select(comic.FieldCreatedAt).
//		Scan(ctx, &v)
func (cq *ComicQuery) Select(fields ...string) *ComicSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &ComicSelect{ComicQuery: cq}
	sbuild.label = comic.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ComicSelect configured with the given aggregations.
func (cq *ComicQuery) Aggregate(fns ...AggregateFunc) *ComicSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *ComicQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !comic.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *ComicQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Comic, error) {
	var (
		nodes       = []*Comic{}
		_spec       = cq.querySpec()
		loadedTypes = [3]bool{
			cq.withChapters != nil,
			cq.withLastChapter != nil,
			cq.withFinalChapter != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Comic).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Comic{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = cq.schemaConfig.Comic
	ctx = internal.NewSchemaConfigContext(ctx, cq.schemaConfig)
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withChapters; query != nil {
		if err := cq.loadChapters(ctx, query, nodes,
			func(n *Comic) { n.Edges.Chapters = []*ComicChapter{} },
			func(n *Comic, e *ComicChapter) {
				n.Edges.Chapters = append(n.Edges.Chapters, e)
				if !e.Edges.loadedTypes[1] {
					e.Edges.Comic = n
				}
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withLastChapter; query != nil {
		if err := cq.loadLastChapter(ctx, query, nodes, nil,
			func(n *Comic, e *ComicChapter) { n.Edges.LastChapter = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withFinalChapter; query != nil {
		if err := cq.loadFinalChapter(ctx, query, nodes, nil,
			func(n *Comic, e *ComicChapter) { n.Edges.FinalChapter = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedChapters {
		if err := cq.loadChapters(ctx, query, nodes,
			func(n *Comic) { n.appendNamedChapters(name) },
			func(n *Comic, e *ComicChapter) {
				n.appendNamedChapters(name, e)
				if !e.Edges.loadedTypes[1] {
					e.Edges.Comic = n
				}
			}); err != nil {
			return nil, err
		}
	}
	for i := range cq.loadTotal {
		if err := cq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *ComicQuery) loadChapters(ctx context.Context, query *ComicChapterQuery, nodes []*Comic, init func(*Comic), assign func(*Comic, *ComicChapter)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Comic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ComicChapter(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(comic.ChaptersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.comic_chapters
		if fk == nil {
			return fmt.Errorf(`foreign-key "comic_chapters" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "comic_chapters" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ComicQuery) loadLastChapter(ctx context.Context, query *ComicChapterQuery, nodes []*Comic, init func(*Comic), assign func(*Comic, *ComicChapter)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Comic)
	for i := range nodes {
		if nodes[i].LastChapterID == nil {
			continue
		}
		fk := *nodes[i].LastChapterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(comicchapter.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "last_chapter_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ComicQuery) loadFinalChapter(ctx context.Context, query *ComicChapterQuery, nodes []*Comic, init func(*Comic), assign func(*Comic, *ComicChapter)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Comic)
	for i := range nodes {
		if nodes[i].FinalChapterID == nil {
			continue
		}
		fk := *nodes[i].FinalChapterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(comicchapter.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "final_chapter_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cq *ComicQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	_spec.Node.Schema = cq.schemaConfig.Comic
	ctx = internal.NewSchemaConfigContext(ctx, cq.schemaConfig)
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *ComicQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(comic.Table, comic.Columns, sqlgraph.NewFieldSpec(comic.FieldID, field.TypeString))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comic.FieldID)
		for i := range fields {
			if fields[i] != comic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cq.withLastChapter != nil {
			_spec.Node.AddColumnOnce(comic.FieldLastChapterID)
		}
		if cq.withFinalChapter != nil {
			_spec.Node.AddColumnOnce(comic.FieldFinalChapterID)
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *ComicQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(comic.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = comic.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(cq.schemaConfig.Comic)
	ctx = internal.NewSchemaConfigContext(ctx, cq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range cq.modifiers {
		m(selector)
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (cq *ComicQuery) ForUpdate(opts ...sql.LockOption) *ComicQuery {
	if cq.driver.Dialect() == dialect.Postgres {
		cq.Unique(false)
	}
	cq.modifiers = append(cq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return cq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (cq *ComicQuery) ForShare(opts ...sql.LockOption) *ComicQuery {
	if cq.driver.Dialect() == dialect.Postgres {
		cq.Unique(false)
	}
	cq.modifiers = append(cq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return cq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cq *ComicQuery) Modify(modifiers ...func(s *sql.Selector)) *ComicSelect {
	cq.modifiers = append(cq.modifiers, modifiers...)
	return cq.Select()
}

// WithNamedChapters tells the query-builder to eager-load the nodes that are connected to the "chapters"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ComicQuery) WithNamedChapters(name string, opts ...func(*ComicChapterQuery)) *ComicQuery {
	query := (&ComicChapterClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedChapters == nil {
		cq.withNamedChapters = make(map[string]*ComicChapterQuery)
	}
	cq.withNamedChapters[name] = query
	return cq
}

// ComicGroupBy is the group-by builder for Comic entities.
type ComicGroupBy struct {
	selector
	build *ComicQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *ComicGroupBy) Aggregate(fns ...AggregateFunc) *ComicGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *ComicGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, "GroupBy")
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ComicQuery, *ComicGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *ComicGroupBy) sqlScan(ctx context.Context, root *ComicQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ComicSelect is the builder for selecting fields of Comic entities.
type ComicSelect struct {
	*ComicQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *ComicSelect) Aggregate(fns ...AggregateFunc) *ComicSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *ComicSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, "Select")
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ComicQuery, *ComicSelect](ctx, cs.ComicQuery, cs, cs.inters, v)
}

func (cs *ComicSelect) sqlScan(ctx context.Context, root *ComicQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cs *ComicSelect) Modify(modifiers ...func(s *sql.Selector)) *ComicSelect {
	cs.modifiers = append(cs.modifiers, modifiers...)
	return cs
}
