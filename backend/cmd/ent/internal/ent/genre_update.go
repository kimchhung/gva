// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gva/internal/ent/genre"
	"github.com/gva/internal/ent/predicate"

	"github.com/gva/internal/ent/internal"
)

// GenreUpdate is the builder for updating Genre entities.
type GenreUpdate struct {
	config
	hooks     []Hook
	mutation  *GenreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GenreUpdate builder.
func (gu *GenreUpdate) Where(ps ...predicate.Genre) *GenreUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GenreUpdate) SetCreatedAt(t time.Time) *GenreUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gu *GenreUpdate) SetNillableCreatedAt(t *time.Time) *GenreUpdate {
	if t != nil {
		gu.SetCreatedAt(*t)
	}
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GenreUpdate) SetUpdatedAt(t time.Time) *GenreUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetName sets the "name" field.
func (gu *GenreUpdate) SetName(s string) *GenreUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GenreUpdate) SetNillableName(s *string) *GenreUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetType sets the "type" field.
func (gu *GenreUpdate) SetType(ge genre.Type) *GenreUpdate {
	gu.mutation.SetType(ge)
	return gu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gu *GenreUpdate) SetNillableType(ge *genre.Type) *GenreUpdate {
	if ge != nil {
		gu.SetType(*ge)
	}
	return gu
}

// Mutation returns the GenreMutation object of the builder.
func (gu *GenreUpdate) Mutation() *GenreMutation {
	return gu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GenreUpdate) Save(ctx context.Context) (int, error) {
	gu.defaults()
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GenreUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GenreUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GenreUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GenreUpdate) defaults() {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		v := genre.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GenreUpdate) check() error {
	if v, ok := gu.mutation.GetType(); ok {
		if err := genre.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Genre.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gu *GenreUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GenreUpdate {
	gu.modifiers = append(gu.modifiers, modifiers...)
	return gu
}

func (gu *GenreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(genre.Table, genre.Columns, sqlgraph.NewFieldSpec(genre.FieldID, field.TypeString))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.SetField(genre.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(genre.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(genre.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.GetType(); ok {
		_spec.SetField(genre.FieldType, field.TypeEnum, value)
	}
	_spec.Node.Schema = gu.schemaConfig.Genre
	ctx = internal.NewSchemaConfigContext(ctx, gu.schemaConfig)
	_spec.AddModifiers(gu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{genre.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GenreUpdateOne is the builder for updating a single Genre entity.
type GenreUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GenreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (guo *GenreUpdateOne) SetCreatedAt(t time.Time) *GenreUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guo *GenreUpdateOne) SetNillableCreatedAt(t *time.Time) *GenreUpdateOne {
	if t != nil {
		guo.SetCreatedAt(*t)
	}
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GenreUpdateOne) SetUpdatedAt(t time.Time) *GenreUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetName sets the "name" field.
func (guo *GenreUpdateOne) SetName(s string) *GenreUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GenreUpdateOne) SetNillableName(s *string) *GenreUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetType sets the "type" field.
func (guo *GenreUpdateOne) SetType(ge genre.Type) *GenreUpdateOne {
	guo.mutation.SetType(ge)
	return guo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (guo *GenreUpdateOne) SetNillableType(ge *genre.Type) *GenreUpdateOne {
	if ge != nil {
		guo.SetType(*ge)
	}
	return guo
}

// Mutation returns the GenreMutation object of the builder.
func (guo *GenreUpdateOne) Mutation() *GenreMutation {
	return guo.mutation
}

// Where appends a list predicates to the GenreUpdate builder.
func (guo *GenreUpdateOne) Where(ps ...predicate.Genre) *GenreUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GenreUpdateOne) Select(field string, fields ...string) *GenreUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Genre entity.
func (guo *GenreUpdateOne) Save(ctx context.Context) (*Genre, error) {
	guo.defaults()
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GenreUpdateOne) SaveX(ctx context.Context) *Genre {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GenreUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GenreUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GenreUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		v := genre.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GenreUpdateOne) check() error {
	if v, ok := guo.mutation.GetType(); ok {
		if err := genre.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Genre.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (guo *GenreUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GenreUpdateOne {
	guo.modifiers = append(guo.modifiers, modifiers...)
	return guo
}

func (guo *GenreUpdateOne) sqlSave(ctx context.Context) (_node *Genre, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(genre.Table, genre.Columns, sqlgraph.NewFieldSpec(genre.FieldID, field.TypeString))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Genre.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, genre.FieldID)
		for _, f := range fields {
			if !genre.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != genre.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.SetField(genre.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(genre.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(genre.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.GetType(); ok {
		_spec.SetField(genre.FieldType, field.TypeEnum, value)
	}
	_spec.Node.Schema = guo.schemaConfig.Genre
	ctx = internal.NewSchemaConfigContext(ctx, guo.schemaConfig)
	_spec.AddModifiers(guo.modifiers...)
	_node = &Genre{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{genre.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
