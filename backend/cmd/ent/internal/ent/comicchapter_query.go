// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gva/app/database/schema/pulid"
	"github.com/gva/internal/ent/comic"
	"github.com/gva/internal/ent/comicchapter"
	"github.com/gva/internal/ent/comicimg"
	"github.com/gva/internal/ent/predicate"

	"github.com/gva/internal/ent/internal"
)

// ComicChapterQuery is the builder for querying ComicChapter entities.
type ComicChapterQuery struct {
	config
	ctx           *QueryContext
	order         []comicchapter.OrderOption
	inters        []Interceptor
	predicates    []predicate.ComicChapter
	withImgs      *ComicImgQuery
	withComic     *ComicQuery
	withFKs       bool
	loadTotal     []func(context.Context, []*ComicChapter) error
	modifiers     []func(*sql.Selector)
	withNamedImgs map[string]*ComicImgQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ComicChapterQuery builder.
func (ccq *ComicChapterQuery) Where(ps ...predicate.ComicChapter) *ComicChapterQuery {
	ccq.predicates = append(ccq.predicates, ps...)
	return ccq
}

// Limit the number of records to be returned by this query.
func (ccq *ComicChapterQuery) Limit(limit int) *ComicChapterQuery {
	ccq.ctx.Limit = &limit
	return ccq
}

// Offset to start from.
func (ccq *ComicChapterQuery) Offset(offset int) *ComicChapterQuery {
	ccq.ctx.Offset = &offset
	return ccq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ccq *ComicChapterQuery) Unique(unique bool) *ComicChapterQuery {
	ccq.ctx.Unique = &unique
	return ccq
}

// Order specifies how the records should be ordered.
func (ccq *ComicChapterQuery) Order(o ...comicchapter.OrderOption) *ComicChapterQuery {
	ccq.order = append(ccq.order, o...)
	return ccq
}

// QueryImgs chains the current query on the "imgs" edge.
func (ccq *ComicChapterQuery) QueryImgs() *ComicImgQuery {
	query := (&ComicImgClient{config: ccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(comicchapter.Table, comicchapter.FieldID, selector),
			sqlgraph.To(comicimg.Table, comicimg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, comicchapter.ImgsTable, comicchapter.ImgsColumn),
		)
		schemaConfig := ccq.schemaConfig
		step.To.Schema = schemaConfig.ComicImg
		step.Edge.Schema = schemaConfig.ComicImg
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComic chains the current query on the "comic" edge.
func (ccq *ComicChapterQuery) QueryComic() *ComicQuery {
	query := (&ComicClient{config: ccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(comicchapter.Table, comicchapter.FieldID, selector),
			sqlgraph.To(comic.Table, comic.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comicchapter.ComicTable, comicchapter.ComicColumn),
		)
		schemaConfig := ccq.schemaConfig
		step.To.Schema = schemaConfig.Comic
		step.Edge.Schema = schemaConfig.ComicChapter
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ComicChapter entity from the query.
// Returns a *NotFoundError when no ComicChapter was found.
func (ccq *ComicChapterQuery) First(ctx context.Context) (*ComicChapter, error) {
	nodes, err := ccq.Limit(1).All(setContextOp(ctx, ccq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{comicchapter.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ccq *ComicChapterQuery) FirstX(ctx context.Context) *ComicChapter {
	node, err := ccq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ComicChapter ID from the query.
// Returns a *NotFoundError when no ComicChapter ID was found.
func (ccq *ComicChapterQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = ccq.Limit(1).IDs(setContextOp(ctx, ccq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{comicchapter.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ccq *ComicChapterQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := ccq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ComicChapter entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ComicChapter entity is found.
// Returns a *NotFoundError when no ComicChapter entities are found.
func (ccq *ComicChapterQuery) Only(ctx context.Context) (*ComicChapter, error) {
	nodes, err := ccq.Limit(2).All(setContextOp(ctx, ccq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{comicchapter.Label}
	default:
		return nil, &NotSingularError{comicchapter.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ccq *ComicChapterQuery) OnlyX(ctx context.Context) *ComicChapter {
	node, err := ccq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ComicChapter ID in the query.
// Returns a *NotSingularError when more than one ComicChapter ID is found.
// Returns a *NotFoundError when no entities are found.
func (ccq *ComicChapterQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = ccq.Limit(2).IDs(setContextOp(ctx, ccq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{comicchapter.Label}
	default:
		err = &NotSingularError{comicchapter.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ccq *ComicChapterQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := ccq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ComicChapters.
func (ccq *ComicChapterQuery) All(ctx context.Context) ([]*ComicChapter, error) {
	ctx = setContextOp(ctx, ccq.ctx, "All")
	if err := ccq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ComicChapter, *ComicChapterQuery]()
	return withInterceptors[[]*ComicChapter](ctx, ccq, qr, ccq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ccq *ComicChapterQuery) AllX(ctx context.Context) []*ComicChapter {
	nodes, err := ccq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ComicChapter IDs.
func (ccq *ComicChapterQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if ccq.ctx.Unique == nil && ccq.path != nil {
		ccq.Unique(true)
	}
	ctx = setContextOp(ctx, ccq.ctx, "IDs")
	if err = ccq.Select(comicchapter.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ccq *ComicChapterQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := ccq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ccq *ComicChapterQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ccq.ctx, "Count")
	if err := ccq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ccq, querierCount[*ComicChapterQuery](), ccq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ccq *ComicChapterQuery) CountX(ctx context.Context) int {
	count, err := ccq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ccq *ComicChapterQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ccq.ctx, "Exist")
	switch _, err := ccq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ccq *ComicChapterQuery) ExistX(ctx context.Context) bool {
	exist, err := ccq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ComicChapterQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ccq *ComicChapterQuery) Clone() *ComicChapterQuery {
	if ccq == nil {
		return nil
	}
	return &ComicChapterQuery{
		config:     ccq.config,
		ctx:        ccq.ctx.Clone(),
		order:      append([]comicchapter.OrderOption{}, ccq.order...),
		inters:     append([]Interceptor{}, ccq.inters...),
		predicates: append([]predicate.ComicChapter{}, ccq.predicates...),
		withImgs:   ccq.withImgs.Clone(),
		withComic:  ccq.withComic.Clone(),
		// clone intermediate query.
		sql:  ccq.sql.Clone(),
		path: ccq.path,
	}
}

// WithImgs tells the query-builder to eager-load the nodes that are connected to
// the "imgs" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *ComicChapterQuery) WithImgs(opts ...func(*ComicImgQuery)) *ComicChapterQuery {
	query := (&ComicImgClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccq.withImgs = query
	return ccq
}

// WithComic tells the query-builder to eager-load the nodes that are connected to
// the "comic" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *ComicChapterQuery) WithComic(opts ...func(*ComicQuery)) *ComicChapterQuery {
	query := (&ComicClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccq.withComic = query
	return ccq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty" rql:"filter,sort"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ComicChapter.Query().
//		GroupBy(comicchapter.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ccq *ComicChapterQuery) GroupBy(field string, fields ...string) *ComicChapterGroupBy {
	ccq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ComicChapterGroupBy{build: ccq}
	grbuild.flds = &ccq.ctx.Fields
	grbuild.label = comicchapter.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty" rql:"filter,sort"`
//	}
//
//	client.ComicChapter.Query().
//		Select(comicchapter.FieldCreatedAt).
//		Scan(ctx, &v)
func (ccq *ComicChapterQuery) Select(fields ...string) *ComicChapterSelect {
	ccq.ctx.Fields = append(ccq.ctx.Fields, fields...)
	sbuild := &ComicChapterSelect{ComicChapterQuery: ccq}
	sbuild.label = comicchapter.Label
	sbuild.flds, sbuild.scan = &ccq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ComicChapterSelect configured with the given aggregations.
func (ccq *ComicChapterQuery) Aggregate(fns ...AggregateFunc) *ComicChapterSelect {
	return ccq.Select().Aggregate(fns...)
}

func (ccq *ComicChapterQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ccq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ccq); err != nil {
				return err
			}
		}
	}
	for _, f := range ccq.ctx.Fields {
		if !comicchapter.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ccq.path != nil {
		prev, err := ccq.path(ctx)
		if err != nil {
			return err
		}
		ccq.sql = prev
	}
	return nil
}

func (ccq *ComicChapterQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ComicChapter, error) {
	var (
		nodes       = []*ComicChapter{}
		withFKs     = ccq.withFKs
		_spec       = ccq.querySpec()
		loadedTypes = [2]bool{
			ccq.withImgs != nil,
			ccq.withComic != nil,
		}
	)
	if ccq.withComic != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, comicchapter.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ComicChapter).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ComicChapter{config: ccq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = ccq.schemaConfig.ComicChapter
	ctx = internal.NewSchemaConfigContext(ctx, ccq.schemaConfig)
	if len(ccq.modifiers) > 0 {
		_spec.Modifiers = ccq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ccq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ccq.withImgs; query != nil {
		if err := ccq.loadImgs(ctx, query, nodes,
			func(n *ComicChapter) { n.Edges.Imgs = []*ComicImg{} },
			func(n *ComicChapter, e *ComicImg) {
				n.Edges.Imgs = append(n.Edges.Imgs, e)
				if !e.Edges.loadedTypes[0] {
					e.Edges.Chapter = n
				}
			}); err != nil {
			return nil, err
		}
	}
	if query := ccq.withComic; query != nil {
		if err := ccq.loadComic(ctx, query, nodes, nil,
			func(n *ComicChapter, e *Comic) { n.Edges.Comic = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range ccq.withNamedImgs {
		if err := ccq.loadImgs(ctx, query, nodes,
			func(n *ComicChapter) { n.appendNamedImgs(name) },
			func(n *ComicChapter, e *ComicImg) {
				n.appendNamedImgs(name, e)
				if !e.Edges.loadedTypes[0] {
					e.Edges.Chapter = n
				}
			}); err != nil {
			return nil, err
		}
	}
	for i := range ccq.loadTotal {
		if err := ccq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ccq *ComicChapterQuery) loadImgs(ctx context.Context, query *ComicImgQuery, nodes []*ComicChapter, init func(*ComicChapter), assign func(*ComicChapter, *ComicImg)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ComicChapter)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ComicImg(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(comicchapter.ImgsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.comic_chapter_imgs
		if fk == nil {
			return fmt.Errorf(`foreign-key "comic_chapter_imgs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "comic_chapter_imgs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ccq *ComicChapterQuery) loadComic(ctx context.Context, query *ComicQuery, nodes []*ComicChapter, init func(*ComicChapter), assign func(*ComicChapter, *Comic)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ComicChapter)
	for i := range nodes {
		if nodes[i].comic_chapters == nil {
			continue
		}
		fk := *nodes[i].comic_chapters
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(comic.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "comic_chapters" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ccq *ComicChapterQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ccq.querySpec()
	_spec.Node.Schema = ccq.schemaConfig.ComicChapter
	ctx = internal.NewSchemaConfigContext(ctx, ccq.schemaConfig)
	if len(ccq.modifiers) > 0 {
		_spec.Modifiers = ccq.modifiers
	}
	_spec.Node.Columns = ccq.ctx.Fields
	if len(ccq.ctx.Fields) > 0 {
		_spec.Unique = ccq.ctx.Unique != nil && *ccq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ccq.driver, _spec)
}

func (ccq *ComicChapterQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(comicchapter.Table, comicchapter.Columns, sqlgraph.NewFieldSpec(comicchapter.FieldID, field.TypeString))
	_spec.From = ccq.sql
	if unique := ccq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ccq.path != nil {
		_spec.Unique = true
	}
	if fields := ccq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comicchapter.FieldID)
		for i := range fields {
			if fields[i] != comicchapter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ccq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ccq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ccq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ccq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ccq *ComicChapterQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ccq.driver.Dialect())
	t1 := builder.Table(comicchapter.Table)
	columns := ccq.ctx.Fields
	if len(columns) == 0 {
		columns = comicchapter.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ccq.sql != nil {
		selector = ccq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ccq.ctx.Unique != nil && *ccq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(ccq.schemaConfig.ComicChapter)
	ctx = internal.NewSchemaConfigContext(ctx, ccq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range ccq.modifiers {
		m(selector)
	}
	for _, p := range ccq.predicates {
		p(selector)
	}
	for _, p := range ccq.order {
		p(selector)
	}
	if offset := ccq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ccq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (ccq *ComicChapterQuery) ForUpdate(opts ...sql.LockOption) *ComicChapterQuery {
	if ccq.driver.Dialect() == dialect.Postgres {
		ccq.Unique(false)
	}
	ccq.modifiers = append(ccq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return ccq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (ccq *ComicChapterQuery) ForShare(opts ...sql.LockOption) *ComicChapterQuery {
	if ccq.driver.Dialect() == dialect.Postgres {
		ccq.Unique(false)
	}
	ccq.modifiers = append(ccq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return ccq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ccq *ComicChapterQuery) Modify(modifiers ...func(s *sql.Selector)) *ComicChapterSelect {
	ccq.modifiers = append(ccq.modifiers, modifiers...)
	return ccq.Select()
}

// WithNamedImgs tells the query-builder to eager-load the nodes that are connected to the "imgs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ccq *ComicChapterQuery) WithNamedImgs(name string, opts ...func(*ComicImgQuery)) *ComicChapterQuery {
	query := (&ComicImgClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ccq.withNamedImgs == nil {
		ccq.withNamedImgs = make(map[string]*ComicImgQuery)
	}
	ccq.withNamedImgs[name] = query
	return ccq
}

// ComicChapterGroupBy is the group-by builder for ComicChapter entities.
type ComicChapterGroupBy struct {
	selector
	build *ComicChapterQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ccgb *ComicChapterGroupBy) Aggregate(fns ...AggregateFunc) *ComicChapterGroupBy {
	ccgb.fns = append(ccgb.fns, fns...)
	return ccgb
}

// Scan applies the selector query and scans the result into the given value.
func (ccgb *ComicChapterGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccgb.build.ctx, "GroupBy")
	if err := ccgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ComicChapterQuery, *ComicChapterGroupBy](ctx, ccgb.build, ccgb, ccgb.build.inters, v)
}

func (ccgb *ComicChapterGroupBy) sqlScan(ctx context.Context, root *ComicChapterQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ccgb.fns))
	for _, fn := range ccgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ccgb.flds)+len(ccgb.fns))
		for _, f := range *ccgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ccgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ComicChapterSelect is the builder for selecting fields of ComicChapter entities.
type ComicChapterSelect struct {
	*ComicChapterQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ccs *ComicChapterSelect) Aggregate(fns ...AggregateFunc) *ComicChapterSelect {
	ccs.fns = append(ccs.fns, fns...)
	return ccs
}

// Scan applies the selector query and scans the result into the given value.
func (ccs *ComicChapterSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccs.ctx, "Select")
	if err := ccs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ComicChapterQuery, *ComicChapterSelect](ctx, ccs.ComicChapterQuery, ccs, ccs.inters, v)
}

func (ccs *ComicChapterSelect) sqlScan(ctx context.Context, root *ComicChapterQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ccs.fns))
	for _, fn := range ccs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ccs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ccs *ComicChapterSelect) Modify(modifiers ...func(s *sql.Selector)) *ComicChapterSelect {
	ccs.modifiers = append(ccs.modifiers, modifiers...)
	return ccs
}
