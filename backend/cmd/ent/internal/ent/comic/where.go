// Code generated by ent, DO NOT EDIT.

package comic

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gva/internal/ent/predicate"

	"github.com/gva/internal/ent/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Comic {
	return predicate.Comic(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Comic {
	return predicate.Comic(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Comic {
	return predicate.Comic(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Comic {
	return predicate.Comic(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Comic {
	return predicate.Comic(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Comic {
	return predicate.Comic(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Comic {
	return predicate.Comic(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Comic {
	return predicate.Comic(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Comic {
	return predicate.Comic(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldUpdatedAt, v))
}

// Chapter applies equality check predicate on the "chapter" field. It's identical to ChapterEQ.
func Chapter(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldChapter, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldTitle, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldSlug, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldStatus, v))
}

// IsTranslateCompleted applies equality check predicate on the "isTranslateCompleted" field. It's identical to IsTranslateCompletedEQ.
func IsTranslateCompleted(v bool) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldIsTranslateCompleted, v))
}

// UpCount applies equality check predicate on the "up_count" field. It's identical to UpCountEQ.
func UpCount(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldUpCount, v))
}

// FinalChapterID applies equality check predicate on the "final_chapter_id" field. It's identical to FinalChapterIDEQ.
func FinalChapterID(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldFinalChapterID, v))
}

// LastChapterID applies equality check predicate on the "last_chapter_id" field. It's identical to LastChapterIDEQ.
func LastChapterID(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldLastChapterID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Comic {
	return predicate.Comic(sql.FieldLTE(FieldUpdatedAt, v))
}

// ChapterEQ applies the EQ predicate on the "chapter" field.
func ChapterEQ(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldChapter, v))
}

// ChapterNEQ applies the NEQ predicate on the "chapter" field.
func ChapterNEQ(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldNEQ(FieldChapter, v))
}

// ChapterIn applies the In predicate on the "chapter" field.
func ChapterIn(vs ...uint) predicate.Comic {
	return predicate.Comic(sql.FieldIn(FieldChapter, vs...))
}

// ChapterNotIn applies the NotIn predicate on the "chapter" field.
func ChapterNotIn(vs ...uint) predicate.Comic {
	return predicate.Comic(sql.FieldNotIn(FieldChapter, vs...))
}

// ChapterGT applies the GT predicate on the "chapter" field.
func ChapterGT(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldGT(FieldChapter, v))
}

// ChapterGTE applies the GTE predicate on the "chapter" field.
func ChapterGTE(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldGTE(FieldChapter, v))
}

// ChapterLT applies the LT predicate on the "chapter" field.
func ChapterLT(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldLT(FieldChapter, v))
}

// ChapterLTE applies the LTE predicate on the "chapter" field.
func ChapterLTE(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldLTE(FieldChapter, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Comic {
	return predicate.Comic(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Comic {
	return predicate.Comic(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Comic {
	return predicate.Comic(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Comic {
	return predicate.Comic(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Comic {
	return predicate.Comic(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Comic {
	return predicate.Comic(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Comic {
	return predicate.Comic(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Comic {
	return predicate.Comic(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Comic {
	return predicate.Comic(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Comic {
	return predicate.Comic(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Comic {
	return predicate.Comic(sql.FieldContainsFold(FieldTitle, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Comic {
	return predicate.Comic(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Comic {
	return predicate.Comic(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Comic {
	return predicate.Comic(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Comic {
	return predicate.Comic(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Comic {
	return predicate.Comic(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Comic {
	return predicate.Comic(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Comic {
	return predicate.Comic(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Comic {
	return predicate.Comic(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Comic {
	return predicate.Comic(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Comic {
	return predicate.Comic(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Comic {
	return predicate.Comic(sql.FieldContainsFold(FieldSlug, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Comic {
	return predicate.Comic(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Comic {
	return predicate.Comic(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Comic {
	return predicate.Comic(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Comic {
	return predicate.Comic(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Comic {
	return predicate.Comic(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Comic {
	return predicate.Comic(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Comic {
	return predicate.Comic(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Comic {
	return predicate.Comic(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Comic {
	return predicate.Comic(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Comic {
	return predicate.Comic(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Comic {
	return predicate.Comic(sql.FieldContainsFold(FieldStatus, v))
}

// IsTranslateCompletedEQ applies the EQ predicate on the "isTranslateCompleted" field.
func IsTranslateCompletedEQ(v bool) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldIsTranslateCompleted, v))
}

// IsTranslateCompletedNEQ applies the NEQ predicate on the "isTranslateCompleted" field.
func IsTranslateCompletedNEQ(v bool) predicate.Comic {
	return predicate.Comic(sql.FieldNEQ(FieldIsTranslateCompleted, v))
}

// UpCountEQ applies the EQ predicate on the "up_count" field.
func UpCountEQ(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldUpCount, v))
}

// UpCountNEQ applies the NEQ predicate on the "up_count" field.
func UpCountNEQ(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldNEQ(FieldUpCount, v))
}

// UpCountIn applies the In predicate on the "up_count" field.
func UpCountIn(vs ...uint) predicate.Comic {
	return predicate.Comic(sql.FieldIn(FieldUpCount, vs...))
}

// UpCountNotIn applies the NotIn predicate on the "up_count" field.
func UpCountNotIn(vs ...uint) predicate.Comic {
	return predicate.Comic(sql.FieldNotIn(FieldUpCount, vs...))
}

// UpCountGT applies the GT predicate on the "up_count" field.
func UpCountGT(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldGT(FieldUpCount, v))
}

// UpCountGTE applies the GTE predicate on the "up_count" field.
func UpCountGTE(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldGTE(FieldUpCount, v))
}

// UpCountLT applies the LT predicate on the "up_count" field.
func UpCountLT(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldLT(FieldUpCount, v))
}

// UpCountLTE applies the LTE predicate on the "up_count" field.
func UpCountLTE(v uint) predicate.Comic {
	return predicate.Comic(sql.FieldLTE(FieldUpCount, v))
}

// FinalChapterIDEQ applies the EQ predicate on the "final_chapter_id" field.
func FinalChapterIDEQ(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldFinalChapterID, v))
}

// FinalChapterIDNEQ applies the NEQ predicate on the "final_chapter_id" field.
func FinalChapterIDNEQ(v string) predicate.Comic {
	return predicate.Comic(sql.FieldNEQ(FieldFinalChapterID, v))
}

// FinalChapterIDIn applies the In predicate on the "final_chapter_id" field.
func FinalChapterIDIn(vs ...string) predicate.Comic {
	return predicate.Comic(sql.FieldIn(FieldFinalChapterID, vs...))
}

// FinalChapterIDNotIn applies the NotIn predicate on the "final_chapter_id" field.
func FinalChapterIDNotIn(vs ...string) predicate.Comic {
	return predicate.Comic(sql.FieldNotIn(FieldFinalChapterID, vs...))
}

// FinalChapterIDGT applies the GT predicate on the "final_chapter_id" field.
func FinalChapterIDGT(v string) predicate.Comic {
	return predicate.Comic(sql.FieldGT(FieldFinalChapterID, v))
}

// FinalChapterIDGTE applies the GTE predicate on the "final_chapter_id" field.
func FinalChapterIDGTE(v string) predicate.Comic {
	return predicate.Comic(sql.FieldGTE(FieldFinalChapterID, v))
}

// FinalChapterIDLT applies the LT predicate on the "final_chapter_id" field.
func FinalChapterIDLT(v string) predicate.Comic {
	return predicate.Comic(sql.FieldLT(FieldFinalChapterID, v))
}

// FinalChapterIDLTE applies the LTE predicate on the "final_chapter_id" field.
func FinalChapterIDLTE(v string) predicate.Comic {
	return predicate.Comic(sql.FieldLTE(FieldFinalChapterID, v))
}

// FinalChapterIDContains applies the Contains predicate on the "final_chapter_id" field.
func FinalChapterIDContains(v string) predicate.Comic {
	return predicate.Comic(sql.FieldContains(FieldFinalChapterID, v))
}

// FinalChapterIDHasPrefix applies the HasPrefix predicate on the "final_chapter_id" field.
func FinalChapterIDHasPrefix(v string) predicate.Comic {
	return predicate.Comic(sql.FieldHasPrefix(FieldFinalChapterID, v))
}

// FinalChapterIDHasSuffix applies the HasSuffix predicate on the "final_chapter_id" field.
func FinalChapterIDHasSuffix(v string) predicate.Comic {
	return predicate.Comic(sql.FieldHasSuffix(FieldFinalChapterID, v))
}

// FinalChapterIDIsNil applies the IsNil predicate on the "final_chapter_id" field.
func FinalChapterIDIsNil() predicate.Comic {
	return predicate.Comic(sql.FieldIsNull(FieldFinalChapterID))
}

// FinalChapterIDNotNil applies the NotNil predicate on the "final_chapter_id" field.
func FinalChapterIDNotNil() predicate.Comic {
	return predicate.Comic(sql.FieldNotNull(FieldFinalChapterID))
}

// FinalChapterIDEqualFold applies the EqualFold predicate on the "final_chapter_id" field.
func FinalChapterIDEqualFold(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEqualFold(FieldFinalChapterID, v))
}

// FinalChapterIDContainsFold applies the ContainsFold predicate on the "final_chapter_id" field.
func FinalChapterIDContainsFold(v string) predicate.Comic {
	return predicate.Comic(sql.FieldContainsFold(FieldFinalChapterID, v))
}

// LastChapterIDEQ applies the EQ predicate on the "last_chapter_id" field.
func LastChapterIDEQ(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEQ(FieldLastChapterID, v))
}

// LastChapterIDNEQ applies the NEQ predicate on the "last_chapter_id" field.
func LastChapterIDNEQ(v string) predicate.Comic {
	return predicate.Comic(sql.FieldNEQ(FieldLastChapterID, v))
}

// LastChapterIDIn applies the In predicate on the "last_chapter_id" field.
func LastChapterIDIn(vs ...string) predicate.Comic {
	return predicate.Comic(sql.FieldIn(FieldLastChapterID, vs...))
}

// LastChapterIDNotIn applies the NotIn predicate on the "last_chapter_id" field.
func LastChapterIDNotIn(vs ...string) predicate.Comic {
	return predicate.Comic(sql.FieldNotIn(FieldLastChapterID, vs...))
}

// LastChapterIDGT applies the GT predicate on the "last_chapter_id" field.
func LastChapterIDGT(v string) predicate.Comic {
	return predicate.Comic(sql.FieldGT(FieldLastChapterID, v))
}

// LastChapterIDGTE applies the GTE predicate on the "last_chapter_id" field.
func LastChapterIDGTE(v string) predicate.Comic {
	return predicate.Comic(sql.FieldGTE(FieldLastChapterID, v))
}

// LastChapterIDLT applies the LT predicate on the "last_chapter_id" field.
func LastChapterIDLT(v string) predicate.Comic {
	return predicate.Comic(sql.FieldLT(FieldLastChapterID, v))
}

// LastChapterIDLTE applies the LTE predicate on the "last_chapter_id" field.
func LastChapterIDLTE(v string) predicate.Comic {
	return predicate.Comic(sql.FieldLTE(FieldLastChapterID, v))
}

// LastChapterIDContains applies the Contains predicate on the "last_chapter_id" field.
func LastChapterIDContains(v string) predicate.Comic {
	return predicate.Comic(sql.FieldContains(FieldLastChapterID, v))
}

// LastChapterIDHasPrefix applies the HasPrefix predicate on the "last_chapter_id" field.
func LastChapterIDHasPrefix(v string) predicate.Comic {
	return predicate.Comic(sql.FieldHasPrefix(FieldLastChapterID, v))
}

// LastChapterIDHasSuffix applies the HasSuffix predicate on the "last_chapter_id" field.
func LastChapterIDHasSuffix(v string) predicate.Comic {
	return predicate.Comic(sql.FieldHasSuffix(FieldLastChapterID, v))
}

// LastChapterIDIsNil applies the IsNil predicate on the "last_chapter_id" field.
func LastChapterIDIsNil() predicate.Comic {
	return predicate.Comic(sql.FieldIsNull(FieldLastChapterID))
}

// LastChapterIDNotNil applies the NotNil predicate on the "last_chapter_id" field.
func LastChapterIDNotNil() predicate.Comic {
	return predicate.Comic(sql.FieldNotNull(FieldLastChapterID))
}

// LastChapterIDEqualFold applies the EqualFold predicate on the "last_chapter_id" field.
func LastChapterIDEqualFold(v string) predicate.Comic {
	return predicate.Comic(sql.FieldEqualFold(FieldLastChapterID, v))
}

// LastChapterIDContainsFold applies the ContainsFold predicate on the "last_chapter_id" field.
func LastChapterIDContainsFold(v string) predicate.Comic {
	return predicate.Comic(sql.FieldContainsFold(FieldLastChapterID, v))
}

// HasChapters applies the HasEdge predicate on the "chapters" edge.
func HasChapters() predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ComicChapter
		step.Edge.Schema = schemaConfig.ComicChapter
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChaptersWith applies the HasEdge predicate on the "chapters" edge with a given conditions (other predicates).
func HasChaptersWith(preds ...predicate.ComicChapter) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := newChaptersStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ComicChapter
		step.Edge.Schema = schemaConfig.ComicChapter
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLastChapter applies the HasEdge predicate on the "last_chapter" edge.
func HasLastChapter() predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LastChapterTable, LastChapterColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ComicChapter
		step.Edge.Schema = schemaConfig.Comic
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLastChapterWith applies the HasEdge predicate on the "last_chapter" edge with a given conditions (other predicates).
func HasLastChapterWith(preds ...predicate.ComicChapter) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := newLastChapterStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ComicChapter
		step.Edge.Schema = schemaConfig.Comic
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFinalChapter applies the HasEdge predicate on the "final_chapter" edge.
func HasFinalChapter() predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FinalChapterTable, FinalChapterColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ComicChapter
		step.Edge.Schema = schemaConfig.Comic
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFinalChapterWith applies the HasEdge predicate on the "final_chapter" edge with a given conditions (other predicates).
func HasFinalChapterWith(preds ...predicate.ComicChapter) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := newFinalChapterStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ComicChapter
		step.Edge.Schema = schemaConfig.Comic
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Comic) predicate.Comic {
	return predicate.Comic(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Comic) predicate.Comic {
	return predicate.Comic(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Comic) predicate.Comic {
	return predicate.Comic(sql.NotPredicates(p))
}
