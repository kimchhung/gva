// Code generated by ent, DO NOT EDIT.

package comic

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gva/app/database/schema/pulid"
)

const (
	// Label holds the string label denoting the comic type in the database.
	Label = "comic"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldChapter holds the string denoting the chapter field in the database.
	FieldChapter = "chapter"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldCovers holds the string denoting the covers field in the database.
	FieldCovers = "covers"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIsTranslateCompleted holds the string denoting the istranslatecompleted field in the database.
	FieldIsTranslateCompleted = "is_translate_completed"
	// FieldUpCount holds the string denoting the up_count field in the database.
	FieldUpCount = "up_count"
	// FieldFinalChapterID holds the string denoting the final_chapter_id field in the database.
	FieldFinalChapterID = "final_chapter_id"
	// FieldLastChapterID holds the string denoting the last_chapter_id field in the database.
	FieldLastChapterID = "last_chapter_id"
	// EdgeChapters holds the string denoting the chapters edge name in mutations.
	EdgeChapters = "chapters"
	// EdgeLastChapter holds the string denoting the last_chapter edge name in mutations.
	EdgeLastChapter = "last_chapter"
	// EdgeFinalChapter holds the string denoting the final_chapter edge name in mutations.
	EdgeFinalChapter = "final_chapter"
	// Table holds the table name of the comic in the database.
	Table = "comics"
	// ChaptersTable is the table that holds the chapters relation/edge.
	ChaptersTable = "comic_chapters"
	// ChaptersInverseTable is the table name for the ComicChapter entity.
	// It exists in this package in order to avoid circular dependency with the "comicchapter" package.
	ChaptersInverseTable = "comic_chapters"
	// ChaptersColumn is the table column denoting the chapters relation/edge.
	ChaptersColumn = "comic_chapters"
	// LastChapterTable is the table that holds the last_chapter relation/edge.
	LastChapterTable = "comics"
	// LastChapterInverseTable is the table name for the ComicChapter entity.
	// It exists in this package in order to avoid circular dependency with the "comicchapter" package.
	LastChapterInverseTable = "comic_chapters"
	// LastChapterColumn is the table column denoting the last_chapter relation/edge.
	LastChapterColumn = "last_chapter_id"
	// FinalChapterTable is the table that holds the final_chapter relation/edge.
	FinalChapterTable = "comics"
	// FinalChapterInverseTable is the table name for the ComicChapter entity.
	// It exists in this package in order to avoid circular dependency with the "comicchapter" package.
	FinalChapterInverseTable = "comic_chapters"
	// FinalChapterColumn is the table column denoting the final_chapter relation/edge.
	FinalChapterColumn = "final_chapter_id"
)

// Columns holds all SQL columns for comic fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldChapter,
	FieldTitle,
	FieldSlug,
	FieldCovers,
	FieldStatus,
	FieldIsTranslateCompleted,
	FieldUpCount,
	FieldFinalChapterID,
	FieldLastChapterID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsTranslateCompleted holds the default value on creation for the "isTranslateCompleted" field.
	DefaultIsTranslateCompleted bool
	// DefaultUpCount holds the default value on creation for the "up_count" field.
	DefaultUpCount uint
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the Comic queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByChapter orders the results by the chapter field.
func ByChapter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChapter, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIsTranslateCompleted orders the results by the isTranslateCompleted field.
func ByIsTranslateCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTranslateCompleted, opts...).ToFunc()
}

// ByUpCount orders the results by the up_count field.
func ByUpCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpCount, opts...).ToFunc()
}

// ByFinalChapterID orders the results by the final_chapter_id field.
func ByFinalChapterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalChapterID, opts...).ToFunc()
}

// ByLastChapterID orders the results by the last_chapter_id field.
func ByLastChapterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastChapterID, opts...).ToFunc()
}

// ByChaptersCount orders the results by chapters count.
func ByChaptersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChaptersStep(), opts...)
	}
}

// ByChapters orders the results by chapters terms.
func ByChapters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChaptersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLastChapterField orders the results by last_chapter field.
func ByLastChapterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLastChapterStep(), sql.OrderByField(field, opts...))
	}
}

// ByFinalChapterField orders the results by final_chapter field.
func ByFinalChapterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFinalChapterStep(), sql.OrderByField(field, opts...))
	}
}
func newChaptersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChaptersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
	)
}
func newLastChapterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LastChapterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LastChapterTable, LastChapterColumn),
	)
}
func newFinalChapterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FinalChapterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FinalChapterTable, FinalChapterColumn),
	)
}
