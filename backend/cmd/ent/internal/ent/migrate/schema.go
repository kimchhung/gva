// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AdminsColumns holds the columns for the "admins" table.
	AdminsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "is_enable", Type: field.TypeBool, Default: true},
		{Name: "deleted_at", Type: field.TypeInt, Default: "0"},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "whitelist_ips", Type: field.TypeJSON},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
	}
	// AdminsTable holds the schema information for the "admins" table.
	AdminsTable = &schema.Table{
		Name:       "admins",
		Columns:    AdminsColumns,
		PrimaryKey: []*schema.Column{AdminsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "admin_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{AdminsColumns[4]},
			},
			{
				Name:    "admin_username_deleted_at",
				Unique:  true,
				Columns: []*schema.Column{AdminsColumns[5], AdminsColumns[4]},
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "group", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "key", Type: field.TypeString},
		{Name: "order", Type: field.TypeInt},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "is_enable", Type: field.TypeBool, Default: true},
		{Name: "deleted_at", Type: field.TypeInt, Default: "0"},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "order", Type: field.TypeInt},
		{Name: "is_changeable", Type: field.TypeBool},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "role_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[4]},
			},
		},
	}
	// RoutesColumns holds the columns for the "routes" table.
	RoutesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "is_enable", Type: field.TypeBool, Default: true},
		{Name: "deleted_at", Type: field.TypeInt, Default: "0"},
		{Name: "path", Type: field.TypeString},
		{Name: "component", Type: field.TypeString},
		{Name: "redirect", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "order", Type: field.TypeInt, Nullable: true, Default: 0},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"cata_log", "menu", "button", "external_link"}, Default: "cata_log"},
		{Name: "meta", Type: field.TypeJSON},
		{Name: "parent_id", Type: field.TypeString, Nullable: true},
	}
	// RoutesTable holds the schema information for the "routes" table.
	RoutesTable = &schema.Table{
		Name:       "routes",
		Columns:    RoutesColumns,
		PrimaryKey: []*schema.Column{RoutesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "routes_routes_children",
				Columns:    []*schema.Column{RoutesColumns[12]},
				RefColumns: []*schema.Column{RoutesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "route_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{RoutesColumns[4]},
			},
			{
				Name:    "route_path_parent_id_type_deleted_at",
				Unique:  true,
				Columns: []*schema.Column{RoutesColumns[5], RoutesColumns[12], RoutesColumns[10], RoutesColumns[4]},
				Annotation: &entsql.IndexAnnotation{
					Where: "parent_id is null",
				},
			},
		},
	}
	// AdminRolesColumns holds the columns for the "admin_roles" table.
	AdminRolesColumns = []*schema.Column{
		{Name: "admin_id", Type: field.TypeString},
		{Name: "role_id", Type: field.TypeString},
	}
	// AdminRolesTable holds the schema information for the "admin_roles" table.
	AdminRolesTable = &schema.Table{
		Name:       "admin_roles",
		Columns:    AdminRolesColumns,
		PrimaryKey: []*schema.Column{AdminRolesColumns[0], AdminRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "admin_roles_admin_id",
				Columns:    []*schema.Column{AdminRolesColumns[0]},
				RefColumns: []*schema.Column{AdminsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "admin_roles_role_id",
				Columns:    []*schema.Column{AdminRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RolePermissionsColumns holds the columns for the "role_permissions" table.
	RolePermissionsColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeString},
		{Name: "permission_id", Type: field.TypeString},
	}
	// RolePermissionsTable holds the schema information for the "role_permissions" table.
	RolePermissionsTable = &schema.Table{
		Name:       "role_permissions",
		Columns:    RolePermissionsColumns,
		PrimaryKey: []*schema.Column{RolePermissionsColumns[0], RolePermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_permissions_role_id",
				Columns:    []*schema.Column{RolePermissionsColumns[0]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "role_permissions_permission_id",
				Columns:    []*schema.Column{RolePermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoleRoutesColumns holds the columns for the "role_routes" table.
	RoleRoutesColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeString},
		{Name: "route_id", Type: field.TypeString},
	}
	// RoleRoutesTable holds the schema information for the "role_routes" table.
	RoleRoutesTable = &schema.Table{
		Name:       "role_routes",
		Columns:    RoleRoutesColumns,
		PrimaryKey: []*schema.Column{RoleRoutesColumns[0], RoleRoutesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_routes_role_id",
				Columns:    []*schema.Column{RoleRoutesColumns[0]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "role_routes_route_id",
				Columns:    []*schema.Column{RoleRoutesColumns[1]},
				RefColumns: []*schema.Column{RoutesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AdminsTable,
		PermissionsTable,
		RolesTable,
		RoutesTable,
		AdminRolesTable,
		RolePermissionsTable,
		RoleRoutesTable,
	}
)

func init() {
	RoutesTable.ForeignKeys[0].RefTable = RoutesTable
	AdminRolesTable.ForeignKeys[0].RefTable = AdminsTable
	AdminRolesTable.ForeignKeys[1].RefTable = RolesTable
	RolePermissionsTable.ForeignKeys[0].RefTable = RolesTable
	RolePermissionsTable.ForeignKeys[1].RefTable = PermissionsTable
	RoleRoutesTable.ForeignKeys[0].RefTable = RolesTable
	RoleRoutesTable.ForeignKeys[1].RefTable = RoutesTable
}
