// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gva/app/database/schema/pulid"
	"github.com/gva/app/database/schema/types"
	"github.com/gva/internal/ent/route"
)

// Route is the model entity for the Route schema.
type Route struct {
	config `json:"-" rql:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id" rql:"filter,sort"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty" rql:"filter,sort"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// IsEnable holds the value of the "is_enable" field.
	IsEnable bool `json:"isEnable"  rql:"filter,sort"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt int `json:"-"`
	// ParentID holds the value of the "parent_id" field.
	ParentID *pulid.ID `json:"parentId,omitempty" rql:"filter,sort"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty" rql:"filter,sort"`
	// Component holds the value of the "component" field.
	Component string `json:"component,omitempty" rql:"filter,sort"`
	// Redirect holds the value of the "redirect" field.
	Redirect *string `json:"redirect,omitempty" rql:"filter,sort"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" rql:"filter,sort"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty" rql:"filter,sort"`
	// Type holds the value of the "type" field.
	Type route.Type `json:"type,omitempty" rql:"filter,sort"`
	// Meta holds the value of the "meta" field.
	Meta types.RouteMeta `json:"meta,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RouteQuery when eager-loading is set.
	Edges        RouteEdges `json:"edges" rql:"-"`
	selectValues sql.SelectValues
}

// RouteEdges holds the relations/edges for other nodes in the graph.
type RouteEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Route `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Route `json:"children,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedChildren map[string][]*Route
	namedRoles    map[string][]*Role
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RouteEdges) ParentOrErr() (*Route, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: route.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e RouteEdges) ChildrenOrErr() ([]*Route, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e RouteEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[2] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Route) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case route.FieldParentID:
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case route.FieldMeta:
			values[i] = new([]byte)
		case route.FieldID:
			values[i] = new(pulid.ID)
		case route.FieldIsEnable:
			values[i] = new(sql.NullBool)
		case route.FieldDeletedAt, route.FieldOrder:
			values[i] = new(sql.NullInt64)
		case route.FieldPath, route.FieldComponent, route.FieldRedirect, route.FieldName, route.FieldType:
			values[i] = new(sql.NullString)
		case route.FieldCreatedAt, route.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Route fields.
func (r *Route) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case route.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case route.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case route.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case route.FieldIsEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enable", values[i])
			} else if value.Valid {
				r.IsEnable = value.Bool
			}
		case route.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = int(value.Int64)
			}
		case route.FieldParentID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				r.ParentID = new(pulid.ID)
				*r.ParentID = *value.S.(*pulid.ID)
			}
		case route.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				r.Path = value.String
			}
		case route.FieldComponent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field component", values[i])
			} else if value.Valid {
				r.Component = value.String
			}
		case route.FieldRedirect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect", values[i])
			} else if value.Valid {
				r.Redirect = new(string)
				*r.Redirect = value.String
			}
		case route.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case route.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				r.Order = int(value.Int64)
			}
		case route.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = route.Type(value.String)
			}
		case route.FieldMeta:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Route.
// This includes values selected through modifiers, order, etc.
func (r *Route) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Route entity.
func (r *Route) QueryParent() *RouteQuery {
	return NewRouteClient(r.config).QueryParent(r)
}

// QueryChildren queries the "children" edge of the Route entity.
func (r *Route) QueryChildren() *RouteQuery {
	return NewRouteClient(r.config).QueryChildren(r)
}

// QueryRoles queries the "roles" edge of the Route entity.
func (r *Route) QueryRoles() *RoleQuery {
	return NewRouteClient(r.config).QueryRoles(r)
}

// Update returns a builder for updating this Route.
// Note that you need to call Route.Unwrap() before calling this method if this Route
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Route) Update() *RouteUpdateOne {
	return NewRouteClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Route entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Route) Unwrap() *Route {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Route is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Route) String() string {
	var builder strings.Builder
	builder.WriteString("Route(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_enable=")
	builder.WriteString(fmt.Sprintf("%v", r.IsEnable))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", r.DeletedAt))
	builder.WriteString(", ")
	if v := r.ParentID; v != nil {
		builder.WriteString("parent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(r.Path)
	builder.WriteString(", ")
	builder.WriteString("component=")
	builder.WriteString(r.Component)
	builder.WriteString(", ")
	if v := r.Redirect; v != nil {
		builder.WriteString("redirect=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", r.Order))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(fmt.Sprintf("%v", r.Meta))
	builder.WriteByte(')')
	return builder.String()
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Route) NamedChildren(name string) ([]*Route, error) {
	if r.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Route) appendNamedChildren(name string, edges ...*Route) {
	if r.Edges.namedChildren == nil {
		r.Edges.namedChildren = make(map[string][]*Route)
	}
	if len(edges) == 0 {
		r.Edges.namedChildren[name] = []*Route{}
	} else {
		r.Edges.namedChildren[name] = append(r.Edges.namedChildren[name], edges...)
	}
}

// NamedRoles returns the Roles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Route) NamedRoles(name string) ([]*Role, error) {
	if r.Edges.namedRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Route) appendNamedRoles(name string, edges ...*Role) {
	if r.Edges.namedRoles == nil {
		r.Edges.namedRoles = make(map[string][]*Role)
	}
	if len(edges) == 0 {
		r.Edges.namedRoles[name] = []*Role{}
	} else {
		r.Edges.namedRoles[name] = append(r.Edges.namedRoles[name], edges...)
	}
}

// Routes is a parsable slice of Route.
type Routes []*Route
