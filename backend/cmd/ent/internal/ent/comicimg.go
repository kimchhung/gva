// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gva/app/database/schema/pulid"
	"github.com/gva/internal/ent/comicchapter"
	"github.com/gva/internal/ent/comicimg"
)

// ComicImg is the model entity for the ComicImg schema.
type ComicImg struct {
	config `json:"-" rql:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id" rql:"filter,sort"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty" rql:"filter,sort"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// B2key holds the value of the "b2key" field.
	B2key string `json:"b2key,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// OptimizedSize holds the value of the "optimized_size" field.
	OptimizedSize int64 `json:"optimized"`
	// Size holds the value of the "size" field.
	Size int64 `json:"s"`
	// Width holds the value of the "width" field.
	Width int `json:"w"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ComicImgQuery when eager-loading is set.
	Edges              ComicImgEdges `json:"edges" rql:"-"`
	comic_chapter_imgs *pulid.ID
	selectValues       sql.SelectValues
}

// ComicImgEdges holds the relations/edges for other nodes in the graph.
type ComicImgEdges struct {
	// Chapter holds the value of the chapter edge.
	Chapter *ComicChapter `json:"chapter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ChapterOrErr returns the Chapter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ComicImgEdges) ChapterOrErr() (*ComicChapter, error) {
	if e.Chapter != nil {
		return e.Chapter, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: comicchapter.Label}
	}
	return nil, &NotLoadedError{edge: "chapter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ComicImg) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comicimg.FieldID:
			values[i] = new(pulid.ID)
		case comicimg.FieldHeight, comicimg.FieldOptimizedSize, comicimg.FieldSize, comicimg.FieldWidth:
			values[i] = new(sql.NullInt64)
		case comicimg.FieldB2key, comicimg.FieldName:
			values[i] = new(sql.NullString)
		case comicimg.FieldCreatedAt, comicimg.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case comicimg.ForeignKeys[0]: // comic_chapter_imgs
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ComicImg fields.
func (ci *ComicImg) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comicimg.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ci.ID = *value
			}
		case comicimg.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ci.CreatedAt = value.Time
			}
		case comicimg.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ci.UpdatedAt = value.Time
			}
		case comicimg.FieldB2key:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field b2key", values[i])
			} else if value.Valid {
				ci.B2key = value.String
			}
		case comicimg.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				ci.Height = int(value.Int64)
			}
		case comicimg.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ci.Name = value.String
			}
		case comicimg.FieldOptimizedSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field optimized_size", values[i])
			} else if value.Valid {
				ci.OptimizedSize = value.Int64
			}
		case comicimg.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				ci.Size = value.Int64
			}
		case comicimg.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				ci.Width = int(value.Int64)
			}
		case comicimg.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field comic_chapter_imgs", values[i])
			} else if value.Valid {
				ci.comic_chapter_imgs = new(pulid.ID)
				*ci.comic_chapter_imgs = *value.S.(*pulid.ID)
			}
		default:
			ci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ComicImg.
// This includes values selected through modifiers, order, etc.
func (ci *ComicImg) Value(name string) (ent.Value, error) {
	return ci.selectValues.Get(name)
}

// QueryChapter queries the "chapter" edge of the ComicImg entity.
func (ci *ComicImg) QueryChapter() *ComicChapterQuery {
	return NewComicImgClient(ci.config).QueryChapter(ci)
}

// Update returns a builder for updating this ComicImg.
// Note that you need to call ComicImg.Unwrap() before calling this method if this ComicImg
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *ComicImg) Update() *ComicImgUpdateOne {
	return NewComicImgClient(ci.config).UpdateOne(ci)
}

// Unwrap unwraps the ComicImg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *ComicImg) Unwrap() *ComicImg {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: ComicImg is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *ComicImg) String() string {
	var builder strings.Builder
	builder.WriteString("ComicImg(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ci.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ci.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("b2key=")
	builder.WriteString(ci.B2key)
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", ci.Height))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ci.Name)
	builder.WriteString(", ")
	builder.WriteString("optimized_size=")
	builder.WriteString(fmt.Sprintf("%v", ci.OptimizedSize))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", ci.Size))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", ci.Width))
	builder.WriteByte(')')
	return builder.String()
}

// ComicImgs is a parsable slice of ComicImg.
type ComicImgs []*ComicImg
