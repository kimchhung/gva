// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gva/app/database/schema/types"
	"github.com/gva/internal/ent/comic"
	"github.com/gva/internal/ent/comicchapter"
)

// Comic is the model entity for the Comic schema.
type Comic struct {
	config `json:"-" rql:"-"`
	// ID of the ent.
	ID string `json:"id" rql:"filter,sort"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty" rql:"filter,sort"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Chapter holds the value of the "chapter" field.
	Chapter uint `json:"chapter,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Covers holds the value of the "covers" field.
	Covers []types.CoverImg `json:"covers,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// IsTranslateCompleted holds the value of the "isTranslateCompleted" field.
	IsTranslateCompleted bool `json:"isTranslateCompleted,omitempty" isTranslateCompleted`
	// UpCount holds the value of the "up_count" field.
	UpCount uint `json:"upCount"`
	// FinalChapterID holds the value of the "final_chapter_id" field.
	FinalChapterID *string `json:"final_chapter_id,omitempty"`
	// LastChapterID holds the value of the "last_chapter_id" field.
	LastChapterID *string `json:"last_chapter_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ComicQuery when eager-loading is set.
	Edges        ComicEdges `json:"edges" rql:"-"`
	selectValues sql.SelectValues
}

// ComicEdges holds the relations/edges for other nodes in the graph.
type ComicEdges struct {
	// Chapters holds the value of the chapters edge.
	Chapters []*ComicChapter `json:"chapters,omitempty"`
	// LastChapter holds the value of the last_chapter edge.
	LastChapter *ComicChapter `json:"lastChapter"`
	// FinalChapter holds the value of the final_chapter edge.
	FinalChapter *ComicChapter `json:"finalChapter"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedChapters map[string][]*ComicChapter
}

// ChaptersOrErr returns the Chapters value or an error if the edge
// was not loaded in eager-loading.
func (e ComicEdges) ChaptersOrErr() ([]*ComicChapter, error) {
	if e.loadedTypes[0] {
		return e.Chapters, nil
	}
	return nil, &NotLoadedError{edge: "chapters"}
}

// LastChapterOrErr returns the LastChapter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ComicEdges) LastChapterOrErr() (*ComicChapter, error) {
	if e.LastChapter != nil {
		return e.LastChapter, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: comicchapter.Label}
	}
	return nil, &NotLoadedError{edge: "last_chapter"}
}

// FinalChapterOrErr returns the FinalChapter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ComicEdges) FinalChapterOrErr() (*ComicChapter, error) {
	if e.FinalChapter != nil {
		return e.FinalChapter, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: comicchapter.Label}
	}
	return nil, &NotLoadedError{edge: "final_chapter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comic) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comic.FieldCovers:
			values[i] = new([]byte)
		case comic.FieldIsTranslateCompleted:
			values[i] = new(sql.NullBool)
		case comic.FieldChapter, comic.FieldUpCount:
			values[i] = new(sql.NullInt64)
		case comic.FieldID, comic.FieldTitle, comic.FieldSlug, comic.FieldStatus, comic.FieldFinalChapterID, comic.FieldLastChapterID:
			values[i] = new(sql.NullString)
		case comic.FieldCreatedAt, comic.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comic fields.
func (c *Comic) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comic.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case comic.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case comic.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case comic.FieldChapter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chapter", values[i])
			} else if value.Valid {
				c.Chapter = uint(value.Int64)
			}
		case comic.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case comic.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				c.Slug = value.String
			}
		case comic.FieldCovers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field covers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Covers); err != nil {
					return fmt.Errorf("unmarshal field covers: %w", err)
				}
			}
		case comic.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = value.String
			}
		case comic.FieldIsTranslateCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isTranslateCompleted", values[i])
			} else if value.Valid {
				c.IsTranslateCompleted = value.Bool
			}
		case comic.FieldUpCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field up_count", values[i])
			} else if value.Valid {
				c.UpCount = uint(value.Int64)
			}
		case comic.FieldFinalChapterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field final_chapter_id", values[i])
			} else if value.Valid {
				c.FinalChapterID = new(string)
				*c.FinalChapterID = value.String
			}
		case comic.FieldLastChapterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_chapter_id", values[i])
			} else if value.Valid {
				c.LastChapterID = new(string)
				*c.LastChapterID = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Comic.
// This includes values selected through modifiers, order, etc.
func (c *Comic) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryChapters queries the "chapters" edge of the Comic entity.
func (c *Comic) QueryChapters() *ComicChapterQuery {
	return NewComicClient(c.config).QueryChapters(c)
}

// QueryLastChapter queries the "last_chapter" edge of the Comic entity.
func (c *Comic) QueryLastChapter() *ComicChapterQuery {
	return NewComicClient(c.config).QueryLastChapter(c)
}

// QueryFinalChapter queries the "final_chapter" edge of the Comic entity.
func (c *Comic) QueryFinalChapter() *ComicChapterQuery {
	return NewComicClient(c.config).QueryFinalChapter(c)
}

// Update returns a builder for updating this Comic.
// Note that you need to call Comic.Unwrap() before calling this method if this Comic
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comic) Update() *ComicUpdateOne {
	return NewComicClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Comic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comic) Unwrap() *Comic {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comic is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comic) String() string {
	var builder strings.Builder
	builder.WriteString("Comic(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("chapter=")
	builder.WriteString(fmt.Sprintf("%v", c.Chapter))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(c.Title)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(c.Slug)
	builder.WriteString(", ")
	builder.WriteString("covers=")
	builder.WriteString(fmt.Sprintf("%v", c.Covers))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(c.Status)
	builder.WriteString(", ")
	builder.WriteString("isTranslateCompleted=")
	builder.WriteString(fmt.Sprintf("%v", c.IsTranslateCompleted))
	builder.WriteString(", ")
	builder.WriteString("up_count=")
	builder.WriteString(fmt.Sprintf("%v", c.UpCount))
	builder.WriteString(", ")
	if v := c.FinalChapterID; v != nil {
		builder.WriteString("final_chapter_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.LastChapterID; v != nil {
		builder.WriteString("last_chapter_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedChapters returns the Chapters named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Comic) NamedChapters(name string) ([]*ComicChapter, error) {
	if c.Edges.namedChapters == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedChapters[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Comic) appendNamedChapters(name string, edges ...*ComicChapter) {
	if c.Edges.namedChapters == nil {
		c.Edges.namedChapters = make(map[string][]*ComicChapter)
	}
	if len(edges) == 0 {
		c.Edges.namedChapters[name] = []*ComicChapter{}
	} else {
		c.Edges.namedChapters[name] = append(c.Edges.namedChapters[name], edges...)
	}
}

// Comics is a parsable slice of Comic.
type Comics []*Comic
