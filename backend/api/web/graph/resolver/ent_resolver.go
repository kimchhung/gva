package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/gva/api/web/graph/generated"
	"github.com/gva/app/database/schema/pulid"
	"github.com/gva/internal/ent"
)

// ID is the resolver for the id field.
func (r *adminResolver) ID(ctx context.Context, obj *ent.Admin) (pulid.ID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *permissionResolver) ID(ctx context.Context, obj *ent.Permission) (pulid.ID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id pulid.ID) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []pulid.ID) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// ID is the resolver for the id field.
func (r *roleResolver) ID(ctx context.Context, obj *ent.Role) (pulid.ID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *routeResolver) ID(ctx context.Context, obj *ent.Route) (pulid.ID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ParentID is the resolver for the parentID field.
func (r *routeResolver) ParentID(ctx context.Context, obj *ent.Route) (*pulid.ID, error) {
	panic(fmt.Errorf("not implemented: ParentID - parentID"))
}

// Meta is the resolver for the meta field.
func (r *routeResolver) Meta(ctx context.Context, obj *ent.Route) (string, error) {
	panic(fmt.Errorf("not implemented: Meta - meta"))
}

// ID is the resolver for the id field.
func (r *adminWhereInputResolver) ID(ctx context.Context, obj *ent.AdminWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *adminWhereInputResolver) IDNeq(ctx context.Context, obj *ent.AdminWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *adminWhereInputResolver) IDIn(ctx context.Context, obj *ent.AdminWhereInput, data []pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *adminWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.AdminWhereInput, data []pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *adminWhereInputResolver) IDGt(ctx context.Context, obj *ent.AdminWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *adminWhereInputResolver) IDGte(ctx context.Context, obj *ent.AdminWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *adminWhereInputResolver) IDLt(ctx context.Context, obj *ent.AdminWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *adminWhereInputResolver) IDLte(ctx context.Context, obj *ent.AdminWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *permissionWhereInputResolver) ID(ctx context.Context, obj *ent.PermissionWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *permissionWhereInputResolver) IDNeq(ctx context.Context, obj *ent.PermissionWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *permissionWhereInputResolver) IDIn(ctx context.Context, obj *ent.PermissionWhereInput, data []pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *permissionWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.PermissionWhereInput, data []pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *permissionWhereInputResolver) IDGt(ctx context.Context, obj *ent.PermissionWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *permissionWhereInputResolver) IDGte(ctx context.Context, obj *ent.PermissionWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *permissionWhereInputResolver) IDLt(ctx context.Context, obj *ent.PermissionWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *permissionWhereInputResolver) IDLte(ctx context.Context, obj *ent.PermissionWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *roleWhereInputResolver) ID(ctx context.Context, obj *ent.RoleWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *roleWhereInputResolver) IDNeq(ctx context.Context, obj *ent.RoleWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *roleWhereInputResolver) IDIn(ctx context.Context, obj *ent.RoleWhereInput, data []pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *roleWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.RoleWhereInput, data []pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *roleWhereInputResolver) IDGt(ctx context.Context, obj *ent.RoleWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *roleWhereInputResolver) IDGte(ctx context.Context, obj *ent.RoleWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *roleWhereInputResolver) IDLt(ctx context.Context, obj *ent.RoleWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *roleWhereInputResolver) IDLte(ctx context.Context, obj *ent.RoleWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *routeWhereInputResolver) ID(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *routeWhereInputResolver) IDNeq(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *routeWhereInputResolver) IDIn(ctx context.Context, obj *ent.RouteWhereInput, data []pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *routeWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.RouteWhereInput, data []pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *routeWhereInputResolver) IDGt(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *routeWhereInputResolver) IDGte(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *routeWhereInputResolver) IDLt(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *routeWhereInputResolver) IDLte(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ParentID is the resolver for the parentID field.
func (r *routeWhereInputResolver) ParentID(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentID - parentID"))
}

// ParentIDNeq is the resolver for the parentIDNEQ field.
func (r *routeWhereInputResolver) ParentIDNeq(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDNeq - parentIDNEQ"))
}

// ParentIDIn is the resolver for the parentIDIn field.
func (r *routeWhereInputResolver) ParentIDIn(ctx context.Context, obj *ent.RouteWhereInput, data []pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDIn - parentIDIn"))
}

// ParentIDNotIn is the resolver for the parentIDNotIn field.
func (r *routeWhereInputResolver) ParentIDNotIn(ctx context.Context, obj *ent.RouteWhereInput, data []pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDNotIn - parentIDNotIn"))
}

// ParentIDGt is the resolver for the parentIDGT field.
func (r *routeWhereInputResolver) ParentIDGt(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDGt - parentIDGT"))
}

// ParentIDGte is the resolver for the parentIDGTE field.
func (r *routeWhereInputResolver) ParentIDGte(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDGte - parentIDGTE"))
}

// ParentIDLt is the resolver for the parentIDLT field.
func (r *routeWhereInputResolver) ParentIDLt(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDLt - parentIDLT"))
}

// ParentIDLte is the resolver for the parentIDLTE field.
func (r *routeWhereInputResolver) ParentIDLte(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDLte - parentIDLTE"))
}

// ParentIDContains is the resolver for the parentIDContains field.
func (r *routeWhereInputResolver) ParentIDContains(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDContains - parentIDContains"))
}

// ParentIDHasPrefix is the resolver for the parentIDHasPrefix field.
func (r *routeWhereInputResolver) ParentIDHasPrefix(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDHasPrefix - parentIDHasPrefix"))
}

// ParentIDHasSuffix is the resolver for the parentIDHasSuffix field.
func (r *routeWhereInputResolver) ParentIDHasSuffix(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDHasSuffix - parentIDHasSuffix"))
}

// ParentIDEqualFold is the resolver for the parentIDEqualFold field.
func (r *routeWhereInputResolver) ParentIDEqualFold(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDEqualFold - parentIDEqualFold"))
}

// ParentIDContainsFold is the resolver for the parentIDContainsFold field.
func (r *routeWhereInputResolver) ParentIDContainsFold(ctx context.Context, obj *ent.RouteWhereInput, data *pulid.ID) error {
	panic(fmt.Errorf("not implemented: ParentIDContainsFold - parentIDContainsFold"))
}

// Admin returns generated.AdminResolver implementation.
func (r *Resolver) Admin() generated.AdminResolver { return &adminResolver{r} }

// Permission returns generated.PermissionResolver implementation.
func (r *Resolver) Permission() generated.PermissionResolver { return &permissionResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Role returns generated.RoleResolver implementation.
func (r *Resolver) Role() generated.RoleResolver { return &roleResolver{r} }

// Route returns generated.RouteResolver implementation.
func (r *Resolver) Route() generated.RouteResolver { return &routeResolver{r} }

// AdminWhereInput returns generated.AdminWhereInputResolver implementation.
func (r *Resolver) AdminWhereInput() generated.AdminWhereInputResolver {
	return &adminWhereInputResolver{r}
}

// PermissionWhereInput returns generated.PermissionWhereInputResolver implementation.
func (r *Resolver) PermissionWhereInput() generated.PermissionWhereInputResolver {
	return &permissionWhereInputResolver{r}
}

// RoleWhereInput returns generated.RoleWhereInputResolver implementation.
func (r *Resolver) RoleWhereInput() generated.RoleWhereInputResolver {
	return &roleWhereInputResolver{r}
}

// RouteWhereInput returns generated.RouteWhereInputResolver implementation.
func (r *Resolver) RouteWhereInput() generated.RouteWhereInputResolver {
	return &routeWhereInputResolver{r}
}

type adminResolver struct{ *Resolver }
type permissionResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type roleResolver struct{ *Resolver }
type routeResolver struct{ *Resolver }
type adminWhereInputResolver struct{ *Resolver }
type permissionWhereInputResolver struct{ *Resolver }
type roleWhereInputResolver struct{ *Resolver }
type routeWhereInputResolver struct{ *Resolver }
