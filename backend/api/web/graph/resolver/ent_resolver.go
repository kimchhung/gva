package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/gva/api/web/graph/generated"
	"github.com/gva/app/database/schema/xid"
	"github.com/gva/internal/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id xid.ID) (ent.Noder, error) {
	return r.db.Noder(ctx, id, ent.WithNodeType(ent.IDToType))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []xid.ID) ([]ent.Noder, error) {
	return r.db.Noders(ctx, ids, ent.WithNodeType(ent.IDToType))
}

// Departments is the resolver for the departments field.
func (r *queryResolver) Departments(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.DepartmentOrder, where *ent.DepartmentWhereInput) (*ent.DepartmentConnection, error) {
	return r.db.Department.Query().Paginate(ctx, after, first, before, last, ent.WithDepartmentOrder(orderBy), ent.WithDepartmentFilter(where.Filter))
}

// Regions is the resolver for the regions field.
func (r *queryResolver) Regions(ctx context.Context, after *entgql.Cursor[xid.ID], first *int, before *entgql.Cursor[xid.ID], last *int, orderBy *ent.RegionOrder, where *ent.RegionWhereInput) (*ent.RegionConnection, error) {
	return r.db.Region.Query().Paginate(ctx, after, first, before, last, ent.WithRegionOrder(orderBy), ent.WithRegionFilter(where.Filter))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
