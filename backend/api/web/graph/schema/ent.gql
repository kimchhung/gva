directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Admin implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  isEnable: Boolean!
  deletedAt: Int!
  username: String!
  whitelistIps: [String!]!
  displayName: String
  roles: [Role!]
}
"""
Ordering options for Admin connections
"""
input AdminOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Admins.
  """
  field: AdminOrderField!
}
"""
Properties by which Admin connections can be ordered.
"""
enum AdminOrderField {
  CREATED_AT
}
"""
AdminWhereInput is used for filtering Admin objects.
Input was generated by ent.
"""
input AdminWhereInput {
  not: AdminWhereInput
  and: [AdminWhereInput!]
  or: [AdminWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  is_enable field predicates
  """
  isEnable: Boolean
  isEnableNEQ: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIsNil: Boolean
  displayNameNotNil: Boolean
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [RoleWhereInput!]
}
type Comic implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  chapter: Int!
  title: String!
  slug: String!
  covers: [CoverImg!]!
  status: String!
  istranslatecompleted: Boolean! @goField(name: "IsTranslateCompleted", forceResolver: false)
  upCount: Int!
  finalChapterID: ID
  lastChapterID: ID
  chapters: [ComicChapter!]
  lastChapter: ComicChapter
  finalChapter: ComicChapter
}
type ComicChapter implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  chapter: Int!
  title: String
  volumn: String
  lang: String!
  upCount: Int!
  downCount: Int!
  isLastChapter: Boolean!
  imgs: [ComicImg!]
  comic: Comic
}
"""
Ordering options for ComicChapter connections
"""
input ComicChapterOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ComicChapters.
  """
  field: ComicChapterOrderField!
}
"""
Properties by which ComicChapter connections can be ordered.
"""
enum ComicChapterOrderField {
  CREATED_AT
}
"""
ComicChapterWhereInput is used for filtering ComicChapter objects.
Input was generated by ent.
"""
input ComicChapterWhereInput {
  not: ComicChapterWhereInput
  and: [ComicChapterWhereInput!]
  or: [ComicChapterWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  chapter field predicates
  """
  chapter: Int
  chapterNEQ: Int
  chapterIn: [Int!]
  chapterNotIn: [Int!]
  chapterGT: Int
  chapterGTE: Int
  chapterLT: Int
  chapterLTE: Int
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """
  volumn field predicates
  """
  volumn: String
  volumnNEQ: String
  volumnIn: [String!]
  volumnNotIn: [String!]
  volumnGT: String
  volumnGTE: String
  volumnLT: String
  volumnLTE: String
  volumnContains: String
  volumnHasPrefix: String
  volumnHasSuffix: String
  volumnIsNil: Boolean
  volumnNotNil: Boolean
  volumnEqualFold: String
  volumnContainsFold: String
  """
  lang field predicates
  """
  lang: String
  langNEQ: String
  langIn: [String!]
  langNotIn: [String!]
  langGT: String
  langGTE: String
  langLT: String
  langLTE: String
  langContains: String
  langHasPrefix: String
  langHasSuffix: String
  langEqualFold: String
  langContainsFold: String
  """
  up_count field predicates
  """
  upCount: Int
  upCountNEQ: Int
  upCountIn: [Int!]
  upCountNotIn: [Int!]
  upCountGT: Int
  upCountGTE: Int
  upCountLT: Int
  upCountLTE: Int
  """
  down_count field predicates
  """
  downCount: Int
  downCountNEQ: Int
  downCountIn: [Int!]
  downCountNotIn: [Int!]
  downCountGT: Int
  downCountGTE: Int
  downCountLT: Int
  downCountLTE: Int
  """
  is_last_chapter field predicates
  """
  isLastChapter: Boolean
  isLastChapterNEQ: Boolean
  """
  imgs edge predicates
  """
  hasImgs: Boolean
  hasImgsWith: [ComicImgWhereInput!]
  """
  comic edge predicates
  """
  hasComic: Boolean
  hasComicWith: [ComicWhereInput!]
}
type ComicImg implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  b2key: String!
  height: Int!
  name: String!
  optimizedSize: Int!
  size: Int!
  width: Int!
  chapter: ComicChapter
}
"""
Ordering options for ComicImg connections
"""
input ComicImgOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ComicImgs.
  """
  field: ComicImgOrderField!
}
"""
Properties by which ComicImg connections can be ordered.
"""
enum ComicImgOrderField {
  CREATED_AT
}
"""
ComicImgWhereInput is used for filtering ComicImg objects.
Input was generated by ent.
"""
input ComicImgWhereInput {
  not: ComicImgWhereInput
  and: [ComicImgWhereInput!]
  or: [ComicImgWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  b2key field predicates
  """
  b2key: String
  b2keyNEQ: String
  b2keyIn: [String!]
  b2keyNotIn: [String!]
  b2keyGT: String
  b2keyGTE: String
  b2keyLT: String
  b2keyLTE: String
  b2keyContains: String
  b2keyHasPrefix: String
  b2keyHasSuffix: String
  b2keyEqualFold: String
  b2keyContainsFold: String
  """
  height field predicates
  """
  height: Int
  heightNEQ: Int
  heightIn: [Int!]
  heightNotIn: [Int!]
  heightGT: Int
  heightGTE: Int
  heightLT: Int
  heightLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  optimized_size field predicates
  """
  optimizedSize: Int
  optimizedSizeNEQ: Int
  optimizedSizeIn: [Int!]
  optimizedSizeNotIn: [Int!]
  optimizedSizeGT: Int
  optimizedSizeGTE: Int
  optimizedSizeLT: Int
  optimizedSizeLTE: Int
  """
  size field predicates
  """
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  """
  width field predicates
  """
  width: Int
  widthNEQ: Int
  widthIn: [Int!]
  widthNotIn: [Int!]
  widthGT: Int
  widthGTE: Int
  widthLT: Int
  widthLTE: Int
  """
  chapter edge predicates
  """
  hasChapter: Boolean
  hasChapterWith: [ComicChapterWhereInput!]
}
"""
Ordering options for Comic connections
"""
input ComicOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Comics.
  """
  field: ComicOrderField!
}
"""
Properties by which Comic connections can be ordered.
"""
enum ComicOrderField {
  CREATED_AT
}
"""
ComicWhereInput is used for filtering Comic objects.
Input was generated by ent.
"""
input ComicWhereInput {
  not: ComicWhereInput
  and: [ComicWhereInput!]
  or: [ComicWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  chapter field predicates
  """
  chapter: Int
  chapterNEQ: Int
  chapterIn: [Int!]
  chapterNotIn: [Int!]
  chapterGT: Int
  chapterGTE: Int
  chapterLT: Int
  chapterLTE: Int
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusEqualFold: String
  statusContainsFold: String
  """
  isTranslateCompleted field predicates
  """
  istranslatecompleted: Boolean
  istranslatecompletedNEQ: Boolean
  """
  up_count field predicates
  """
  upCount: Int
  upCountNEQ: Int
  upCountIn: [Int!]
  upCountNotIn: [Int!]
  upCountGT: Int
  upCountGTE: Int
  upCountLT: Int
  upCountLTE: Int
  """
  final_chapter_id field predicates
  """
  finalChapterID: ID
  finalChapterIDNEQ: ID
  finalChapterIDIn: [ID!]
  finalChapterIDNotIn: [ID!]
  finalChapterIDGT: ID
  finalChapterIDGTE: ID
  finalChapterIDLT: ID
  finalChapterIDLTE: ID
  finalChapterIDContains: ID
  finalChapterIDHasPrefix: ID
  finalChapterIDHasSuffix: ID
  finalChapterIDIsNil: Boolean
  finalChapterIDNotNil: Boolean
  finalChapterIDEqualFold: ID
  finalChapterIDContainsFold: ID
  """
  last_chapter_id field predicates
  """
  lastChapterID: ID
  lastChapterIDNEQ: ID
  lastChapterIDIn: [ID!]
  lastChapterIDNotIn: [ID!]
  lastChapterIDGT: ID
  lastChapterIDGTE: ID
  lastChapterIDLT: ID
  lastChapterIDLTE: ID
  lastChapterIDContains: ID
  lastChapterIDHasPrefix: ID
  lastChapterIDHasSuffix: ID
  lastChapterIDIsNil: Boolean
  lastChapterIDNotNil: Boolean
  lastChapterIDEqualFold: ID
  lastChapterIDContainsFold: ID
  """
  chapters edge predicates
  """
  hasChapters: Boolean
  hasChaptersWith: [ComicChapterWhereInput!]
  """
  last_chapter edge predicates
  """
  hasLastChapter: Boolean
  hasLastChapterWith: [ComicChapterWhereInput!]
  """
  final_chapter edge predicates
  """
  hasFinalChapter: Boolean
  hasFinalChapterWith: [ComicChapterWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Genre implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  type: GenreType!
}
"""
Ordering options for Genre connections
"""
input GenreOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Genres.
  """
  field: GenreOrderField!
}
"""
Properties by which Genre connections can be ordered.
"""
enum GenreOrderField {
  CREATED_AT
}
"""
GenreType is enum for the field type
"""
enum GenreType @goModel(model: "github.com/gva/internal/ent/genre.Type") {
  comic
}
"""
GenreWhereInput is used for filtering Genre objects.
Input was generated by ent.
"""
input GenreWhereInput {
  not: GenreWhereInput
  and: [GenreWhereInput!]
  or: [GenreWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  type field predicates
  """
  type: GenreType
  typeNEQ: GenreType
  typeIn: [GenreType!]
  typeNotIn: [GenreType!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/gva/internal/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Permission implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  group: String!
  name: String!
  key: String!
  order: Int!
  roles: [Role!]
}
"""
Ordering options for Permission connections
"""
input PermissionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Permissions.
  """
  field: PermissionOrderField!
}
"""
Properties by which Permission connections can be ordered.
"""
enum PermissionOrderField {
  CREATED_AT
}
"""
PermissionWhereInput is used for filtering Permission objects.
Input was generated by ent.
"""
input PermissionWhereInput {
  not: PermissionWhereInput
  and: [PermissionWhereInput!]
  or: [PermissionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  group field predicates
  """
  group: String
  groupNEQ: String
  groupIn: [String!]
  groupNotIn: [String!]
  groupGT: String
  groupGTE: String
  groupLT: String
  groupLTE: String
  groupContains: String
  groupHasPrefix: String
  groupHasSuffix: String
  groupEqualFold: String
  groupContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  key field predicates
  """
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [RoleWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
}
type Role implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  isEnable: Boolean!
  deletedAt: Int!
  name: String!
  description: String!
  order: Int!
  isChangeable: Boolean!
  admins: [Admin!]
  permissions: [Permission!]
  routes: [Route!]
}
"""
Ordering options for Role connections
"""
input RoleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Roles.
  """
  field: RoleOrderField!
}
"""
Properties by which Role connections can be ordered.
"""
enum RoleOrderField {
  CREATED_AT
}
"""
RoleWhereInput is used for filtering Role objects.
Input was generated by ent.
"""
input RoleWhereInput {
  not: RoleWhereInput
  and: [RoleWhereInput!]
  or: [RoleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  is_enable field predicates
  """
  isEnable: Boolean
  isEnableNEQ: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  is_changeable field predicates
  """
  isChangeable: Boolean
  isChangeableNEQ: Boolean
  """
  admins edge predicates
  """
  hasAdmins: Boolean
  hasAdminsWith: [AdminWhereInput!]
  """
  permissions edge predicates
  """
  hasPermissions: Boolean
  hasPermissionsWith: [PermissionWhereInput!]
  """
  routes edge predicates
  """
  hasRoutes: Boolean
  hasRoutesWith: [RouteWhereInput!]
}
type Route implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  isEnable: Boolean!
  deletedAt: Int!
  parentID: ID
  path: String!
  component: String!
  redirect: String
  name: String!
  order: Int
  type: RouteType!
  meta: RouteMeta!
  parent: Route
  children: [Route!]
  roles: [Role!]
}
"""
Ordering options for Route connections
"""
input RouteOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Routes.
  """
  field: RouteOrderField!
}
"""
Properties by which Route connections can be ordered.
"""
enum RouteOrderField {
  CREATED_AT
}
"""
RouteType is enum for the field type
"""
enum RouteType @goModel(model: "github.com/gva/internal/ent/route.Type") {
  cata_log
  menu
  button
  external_link
}
"""
RouteWhereInput is used for filtering Route objects.
Input was generated by ent.
"""
input RouteWhereInput {
  not: RouteWhereInput
  and: [RouteWhereInput!]
  or: [RouteWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  is_enable field predicates
  """
  isEnable: Boolean
  isEnableNEQ: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  parent_id field predicates
  """
  parentID: ID
  parentIDNEQ: ID
  parentIDIn: [ID!]
  parentIDNotIn: [ID!]
  parentIDGT: ID
  parentIDGTE: ID
  parentIDLT: ID
  parentIDLTE: ID
  parentIDContains: ID
  parentIDHasPrefix: ID
  parentIDHasSuffix: ID
  parentIDIsNil: Boolean
  parentIDNotNil: Boolean
  parentIDEqualFold: ID
  parentIDContainsFold: ID
  """
  path field predicates
  """
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathEqualFold: String
  pathContainsFold: String
  """
  component field predicates
  """
  component: String
  componentNEQ: String
  componentIn: [String!]
  componentNotIn: [String!]
  componentGT: String
  componentGTE: String
  componentLT: String
  componentLTE: String
  componentContains: String
  componentHasPrefix: String
  componentHasSuffix: String
  componentEqualFold: String
  componentContainsFold: String
  """
  redirect field predicates
  """
  redirect: String
  redirectNEQ: String
  redirectIn: [String!]
  redirectNotIn: [String!]
  redirectGT: String
  redirectGTE: String
  redirectLT: String
  redirectLTE: String
  redirectContains: String
  redirectHasPrefix: String
  redirectHasSuffix: String
  redirectIsNil: Boolean
  redirectNotNil: Boolean
  redirectEqualFold: String
  redirectContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  orderIsNil: Boolean
  orderNotNil: Boolean
  """
  type field predicates
  """
  type: RouteType
  typeNEQ: RouteType
  typeIn: [RouteType!]
  typeNotIn: [RouteType!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [RouteWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [RouteWhereInput!]
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [RoleWhereInput!]
}
