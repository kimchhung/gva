directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Admin implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  isEnable: Boolean!
  deletedAt: Int!
  username: String!
  whitelistIps: [String!]!
  displayName: String
  roles: [Role!]
}
"""
Ordering options for Admin connections
"""
input AdminOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Admins.
  """
  field: AdminOrderField!
}
"""
Properties by which Admin connections can be ordered.
"""
enum AdminOrderField {
  CREATED_AT
}
"""
AdminWhereInput is used for filtering Admin objects.
Input was generated by ent.
"""
input AdminWhereInput {
  not: AdminWhereInput
  and: [AdminWhereInput!]
  or: [AdminWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  is_enable field predicates
  """
  isEnable: Boolean
  isEnableNEQ: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIsNil: Boolean
  displayNameNotNil: Boolean
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [RoleWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/gva/internal/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Permission implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  group: String!
  name: String!
  key: String!
  order: Int!
  roles: [Role!]
}
"""
Ordering options for Permission connections
"""
input PermissionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Permissions.
  """
  field: PermissionOrderField!
}
"""
Properties by which Permission connections can be ordered.
"""
enum PermissionOrderField {
  CREATED_AT
}
"""
PermissionWhereInput is used for filtering Permission objects.
Input was generated by ent.
"""
input PermissionWhereInput {
  not: PermissionWhereInput
  and: [PermissionWhereInput!]
  or: [PermissionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  group field predicates
  """
  group: String
  groupNEQ: String
  groupIn: [String!]
  groupNotIn: [String!]
  groupGT: String
  groupGTE: String
  groupLT: String
  groupLTE: String
  groupContains: String
  groupHasPrefix: String
  groupHasSuffix: String
  groupEqualFold: String
  groupContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  key field predicates
  """
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [RoleWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
}
type Role implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  isEnable: Boolean!
  deletedAt: Int!
  name: String!
  description: String!
  order: Int!
  isChangeable: Boolean!
  admins: [Admin!]
  permissions: [Permission!]
  routes: [Route!]
}
"""
Ordering options for Role connections
"""
input RoleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Roles.
  """
  field: RoleOrderField!
}
"""
Properties by which Role connections can be ordered.
"""
enum RoleOrderField {
  CREATED_AT
}
"""
RoleWhereInput is used for filtering Role objects.
Input was generated by ent.
"""
input RoleWhereInput {
  not: RoleWhereInput
  and: [RoleWhereInput!]
  or: [RoleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  is_enable field predicates
  """
  isEnable: Boolean
  isEnableNEQ: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  """
  is_changeable field predicates
  """
  isChangeable: Boolean
  isChangeableNEQ: Boolean
  """
  admins edge predicates
  """
  hasAdmins: Boolean
  hasAdminsWith: [AdminWhereInput!]
  """
  permissions edge predicates
  """
  hasPermissions: Boolean
  hasPermissionsWith: [PermissionWhereInput!]
  """
  routes edge predicates
  """
  hasRoutes: Boolean
  hasRoutesWith: [RouteWhereInput!]
}
type Route implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  isEnable: Boolean!
  deletedAt: Int!
  parentID: ID
  path: String!
  component: String!
  redirect: String
  name: String!
  order: Int
  type: RouteType!
  meta: RouteMeta!
  parent: Route
  children: [Route!]
  roles: [Role!]
}
"""
Ordering options for Route connections
"""
input RouteOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Routes.
  """
  field: RouteOrderField!
}
"""
Properties by which Route connections can be ordered.
"""
enum RouteOrderField {
  CREATED_AT
}
"""
RouteType is enum for the field type
"""
enum RouteType @goModel(model: "github.com/gva/internal/ent/route.Type") {
  cata_log
  menu
  button
  external_link
}
"""
RouteWhereInput is used for filtering Route objects.
Input was generated by ent.
"""
input RouteWhereInput {
  not: RouteWhereInput
  and: [RouteWhereInput!]
  or: [RouteWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  is_enable field predicates
  """
  isEnable: Boolean
  isEnableNEQ: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  parent_id field predicates
  """
  parentID: ID
  parentIDNEQ: ID
  parentIDIn: [ID!]
  parentIDNotIn: [ID!]
  parentIDGT: ID
  parentIDGTE: ID
  parentIDLT: ID
  parentIDLTE: ID
  parentIDContains: ID
  parentIDHasPrefix: ID
  parentIDHasSuffix: ID
  parentIDIsNil: Boolean
  parentIDNotNil: Boolean
  parentIDEqualFold: ID
  parentIDContainsFold: ID
  """
  path field predicates
  """
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathEqualFold: String
  pathContainsFold: String
  """
  component field predicates
  """
  component: String
  componentNEQ: String
  componentIn: [String!]
  componentNotIn: [String!]
  componentGT: String
  componentGTE: String
  componentLT: String
  componentLTE: String
  componentContains: String
  componentHasPrefix: String
  componentHasSuffix: String
  componentEqualFold: String
  componentContainsFold: String
  """
  redirect field predicates
  """
  redirect: String
  redirectNEQ: String
  redirectIn: [String!]
  redirectNotIn: [String!]
  redirectGT: String
  redirectGTE: String
  redirectLT: String
  redirectLTE: String
  redirectContains: String
  redirectHasPrefix: String
  redirectHasSuffix: String
  redirectIsNil: Boolean
  redirectNotNil: Boolean
  redirectEqualFold: String
  redirectContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  order field predicates
  """
  order: Int
  orderNEQ: Int
  orderIn: [Int!]
  orderNotIn: [Int!]
  orderGT: Int
  orderGTE: Int
  orderLT: Int
  orderLTE: Int
  orderIsNil: Boolean
  orderNotNil: Boolean
  """
  type field predicates
  """
  type: RouteType
  typeNEQ: RouteType
  typeIn: [RouteType!]
  typeNotIn: [RouteType!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [RouteWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [RouteWhereInput!]
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [RoleWhereInput!]
}
