// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/kimchhung/gva/backend/internal/ent/admin"
	"github.com/kimchhung/gva/backend/internal/ent/comic"
	"github.com/kimchhung/gva/backend/internal/ent/comicchapter"
	"github.com/kimchhung/gva/backend/internal/ent/comicimg"
	"github.com/kimchhung/gva/backend/internal/ent/genre"
	"github.com/kimchhung/gva/backend/internal/ent/permission"
	"github.com/kimchhung/gva/backend/internal/ent/role"
	"github.com/kimchhung/gva/backend/internal/ent/route"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AdminQuery) CollectFields(ctx context.Context, satisfies ...string) (*AdminQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AdminQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(admin.Columns))
		selectedFields = []string{admin.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "roles":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RoleClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, roleImplementors)...); err != nil {
				return err
			}
			a.WithNamedRoles(alias, func(wq *RoleQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[admin.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, admin.FieldCreatedAt)
				fieldSeen[admin.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[admin.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, admin.FieldUpdatedAt)
				fieldSeen[admin.FieldUpdatedAt] = struct{}{}
			}
		case "isEnable":
			if _, ok := fieldSeen[admin.FieldIsEnable]; !ok {
				selectedFields = append(selectedFields, admin.FieldIsEnable)
				fieldSeen[admin.FieldIsEnable] = struct{}{}
			}
		case "deletedAt":
			if _, ok := fieldSeen[admin.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, admin.FieldDeletedAt)
				fieldSeen[admin.FieldDeletedAt] = struct{}{}
			}
		case "username":
			if _, ok := fieldSeen[admin.FieldUsername]; !ok {
				selectedFields = append(selectedFields, admin.FieldUsername)
				fieldSeen[admin.FieldUsername] = struct{}{}
			}
		case "whitelistIps":
			if _, ok := fieldSeen[admin.FieldWhitelistIps]; !ok {
				selectedFields = append(selectedFields, admin.FieldWhitelistIps)
				fieldSeen[admin.FieldWhitelistIps] = struct{}{}
			}
		case "displayName":
			if _, ok := fieldSeen[admin.FieldDisplayName]; !ok {
				selectedFields = append(selectedFields, admin.FieldDisplayName)
				fieldSeen[admin.FieldDisplayName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		a.Select(selectedFields...)
	}
	return nil
}

type adminPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AdminPaginateOption
}

func newAdminPaginateArgs(rv map[string]any) *adminPaginateArgs {
	args := &adminPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *ComicQuery) CollectFields(ctx context.Context, satisfies ...string) (*ComicQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *ComicQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(comic.Columns))
		selectedFields = []string{comic.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "chapters":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ComicChapterClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, comicchapterImplementors)...); err != nil {
				return err
			}
			c.WithNamedChapters(alias, func(wq *ComicChapterQuery) {
				*wq = *query
			})

		case "lastChapter":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ComicChapterClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, comicchapterImplementors)...); err != nil {
				return err
			}
			c.withLastChapter = query
			if _, ok := fieldSeen[comic.FieldLastChapterID]; !ok {
				selectedFields = append(selectedFields, comic.FieldLastChapterID)
				fieldSeen[comic.FieldLastChapterID] = struct{}{}
			}

		case "finalChapter":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ComicChapterClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, comicchapterImplementors)...); err != nil {
				return err
			}
			c.withFinalChapter = query
			if _, ok := fieldSeen[comic.FieldFinalChapterID]; !ok {
				selectedFields = append(selectedFields, comic.FieldFinalChapterID)
				fieldSeen[comic.FieldFinalChapterID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[comic.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, comic.FieldCreatedAt)
				fieldSeen[comic.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[comic.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, comic.FieldUpdatedAt)
				fieldSeen[comic.FieldUpdatedAt] = struct{}{}
			}
		case "chapter":
			if _, ok := fieldSeen[comic.FieldChapter]; !ok {
				selectedFields = append(selectedFields, comic.FieldChapter)
				fieldSeen[comic.FieldChapter] = struct{}{}
			}
		case "title":
			if _, ok := fieldSeen[comic.FieldTitle]; !ok {
				selectedFields = append(selectedFields, comic.FieldTitle)
				fieldSeen[comic.FieldTitle] = struct{}{}
			}
		case "slug":
			if _, ok := fieldSeen[comic.FieldSlug]; !ok {
				selectedFields = append(selectedFields, comic.FieldSlug)
				fieldSeen[comic.FieldSlug] = struct{}{}
			}
		case "covers":
			if _, ok := fieldSeen[comic.FieldCovers]; !ok {
				selectedFields = append(selectedFields, comic.FieldCovers)
				fieldSeen[comic.FieldCovers] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[comic.FieldStatus]; !ok {
				selectedFields = append(selectedFields, comic.FieldStatus)
				fieldSeen[comic.FieldStatus] = struct{}{}
			}
		case "istranslatecompleted":
			if _, ok := fieldSeen[comic.FieldIsTranslateCompleted]; !ok {
				selectedFields = append(selectedFields, comic.FieldIsTranslateCompleted)
				fieldSeen[comic.FieldIsTranslateCompleted] = struct{}{}
			}
		case "upCount":
			if _, ok := fieldSeen[comic.FieldUpCount]; !ok {
				selectedFields = append(selectedFields, comic.FieldUpCount)
				fieldSeen[comic.FieldUpCount] = struct{}{}
			}
		case "finalChapterID":
			if _, ok := fieldSeen[comic.FieldFinalChapterID]; !ok {
				selectedFields = append(selectedFields, comic.FieldFinalChapterID)
				fieldSeen[comic.FieldFinalChapterID] = struct{}{}
			}
		case "lastChapterID":
			if _, ok := fieldSeen[comic.FieldLastChapterID]; !ok {
				selectedFields = append(selectedFields, comic.FieldLastChapterID)
				fieldSeen[comic.FieldLastChapterID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type comicPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ComicPaginateOption
}

func newComicPaginateArgs(rv map[string]any) *comicPaginateArgs {
	args := &comicPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cc *ComicChapterQuery) CollectFields(ctx context.Context, satisfies ...string) (*ComicChapterQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return cc, nil
	}
	if err := cc.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return cc, nil
}

func (cc *ComicChapterQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(comicchapter.Columns))
		selectedFields = []string{comicchapter.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "imgs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ComicImgClient{config: cc.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, comicimgImplementors)...); err != nil {
				return err
			}
			cc.WithNamedImgs(alias, func(wq *ComicImgQuery) {
				*wq = *query
			})

		case "comic":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ComicClient{config: cc.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, comicImplementors)...); err != nil {
				return err
			}
			cc.withComic = query
		case "createdAt":
			if _, ok := fieldSeen[comicchapter.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, comicchapter.FieldCreatedAt)
				fieldSeen[comicchapter.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[comicchapter.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, comicchapter.FieldUpdatedAt)
				fieldSeen[comicchapter.FieldUpdatedAt] = struct{}{}
			}
		case "chapter":
			if _, ok := fieldSeen[comicchapter.FieldChapter]; !ok {
				selectedFields = append(selectedFields, comicchapter.FieldChapter)
				fieldSeen[comicchapter.FieldChapter] = struct{}{}
			}
		case "title":
			if _, ok := fieldSeen[comicchapter.FieldTitle]; !ok {
				selectedFields = append(selectedFields, comicchapter.FieldTitle)
				fieldSeen[comicchapter.FieldTitle] = struct{}{}
			}
		case "volumn":
			if _, ok := fieldSeen[comicchapter.FieldVolumn]; !ok {
				selectedFields = append(selectedFields, comicchapter.FieldVolumn)
				fieldSeen[comicchapter.FieldVolumn] = struct{}{}
			}
		case "lang":
			if _, ok := fieldSeen[comicchapter.FieldLang]; !ok {
				selectedFields = append(selectedFields, comicchapter.FieldLang)
				fieldSeen[comicchapter.FieldLang] = struct{}{}
			}
		case "upCount":
			if _, ok := fieldSeen[comicchapter.FieldUpCount]; !ok {
				selectedFields = append(selectedFields, comicchapter.FieldUpCount)
				fieldSeen[comicchapter.FieldUpCount] = struct{}{}
			}
		case "downCount":
			if _, ok := fieldSeen[comicchapter.FieldDownCount]; !ok {
				selectedFields = append(selectedFields, comicchapter.FieldDownCount)
				fieldSeen[comicchapter.FieldDownCount] = struct{}{}
			}
		case "isLastChapter":
			if _, ok := fieldSeen[comicchapter.FieldIsLastChapter]; !ok {
				selectedFields = append(selectedFields, comicchapter.FieldIsLastChapter)
				fieldSeen[comicchapter.FieldIsLastChapter] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		cc.Select(selectedFields...)
	}
	return nil
}

type comicchapterPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ComicChapterPaginateOption
}

func newComicChapterPaginateArgs(rv map[string]any) *comicchapterPaginateArgs {
	args := &comicchapterPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ci *ComicImgQuery) CollectFields(ctx context.Context, satisfies ...string) (*ComicImgQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ci, nil
	}
	if err := ci.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ci, nil
}

func (ci *ComicImgQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(comicimg.Columns))
		selectedFields = []string{comicimg.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "chapter":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ComicChapterClient{config: ci.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, comicchapterImplementors)...); err != nil {
				return err
			}
			ci.withChapter = query
		case "createdAt":
			if _, ok := fieldSeen[comicimg.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, comicimg.FieldCreatedAt)
				fieldSeen[comicimg.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[comicimg.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, comicimg.FieldUpdatedAt)
				fieldSeen[comicimg.FieldUpdatedAt] = struct{}{}
			}
		case "b2key":
			if _, ok := fieldSeen[comicimg.FieldB2key]; !ok {
				selectedFields = append(selectedFields, comicimg.FieldB2key)
				fieldSeen[comicimg.FieldB2key] = struct{}{}
			}
		case "height":
			if _, ok := fieldSeen[comicimg.FieldHeight]; !ok {
				selectedFields = append(selectedFields, comicimg.FieldHeight)
				fieldSeen[comicimg.FieldHeight] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[comicimg.FieldName]; !ok {
				selectedFields = append(selectedFields, comicimg.FieldName)
				fieldSeen[comicimg.FieldName] = struct{}{}
			}
		case "optimizedSize":
			if _, ok := fieldSeen[comicimg.FieldOptimizedSize]; !ok {
				selectedFields = append(selectedFields, comicimg.FieldOptimizedSize)
				fieldSeen[comicimg.FieldOptimizedSize] = struct{}{}
			}
		case "size":
			if _, ok := fieldSeen[comicimg.FieldSize]; !ok {
				selectedFields = append(selectedFields, comicimg.FieldSize)
				fieldSeen[comicimg.FieldSize] = struct{}{}
			}
		case "width":
			if _, ok := fieldSeen[comicimg.FieldWidth]; !ok {
				selectedFields = append(selectedFields, comicimg.FieldWidth)
				fieldSeen[comicimg.FieldWidth] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ci.Select(selectedFields...)
	}
	return nil
}

type comicimgPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ComicImgPaginateOption
}

func newComicImgPaginateArgs(rv map[string]any) *comicimgPaginateArgs {
	args := &comicimgPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ge *GenreQuery) CollectFields(ctx context.Context, satisfies ...string) (*GenreQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ge, nil
	}
	if err := ge.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ge, nil
}

func (ge *GenreQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(genre.Columns))
		selectedFields = []string{genre.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "createdAt":
			if _, ok := fieldSeen[genre.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, genre.FieldCreatedAt)
				fieldSeen[genre.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[genre.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, genre.FieldUpdatedAt)
				fieldSeen[genre.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[genre.FieldName]; !ok {
				selectedFields = append(selectedFields, genre.FieldName)
				fieldSeen[genre.FieldName] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[genre.FieldType]; !ok {
				selectedFields = append(selectedFields, genre.FieldType)
				fieldSeen[genre.FieldType] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ge.Select(selectedFields...)
	}
	return nil
}

type genrePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GenrePaginateOption
}

func newGenrePaginateArgs(rv map[string]any) *genrePaginateArgs {
	args := &genrePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pe *PermissionQuery) CollectFields(ctx context.Context, satisfies ...string) (*PermissionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pe, nil
	}
	if err := pe.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pe, nil
}

func (pe *PermissionQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(permission.Columns))
		selectedFields = []string{permission.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "roles":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RoleClient{config: pe.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, roleImplementors)...); err != nil {
				return err
			}
			pe.WithNamedRoles(alias, func(wq *RoleQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[permission.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, permission.FieldCreatedAt)
				fieldSeen[permission.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[permission.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, permission.FieldUpdatedAt)
				fieldSeen[permission.FieldUpdatedAt] = struct{}{}
			}
		case "group":
			if _, ok := fieldSeen[permission.FieldGroup]; !ok {
				selectedFields = append(selectedFields, permission.FieldGroup)
				fieldSeen[permission.FieldGroup] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[permission.FieldName]; !ok {
				selectedFields = append(selectedFields, permission.FieldName)
				fieldSeen[permission.FieldName] = struct{}{}
			}
		case "key":
			if _, ok := fieldSeen[permission.FieldKey]; !ok {
				selectedFields = append(selectedFields, permission.FieldKey)
				fieldSeen[permission.FieldKey] = struct{}{}
			}
		case "order":
			if _, ok := fieldSeen[permission.FieldOrder]; !ok {
				selectedFields = append(selectedFields, permission.FieldOrder)
				fieldSeen[permission.FieldOrder] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pe.Select(selectedFields...)
	}
	return nil
}

type permissionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PermissionPaginateOption
}

func newPermissionPaginateArgs(rv map[string]any) *permissionPaginateArgs {
	args := &permissionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RoleQuery) CollectFields(ctx context.Context, satisfies ...string) (*RoleQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *RoleQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(role.Columns))
		selectedFields = []string{role.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "admins":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AdminClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, adminImplementors)...); err != nil {
				return err
			}
			r.WithNamedAdmins(alias, func(wq *AdminQuery) {
				*wq = *query
			})

		case "permissions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PermissionClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, permissionImplementors)...); err != nil {
				return err
			}
			r.WithNamedPermissions(alias, func(wq *PermissionQuery) {
				*wq = *query
			})

		case "routes":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RouteClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, routeImplementors)...); err != nil {
				return err
			}
			r.WithNamedRoutes(alias, func(wq *RouteQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[role.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, role.FieldCreatedAt)
				fieldSeen[role.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[role.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, role.FieldUpdatedAt)
				fieldSeen[role.FieldUpdatedAt] = struct{}{}
			}
		case "isEnable":
			if _, ok := fieldSeen[role.FieldIsEnable]; !ok {
				selectedFields = append(selectedFields, role.FieldIsEnable)
				fieldSeen[role.FieldIsEnable] = struct{}{}
			}
		case "deletedAt":
			if _, ok := fieldSeen[role.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, role.FieldDeletedAt)
				fieldSeen[role.FieldDeletedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[role.FieldName]; !ok {
				selectedFields = append(selectedFields, role.FieldName)
				fieldSeen[role.FieldName] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[role.FieldDescription]; !ok {
				selectedFields = append(selectedFields, role.FieldDescription)
				fieldSeen[role.FieldDescription] = struct{}{}
			}
		case "order":
			if _, ok := fieldSeen[role.FieldOrder]; !ok {
				selectedFields = append(selectedFields, role.FieldOrder)
				fieldSeen[role.FieldOrder] = struct{}{}
			}
		case "isChangeable":
			if _, ok := fieldSeen[role.FieldIsChangeable]; !ok {
				selectedFields = append(selectedFields, role.FieldIsChangeable)
				fieldSeen[role.FieldIsChangeable] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		r.Select(selectedFields...)
	}
	return nil
}

type rolePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []RolePaginateOption
}

func newRolePaginateArgs(rv map[string]any) *rolePaginateArgs {
	args := &rolePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RouteQuery) CollectFields(ctx context.Context, satisfies ...string) (*RouteQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *RouteQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(route.Columns))
		selectedFields = []string{route.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "parent":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RouteClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, routeImplementors)...); err != nil {
				return err
			}
			r.withParent = query
			if _, ok := fieldSeen[route.FieldParentID]; !ok {
				selectedFields = append(selectedFields, route.FieldParentID)
				fieldSeen[route.FieldParentID] = struct{}{}
			}

		case "children":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RouteClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, routeImplementors)...); err != nil {
				return err
			}
			r.WithNamedChildren(alias, func(wq *RouteQuery) {
				*wq = *query
			})

		case "roles":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RoleClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, roleImplementors)...); err != nil {
				return err
			}
			r.WithNamedRoles(alias, func(wq *RoleQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[route.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, route.FieldCreatedAt)
				fieldSeen[route.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[route.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, route.FieldUpdatedAt)
				fieldSeen[route.FieldUpdatedAt] = struct{}{}
			}
		case "isEnable":
			if _, ok := fieldSeen[route.FieldIsEnable]; !ok {
				selectedFields = append(selectedFields, route.FieldIsEnable)
				fieldSeen[route.FieldIsEnable] = struct{}{}
			}
		case "deletedAt":
			if _, ok := fieldSeen[route.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, route.FieldDeletedAt)
				fieldSeen[route.FieldDeletedAt] = struct{}{}
			}
		case "parentID":
			if _, ok := fieldSeen[route.FieldParentID]; !ok {
				selectedFields = append(selectedFields, route.FieldParentID)
				fieldSeen[route.FieldParentID] = struct{}{}
			}
		case "path":
			if _, ok := fieldSeen[route.FieldPath]; !ok {
				selectedFields = append(selectedFields, route.FieldPath)
				fieldSeen[route.FieldPath] = struct{}{}
			}
		case "component":
			if _, ok := fieldSeen[route.FieldComponent]; !ok {
				selectedFields = append(selectedFields, route.FieldComponent)
				fieldSeen[route.FieldComponent] = struct{}{}
			}
		case "redirect":
			if _, ok := fieldSeen[route.FieldRedirect]; !ok {
				selectedFields = append(selectedFields, route.FieldRedirect)
				fieldSeen[route.FieldRedirect] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[route.FieldName]; !ok {
				selectedFields = append(selectedFields, route.FieldName)
				fieldSeen[route.FieldName] = struct{}{}
			}
		case "order":
			if _, ok := fieldSeen[route.FieldOrder]; !ok {
				selectedFields = append(selectedFields, route.FieldOrder)
				fieldSeen[route.FieldOrder] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[route.FieldType]; !ok {
				selectedFields = append(selectedFields, route.FieldType)
				fieldSeen[route.FieldType] = struct{}{}
			}
		case "meta":
			if _, ok := fieldSeen[route.FieldMeta]; !ok {
				selectedFields = append(selectedFields, route.FieldMeta)
				fieldSeen[route.FieldMeta] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		r.Select(selectedFields...)
	}
	return nil
}

type routePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []RoutePaginateOption
}

func newRoutePaginateArgs(rv map[string]any) *routePaginateArgs {
	args := &routePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
