// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gva/app/database/schema/xid"
	"github.com/gva/internal/ent/mytodo"
)

// MyTodoCreate is the builder for creating a MyTodo entity.
type MyTodoCreate struct {
	config
	mutation *MyTodoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mtc *MyTodoCreate) SetCreatedAt(t time.Time) *MyTodoCreate {
	mtc.mutation.SetCreatedAt(t)
	return mtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mtc *MyTodoCreate) SetNillableCreatedAt(t *time.Time) *MyTodoCreate {
	if t != nil {
		mtc.SetCreatedAt(*t)
	}
	return mtc
}

// SetUpdatedAt sets the "updated_at" field.
func (mtc *MyTodoCreate) SetUpdatedAt(t time.Time) *MyTodoCreate {
	mtc.mutation.SetUpdatedAt(t)
	return mtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtc *MyTodoCreate) SetNillableUpdatedAt(t *time.Time) *MyTodoCreate {
	if t != nil {
		mtc.SetUpdatedAt(*t)
	}
	return mtc
}

// SetDeletedAt sets the "deleted_at" field.
func (mtc *MyTodoCreate) SetDeletedAt(i int) *MyTodoCreate {
	mtc.mutation.SetDeletedAt(i)
	return mtc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mtc *MyTodoCreate) SetNillableDeletedAt(i *int) *MyTodoCreate {
	if i != nil {
		mtc.SetDeletedAt(*i)
	}
	return mtc
}

// SetName sets the "name" field.
func (mtc *MyTodoCreate) SetName(s string) *MyTodoCreate {
	mtc.mutation.SetName(s)
	return mtc
}

// SetID sets the "id" field.
func (mtc *MyTodoCreate) SetID(x xid.ID) *MyTodoCreate {
	mtc.mutation.SetID(x)
	return mtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mtc *MyTodoCreate) SetNillableID(x *xid.ID) *MyTodoCreate {
	if x != nil {
		mtc.SetID(*x)
	}
	return mtc
}

// Mutation returns the MyTodoMutation object of the builder.
func (mtc *MyTodoCreate) Mutation() *MyTodoMutation {
	return mtc.mutation
}

// Save creates the MyTodo in the database.
func (mtc *MyTodoCreate) Save(ctx context.Context) (*MyTodo, error) {
	if err := mtc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mtc.sqlSave, mtc.mutation, mtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mtc *MyTodoCreate) SaveX(ctx context.Context) *MyTodo {
	v, err := mtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtc *MyTodoCreate) Exec(ctx context.Context) error {
	_, err := mtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtc *MyTodoCreate) ExecX(ctx context.Context) {
	if err := mtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtc *MyTodoCreate) defaults() error {
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		if mytodo.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized mytodo.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := mytodo.DefaultCreatedAt()
		mtc.mutation.SetCreatedAt(v)
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		if mytodo.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized mytodo.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := mytodo.DefaultUpdatedAt()
		mtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mtc.mutation.DeletedAt(); !ok {
		v := mytodo.DefaultDeletedAt
		mtc.mutation.SetDeletedAt(v)
	}
	if _, ok := mtc.mutation.ID(); !ok {
		if mytodo.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized mytodo.DefaultID (forgotten import ent/runtime?)")
		}
		v := mytodo.DefaultID()
		mtc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mtc *MyTodoCreate) check() error {
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MyTodo.created_at"`)}
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MyTodo.updated_at"`)}
	}
	if _, ok := mtc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "MyTodo.deleted_at"`)}
	}
	if _, ok := mtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MyTodo.name"`)}
	}
	return nil
}

func (mtc *MyTodoCreate) sqlSave(ctx context.Context) (*MyTodo, error) {
	if err := mtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mtc.mutation.id = &_node.ID
	mtc.mutation.done = true
	return _node, nil
}

func (mtc *MyTodoCreate) createSpec() (*MyTodo, *sqlgraph.CreateSpec) {
	var (
		_node = &MyTodo{config: mtc.config}
		_spec = sqlgraph.NewCreateSpec(mytodo.Table, sqlgraph.NewFieldSpec(mytodo.FieldID, field.TypeString))
	)
	_spec.Schema = mtc.schemaConfig.MyTodo
	_spec.OnConflict = mtc.conflict
	if id, ok := mtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mtc.mutation.CreatedAt(); ok {
		_spec.SetField(mytodo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mtc.mutation.UpdatedAt(); ok {
		_spec.SetField(mytodo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mtc.mutation.DeletedAt(); ok {
		_spec.SetField(mytodo.FieldDeletedAt, field.TypeInt, value)
		_node.DeletedAt = value
	}
	if value, ok := mtc.mutation.Name(); ok {
		_spec.SetField(mytodo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MyTodo.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MyTodoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mtc *MyTodoCreate) OnConflict(opts ...sql.ConflictOption) *MyTodoUpsertOne {
	mtc.conflict = opts
	return &MyTodoUpsertOne{
		create: mtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MyTodo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mtc *MyTodoCreate) OnConflictColumns(columns ...string) *MyTodoUpsertOne {
	mtc.conflict = append(mtc.conflict, sql.ConflictColumns(columns...))
	return &MyTodoUpsertOne{
		create: mtc,
	}
}

type (
	// MyTodoUpsertOne is the builder for "upsert"-ing
	//  one MyTodo node.
	MyTodoUpsertOne struct {
		create *MyTodoCreate
	}

	// MyTodoUpsert is the "OnConflict" setter.
	MyTodoUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *MyTodoUpsert) SetCreatedAt(v time.Time) *MyTodoUpsert {
	u.Set(mytodo.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MyTodoUpsert) UpdateCreatedAt() *MyTodoUpsert {
	u.SetExcluded(mytodo.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MyTodoUpsert) SetUpdatedAt(v time.Time) *MyTodoUpsert {
	u.Set(mytodo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MyTodoUpsert) UpdateUpdatedAt() *MyTodoUpsert {
	u.SetExcluded(mytodo.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MyTodoUpsert) SetDeletedAt(v int) *MyTodoUpsert {
	u.Set(mytodo.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MyTodoUpsert) UpdateDeletedAt() *MyTodoUpsert {
	u.SetExcluded(mytodo.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MyTodoUpsert) AddDeletedAt(v int) *MyTodoUpsert {
	u.Add(mytodo.FieldDeletedAt, v)
	return u
}

// SetName sets the "name" field.
func (u *MyTodoUpsert) SetName(v string) *MyTodoUpsert {
	u.Set(mytodo.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MyTodoUpsert) UpdateName() *MyTodoUpsert {
	u.SetExcluded(mytodo.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MyTodo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mytodo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MyTodoUpsertOne) UpdateNewValues() *MyTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mytodo.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MyTodo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MyTodoUpsertOne) Ignore() *MyTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MyTodoUpsertOne) DoNothing() *MyTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MyTodoCreate.OnConflict
// documentation for more info.
func (u *MyTodoUpsertOne) Update(set func(*MyTodoUpsert)) *MyTodoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MyTodoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MyTodoUpsertOne) SetCreatedAt(v time.Time) *MyTodoUpsertOne {
	return u.Update(func(s *MyTodoUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MyTodoUpsertOne) UpdateCreatedAt() *MyTodoUpsertOne {
	return u.Update(func(s *MyTodoUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MyTodoUpsertOne) SetUpdatedAt(v time.Time) *MyTodoUpsertOne {
	return u.Update(func(s *MyTodoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MyTodoUpsertOne) UpdateUpdatedAt() *MyTodoUpsertOne {
	return u.Update(func(s *MyTodoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MyTodoUpsertOne) SetDeletedAt(v int) *MyTodoUpsertOne {
	return u.Update(func(s *MyTodoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MyTodoUpsertOne) AddDeletedAt(v int) *MyTodoUpsertOne {
	return u.Update(func(s *MyTodoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MyTodoUpsertOne) UpdateDeletedAt() *MyTodoUpsertOne {
	return u.Update(func(s *MyTodoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *MyTodoUpsertOne) SetName(v string) *MyTodoUpsertOne {
	return u.Update(func(s *MyTodoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MyTodoUpsertOne) UpdateName() *MyTodoUpsertOne {
	return u.Update(func(s *MyTodoUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *MyTodoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MyTodoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MyTodoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MyTodoUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MyTodoUpsertOne.ID is not supported by MySQL driver. Use MyTodoUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MyTodoUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MyTodoCreateBulk is the builder for creating many MyTodo entities in bulk.
type MyTodoCreateBulk struct {
	config
	err      error
	builders []*MyTodoCreate
	conflict []sql.ConflictOption
}

// Save creates the MyTodo entities in the database.
func (mtcb *MyTodoCreateBulk) Save(ctx context.Context) ([]*MyTodo, error) {
	if mtcb.err != nil {
		return nil, mtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mtcb.builders))
	nodes := make([]*MyTodo, len(mtcb.builders))
	mutators := make([]Mutator, len(mtcb.builders))
	for i := range mtcb.builders {
		func(i int, root context.Context) {
			builder := mtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MyTodoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mtcb *MyTodoCreateBulk) SaveX(ctx context.Context) []*MyTodo {
	v, err := mtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtcb *MyTodoCreateBulk) Exec(ctx context.Context) error {
	_, err := mtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtcb *MyTodoCreateBulk) ExecX(ctx context.Context) {
	if err := mtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MyTodo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MyTodoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mtcb *MyTodoCreateBulk) OnConflict(opts ...sql.ConflictOption) *MyTodoUpsertBulk {
	mtcb.conflict = opts
	return &MyTodoUpsertBulk{
		create: mtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MyTodo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mtcb *MyTodoCreateBulk) OnConflictColumns(columns ...string) *MyTodoUpsertBulk {
	mtcb.conflict = append(mtcb.conflict, sql.ConflictColumns(columns...))
	return &MyTodoUpsertBulk{
		create: mtcb,
	}
}

// MyTodoUpsertBulk is the builder for "upsert"-ing
// a bulk of MyTodo nodes.
type MyTodoUpsertBulk struct {
	create *MyTodoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MyTodo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mytodo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MyTodoUpsertBulk) UpdateNewValues() *MyTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mytodo.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MyTodo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MyTodoUpsertBulk) Ignore() *MyTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MyTodoUpsertBulk) DoNothing() *MyTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MyTodoCreateBulk.OnConflict
// documentation for more info.
func (u *MyTodoUpsertBulk) Update(set func(*MyTodoUpsert)) *MyTodoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MyTodoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MyTodoUpsertBulk) SetCreatedAt(v time.Time) *MyTodoUpsertBulk {
	return u.Update(func(s *MyTodoUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MyTodoUpsertBulk) UpdateCreatedAt() *MyTodoUpsertBulk {
	return u.Update(func(s *MyTodoUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MyTodoUpsertBulk) SetUpdatedAt(v time.Time) *MyTodoUpsertBulk {
	return u.Update(func(s *MyTodoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MyTodoUpsertBulk) UpdateUpdatedAt() *MyTodoUpsertBulk {
	return u.Update(func(s *MyTodoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MyTodoUpsertBulk) SetDeletedAt(v int) *MyTodoUpsertBulk {
	return u.Update(func(s *MyTodoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MyTodoUpsertBulk) AddDeletedAt(v int) *MyTodoUpsertBulk {
	return u.Update(func(s *MyTodoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MyTodoUpsertBulk) UpdateDeletedAt() *MyTodoUpsertBulk {
	return u.Update(func(s *MyTodoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *MyTodoUpsertBulk) SetName(v string) *MyTodoUpsertBulk {
	return u.Update(func(s *MyTodoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MyTodoUpsertBulk) UpdateName() *MyTodoUpsertBulk {
	return u.Update(func(s *MyTodoUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *MyTodoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MyTodoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MyTodoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MyTodoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
