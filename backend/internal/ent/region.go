// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gva/app/database/schema/xid"
	"github.com/gva/internal/ent/region"
)

// Region is the model entity for the Region schema.
type Region struct {
	config `json:"-" rql:"-"`
	// ID of the ent.
	ID xid.ID `json:"id" rql:"filter,sort"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty" rql:"filter,sort"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt int `json:"-"`
	// IsEnable holds the value of the "is_enable" field.
	IsEnable bool `json:"isEnable"  rql:"filter,sort"`
	// NameID holds the value of the "name_id" field.
	NameID string `json:"nameId" rql:"column=name_id,filter,sort"`
	// Name holds the value of the "name" field.
	Name string `json:"name" rql:"column=name,filter,sort"`
	// Type holds the value of the "type" field.
	Type region.Type `json:"type" rql:"column=name,filter,sort"`
	// Pid holds the value of the "pid" field.
	Pid *xid.ID `json:"pid,omitempty" rql:"filter,sort"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RegionQuery when eager-loading is set.
	Edges        RegionEdges `json:"edges" rql:"-"`
	selectValues sql.SelectValues
}

// RegionEdges holds the relations/edges for other nodes in the graph.
type RegionEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Region `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Region `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedChildren map[string][]*Region
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RegionEdges) ParentOrErr() (*Region, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: region.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) ChildrenOrErr() ([]*Region, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Region) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case region.FieldPid:
			values[i] = &sql.NullScanner{S: new(xid.ID)}
		case region.FieldIsEnable:
			values[i] = new(sql.NullBool)
		case region.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case region.FieldNameID, region.FieldName, region.FieldType:
			values[i] = new(sql.NullString)
		case region.FieldCreatedAt, region.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case region.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Region fields.
func (r *Region) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case region.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case region.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case region.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case region.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = int(value.Int64)
			}
		case region.FieldIsEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enable", values[i])
			} else if value.Valid {
				r.IsEnable = value.Bool
			}
		case region.FieldNameID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_id", values[i])
			} else if value.Valid {
				r.NameID = value.String
			}
		case region.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case region.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = region.Type(value.String)
			}
		case region.FieldPid:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				r.Pid = new(xid.ID)
				*r.Pid = *value.S.(*xid.ID)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Region.
// This includes values selected through modifiers, order, etc.
func (r *Region) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Region entity.
func (r *Region) QueryParent() *RegionQuery {
	return NewRegionClient(r.config).QueryParent(r)
}

// QueryChildren queries the "children" edge of the Region entity.
func (r *Region) QueryChildren() *RegionQuery {
	return NewRegionClient(r.config).QueryChildren(r)
}

// Update returns a builder for updating this Region.
// Note that you need to call Region.Unwrap() before calling this method if this Region
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Region) Update() *RegionUpdateOne {
	return NewRegionClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Region entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Region) Unwrap() *Region {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Region is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Region) String() string {
	var builder strings.Builder
	builder.WriteString("Region(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", r.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("is_enable=")
	builder.WriteString(fmt.Sprintf("%v", r.IsEnable))
	builder.WriteString(", ")
	builder.WriteString("name_id=")
	builder.WriteString(r.NameID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	if v := r.Pid; v != nil {
		builder.WriteString("pid=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedChildren(name string) ([]*Region, error) {
	if r.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedChildren(name string, edges ...*Region) {
	if r.Edges.namedChildren == nil {
		r.Edges.namedChildren = make(map[string][]*Region)
	}
	if len(edges) == 0 {
		r.Edges.namedChildren[name] = []*Region{}
	} else {
		r.Edges.namedChildren[name] = append(r.Edges.namedChildren[name], edges...)
	}
}

// Regions is a parsable slice of Region.
type Regions []*Region
