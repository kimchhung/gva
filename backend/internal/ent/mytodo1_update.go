// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gva/internal/ent/mytodo1"
	"github.com/gva/internal/ent/predicate"

	"github.com/gva/internal/ent/internal"
)

// MyTodo1Update is the builder for updating MyTodo1 entities.
type MyTodo1Update struct {
	config
	hooks     []Hook
	mutation  *MyTodo1Mutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MyTodo1Update builder.
func (mt *MyTodo1Update) Where(ps ...predicate.MyTodo1) *MyTodo1Update {
	mt.mutation.Where(ps...)
	return mt
}

// SetCreatedAt sets the "created_at" field.
func (mt *MyTodo1Update) SetCreatedAt(t time.Time) *MyTodo1Update {
	mt.mutation.SetCreatedAt(t)
	return mt
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mt *MyTodo1Update) SetNillableCreatedAt(t *time.Time) *MyTodo1Update {
	if t != nil {
		mt.SetCreatedAt(*t)
	}
	return mt
}

// SetUpdatedAt sets the "updated_at" field.
func (mt *MyTodo1Update) SetUpdatedAt(t time.Time) *MyTodo1Update {
	mt.mutation.SetUpdatedAt(t)
	return mt
}

// SetDeletedAt sets the "deleted_at" field.
func (mt *MyTodo1Update) SetDeletedAt(i int) *MyTodo1Update {
	mt.mutation.ResetDeletedAt()
	mt.mutation.SetDeletedAt(i)
	return mt
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mt *MyTodo1Update) SetNillableDeletedAt(i *int) *MyTodo1Update {
	if i != nil {
		mt.SetDeletedAt(*i)
	}
	return mt
}

// AddDeletedAt adds i to the "deleted_at" field.
func (mt *MyTodo1Update) AddDeletedAt(i int) *MyTodo1Update {
	mt.mutation.AddDeletedAt(i)
	return mt
}

// SetName sets the "name" field.
func (mt *MyTodo1Update) SetName(s string) *MyTodo1Update {
	mt.mutation.SetName(s)
	return mt
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mt *MyTodo1Update) SetNillableName(s *string) *MyTodo1Update {
	if s != nil {
		mt.SetName(*s)
	}
	return mt
}

// Mutation returns the MyTodo1Mutation object of the builder.
func (mt *MyTodo1Update) Mutation() *MyTodo1Mutation {
	return mt.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mt *MyTodo1Update) Save(ctx context.Context) (int, error) {
	if err := mt.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, mt.sqlSave, mt.mutation, mt.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mt *MyTodo1Update) SaveX(ctx context.Context) int {
	affected, err := mt.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mt *MyTodo1Update) Exec(ctx context.Context) error {
	_, err := mt.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mt *MyTodo1Update) ExecX(ctx context.Context) {
	if err := mt.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mt *MyTodo1Update) defaults() error {
	if _, ok := mt.mutation.UpdatedAt(); !ok {
		if mytodo1.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized mytodo1.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := mytodo1.UpdateDefaultUpdatedAt()
		mt.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mt *MyTodo1Update) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MyTodo1Update {
	mt.modifiers = append(mt.modifiers, modifiers...)
	return mt
}

func (mt *MyTodo1Update) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mytodo1.Table, mytodo1.Columns, sqlgraph.NewFieldSpec(mytodo1.FieldID, field.TypeString))
	if ps := mt.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mt.mutation.CreatedAt(); ok {
		_spec.SetField(mytodo1.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mt.mutation.UpdatedAt(); ok {
		_spec.SetField(mytodo1.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mt.mutation.DeletedAt(); ok {
		_spec.SetField(mytodo1.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := mt.mutation.AddedDeletedAt(); ok {
		_spec.AddField(mytodo1.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := mt.mutation.Name(); ok {
		_spec.SetField(mytodo1.FieldName, field.TypeString, value)
	}
	_spec.Node.Schema = mt.schemaConfig.MyTodo1
	ctx = internal.NewSchemaConfigContext(ctx, mt.schemaConfig)
	_spec.AddModifiers(mt.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mt.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mytodo1.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mt.mutation.done = true
	return n, nil
}

// MyTodo1UpdateOne is the builder for updating a single MyTodo1 entity.
type MyTodo1UpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MyTodo1Mutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (mto *MyTodo1UpdateOne) SetCreatedAt(t time.Time) *MyTodo1UpdateOne {
	mto.mutation.SetCreatedAt(t)
	return mto
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mto *MyTodo1UpdateOne) SetNillableCreatedAt(t *time.Time) *MyTodo1UpdateOne {
	if t != nil {
		mto.SetCreatedAt(*t)
	}
	return mto
}

// SetUpdatedAt sets the "updated_at" field.
func (mto *MyTodo1UpdateOne) SetUpdatedAt(t time.Time) *MyTodo1UpdateOne {
	mto.mutation.SetUpdatedAt(t)
	return mto
}

// SetDeletedAt sets the "deleted_at" field.
func (mto *MyTodo1UpdateOne) SetDeletedAt(i int) *MyTodo1UpdateOne {
	mto.mutation.ResetDeletedAt()
	mto.mutation.SetDeletedAt(i)
	return mto
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mto *MyTodo1UpdateOne) SetNillableDeletedAt(i *int) *MyTodo1UpdateOne {
	if i != nil {
		mto.SetDeletedAt(*i)
	}
	return mto
}

// AddDeletedAt adds i to the "deleted_at" field.
func (mto *MyTodo1UpdateOne) AddDeletedAt(i int) *MyTodo1UpdateOne {
	mto.mutation.AddDeletedAt(i)
	return mto
}

// SetName sets the "name" field.
func (mto *MyTodo1UpdateOne) SetName(s string) *MyTodo1UpdateOne {
	mto.mutation.SetName(s)
	return mto
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mto *MyTodo1UpdateOne) SetNillableName(s *string) *MyTodo1UpdateOne {
	if s != nil {
		mto.SetName(*s)
	}
	return mto
}

// Mutation returns the MyTodo1Mutation object of the builder.
func (mto *MyTodo1UpdateOne) Mutation() *MyTodo1Mutation {
	return mto.mutation
}

// Where appends a list predicates to the MyTodo1Update builder.
func (mto *MyTodo1UpdateOne) Where(ps ...predicate.MyTodo1) *MyTodo1UpdateOne {
	mto.mutation.Where(ps...)
	return mto
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mto *MyTodo1UpdateOne) Select(field string, fields ...string) *MyTodo1UpdateOne {
	mto.fields = append([]string{field}, fields...)
	return mto
}

// Save executes the query and returns the updated MyTodo1 entity.
func (mto *MyTodo1UpdateOne) Save(ctx context.Context) (*MyTodo1, error) {
	if err := mto.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mto.sqlSave, mto.mutation, mto.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mto *MyTodo1UpdateOne) SaveX(ctx context.Context) *MyTodo1 {
	node, err := mto.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mto *MyTodo1UpdateOne) Exec(ctx context.Context) error {
	_, err := mto.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mto *MyTodo1UpdateOne) ExecX(ctx context.Context) {
	if err := mto.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mto *MyTodo1UpdateOne) defaults() error {
	if _, ok := mto.mutation.UpdatedAt(); !ok {
		if mytodo1.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized mytodo1.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := mytodo1.UpdateDefaultUpdatedAt()
		mto.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mto *MyTodo1UpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MyTodo1UpdateOne {
	mto.modifiers = append(mto.modifiers, modifiers...)
	return mto
}

func (mto *MyTodo1UpdateOne) sqlSave(ctx context.Context) (_node *MyTodo1, err error) {
	_spec := sqlgraph.NewUpdateSpec(mytodo1.Table, mytodo1.Columns, sqlgraph.NewFieldSpec(mytodo1.FieldID, field.TypeString))
	id, ok := mto.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MyTodo1.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mto.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mytodo1.FieldID)
		for _, f := range fields {
			if !mytodo1.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mytodo1.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mto.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mto.mutation.CreatedAt(); ok {
		_spec.SetField(mytodo1.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mto.mutation.UpdatedAt(); ok {
		_spec.SetField(mytodo1.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mto.mutation.DeletedAt(); ok {
		_spec.SetField(mytodo1.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := mto.mutation.AddedDeletedAt(); ok {
		_spec.AddField(mytodo1.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := mto.mutation.Name(); ok {
		_spec.SetField(mytodo1.FieldName, field.TypeString, value)
	}
	_spec.Node.Schema = mto.schemaConfig.MyTodo1
	ctx = internal.NewSchemaConfigContext(ctx, mto.schemaConfig)
	_spec.AddModifiers(mto.modifiers...)
	_node = &MyTodo1{config: mto.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mto.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mytodo1.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mto.mutation.done = true
	return _node, nil
}
