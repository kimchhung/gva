// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/gva/internal/ent/admin"
	"github.com/gva/internal/ent/comic"
	"github.com/gva/internal/ent/comicchapter"
	"github.com/gva/internal/ent/comicimg"
	"github.com/gva/internal/ent/genre"
	"github.com/gva/internal/ent/permission"
	"github.com/gva/internal/ent/role"
	"github.com/gva/internal/ent/route"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[string]
	PageInfo       = entgql.PageInfo[string]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AdminEdge is the edge representation of Admin.
type AdminEdge struct {
	Node   *Admin `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// AdminConnection is the connection containing edges to Admin.
type AdminConnection struct {
	Edges      []*AdminEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *AdminConnection) build(nodes []*Admin, pager *adminPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Admin
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Admin {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Admin {
			return nodes[i]
		}
	}
	c.Edges = make([]*AdminEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AdminEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AdminPaginateOption enables pagination customization.
type AdminPaginateOption func(*adminPager) error

// WithAdminOrder configures pagination ordering.
func WithAdminOrder(order *AdminOrder) AdminPaginateOption {
	if order == nil {
		order = DefaultAdminOrder
	}
	o := *order
	return func(pager *adminPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAdminOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAdminFilter configures pagination filter.
func WithAdminFilter(filter func(*AdminQuery) (*AdminQuery, error)) AdminPaginateOption {
	return func(pager *adminPager) error {
		if filter == nil {
			return errors.New("AdminQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type adminPager struct {
	reverse bool
	order   *AdminOrder
	filter  func(*AdminQuery) (*AdminQuery, error)
}

func newAdminPager(opts []AdminPaginateOption, reverse bool) (*adminPager, error) {
	pager := &adminPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAdminOrder
	}
	return pager, nil
}

func (p *adminPager) applyFilter(query *AdminQuery) (*AdminQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *adminPager) toCursor(a *Admin) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *adminPager) applyCursors(query *AdminQuery, after, before *Cursor) (*AdminQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAdminOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *adminPager) applyOrder(query *AdminQuery) *AdminQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAdminOrder.Field {
		query = query.Order(DefaultAdminOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *adminPager) orderExpr(query *AdminQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAdminOrder.Field {
			b.Comma().Ident(DefaultAdminOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Admin.
func (a *AdminQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AdminPaginateOption,
) (*AdminConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAdminPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AdminConnection{Edges: []*AdminEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := a.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AdminOrderFieldCreatedAt orders Admin by created_at.
	AdminOrderFieldCreatedAt = &AdminOrderField{
		Value: func(a *Admin) (ent.Value, error) {
			return a.CreatedAt, nil
		},
		column: admin.FieldCreatedAt,
		toTerm: admin.ByCreatedAt,
		toCursor: func(a *Admin) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AdminOrderField) String() string {
	var str string
	switch f.column {
	case AdminOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AdminOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AdminOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AdminOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AdminOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AdminOrderField", str)
	}
	return nil
}

// AdminOrderField defines the ordering field of Admin.
type AdminOrderField struct {
	// Value extracts the ordering value from the given Admin.
	Value    func(*Admin) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) admin.OrderOption
	toCursor func(*Admin) Cursor
}

// AdminOrder defines the ordering of Admin.
type AdminOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *AdminOrderField `json:"field"`
}

// DefaultAdminOrder is the default ordering of Admin.
var DefaultAdminOrder = &AdminOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AdminOrderField{
		Value: func(a *Admin) (ent.Value, error) {
			return a.ID, nil
		},
		column: admin.FieldID,
		toTerm: admin.ByID,
		toCursor: func(a *Admin) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Admin into AdminEdge.
func (a *Admin) ToEdge(order *AdminOrder) *AdminEdge {
	if order == nil {
		order = DefaultAdminOrder
	}
	return &AdminEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// ComicEdge is the edge representation of Comic.
type ComicEdge struct {
	Node   *Comic `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ComicConnection is the connection containing edges to Comic.
type ComicConnection struct {
	Edges      []*ComicEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *ComicConnection) build(nodes []*Comic, pager *comicPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Comic
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Comic {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Comic {
			return nodes[i]
		}
	}
	c.Edges = make([]*ComicEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ComicEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ComicPaginateOption enables pagination customization.
type ComicPaginateOption func(*comicPager) error

// WithComicOrder configures pagination ordering.
func WithComicOrder(order *ComicOrder) ComicPaginateOption {
	if order == nil {
		order = DefaultComicOrder
	}
	o := *order
	return func(pager *comicPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultComicOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithComicFilter configures pagination filter.
func WithComicFilter(filter func(*ComicQuery) (*ComicQuery, error)) ComicPaginateOption {
	return func(pager *comicPager) error {
		if filter == nil {
			return errors.New("ComicQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type comicPager struct {
	reverse bool
	order   *ComicOrder
	filter  func(*ComicQuery) (*ComicQuery, error)
}

func newComicPager(opts []ComicPaginateOption, reverse bool) (*comicPager, error) {
	pager := &comicPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultComicOrder
	}
	return pager, nil
}

func (p *comicPager) applyFilter(query *ComicQuery) (*ComicQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *comicPager) toCursor(c *Comic) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *comicPager) applyCursors(query *ComicQuery, after, before *Cursor) (*ComicQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultComicOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *comicPager) applyOrder(query *ComicQuery) *ComicQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultComicOrder.Field {
		query = query.Order(DefaultComicOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *comicPager) orderExpr(query *ComicQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultComicOrder.Field {
			b.Comma().Ident(DefaultComicOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Comic.
func (c *ComicQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ComicPaginateOption,
) (*ComicConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newComicPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &ComicConnection{Edges: []*ComicEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ComicOrderFieldCreatedAt orders Comic by created_at.
	ComicOrderFieldCreatedAt = &ComicOrderField{
		Value: func(c *Comic) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: comic.FieldCreatedAt,
		toTerm: comic.ByCreatedAt,
		toCursor: func(c *Comic) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ComicOrderField) String() string {
	var str string
	switch f.column {
	case ComicOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ComicOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ComicOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ComicOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ComicOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid ComicOrderField", str)
	}
	return nil
}

// ComicOrderField defines the ordering field of Comic.
type ComicOrderField struct {
	// Value extracts the ordering value from the given Comic.
	Value    func(*Comic) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) comic.OrderOption
	toCursor func(*Comic) Cursor
}

// ComicOrder defines the ordering of Comic.
type ComicOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *ComicOrderField `json:"field"`
}

// DefaultComicOrder is the default ordering of Comic.
var DefaultComicOrder = &ComicOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ComicOrderField{
		Value: func(c *Comic) (ent.Value, error) {
			return c.ID, nil
		},
		column: comic.FieldID,
		toTerm: comic.ByID,
		toCursor: func(c *Comic) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Comic into ComicEdge.
func (c *Comic) ToEdge(order *ComicOrder) *ComicEdge {
	if order == nil {
		order = DefaultComicOrder
	}
	return &ComicEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// ComicChapterEdge is the edge representation of ComicChapter.
type ComicChapterEdge struct {
	Node   *ComicChapter `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// ComicChapterConnection is the connection containing edges to ComicChapter.
type ComicChapterConnection struct {
	Edges      []*ComicChapterEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *ComicChapterConnection) build(nodes []*ComicChapter, pager *comicchapterPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ComicChapter
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ComicChapter {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ComicChapter {
			return nodes[i]
		}
	}
	c.Edges = make([]*ComicChapterEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ComicChapterEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ComicChapterPaginateOption enables pagination customization.
type ComicChapterPaginateOption func(*comicchapterPager) error

// WithComicChapterOrder configures pagination ordering.
func WithComicChapterOrder(order *ComicChapterOrder) ComicChapterPaginateOption {
	if order == nil {
		order = DefaultComicChapterOrder
	}
	o := *order
	return func(pager *comicchapterPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultComicChapterOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithComicChapterFilter configures pagination filter.
func WithComicChapterFilter(filter func(*ComicChapterQuery) (*ComicChapterQuery, error)) ComicChapterPaginateOption {
	return func(pager *comicchapterPager) error {
		if filter == nil {
			return errors.New("ComicChapterQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type comicchapterPager struct {
	reverse bool
	order   *ComicChapterOrder
	filter  func(*ComicChapterQuery) (*ComicChapterQuery, error)
}

func newComicChapterPager(opts []ComicChapterPaginateOption, reverse bool) (*comicchapterPager, error) {
	pager := &comicchapterPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultComicChapterOrder
	}
	return pager, nil
}

func (p *comicchapterPager) applyFilter(query *ComicChapterQuery) (*ComicChapterQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *comicchapterPager) toCursor(cc *ComicChapter) Cursor {
	return p.order.Field.toCursor(cc)
}

func (p *comicchapterPager) applyCursors(query *ComicChapterQuery, after, before *Cursor) (*ComicChapterQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultComicChapterOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *comicchapterPager) applyOrder(query *ComicChapterQuery) *ComicChapterQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultComicChapterOrder.Field {
		query = query.Order(DefaultComicChapterOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *comicchapterPager) orderExpr(query *ComicChapterQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultComicChapterOrder.Field {
			b.Comma().Ident(DefaultComicChapterOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ComicChapter.
func (cc *ComicChapterQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ComicChapterPaginateOption,
) (*ComicChapterConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newComicChapterPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cc, err = pager.applyFilter(cc); err != nil {
		return nil, err
	}
	conn := &ComicChapterConnection{Edges: []*ComicChapterEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := cc.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cc, err = pager.applyCursors(cc, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		cc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cc.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cc = pager.applyOrder(cc)
	nodes, err := cc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ComicChapterOrderFieldCreatedAt orders ComicChapter by created_at.
	ComicChapterOrderFieldCreatedAt = &ComicChapterOrderField{
		Value: func(cc *ComicChapter) (ent.Value, error) {
			return cc.CreatedAt, nil
		},
		column: comicchapter.FieldCreatedAt,
		toTerm: comicchapter.ByCreatedAt,
		toCursor: func(cc *ComicChapter) Cursor {
			return Cursor{
				ID:    cc.ID,
				Value: cc.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ComicChapterOrderField) String() string {
	var str string
	switch f.column {
	case ComicChapterOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ComicChapterOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ComicChapterOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ComicChapterOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ComicChapterOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid ComicChapterOrderField", str)
	}
	return nil
}

// ComicChapterOrderField defines the ordering field of ComicChapter.
type ComicChapterOrderField struct {
	// Value extracts the ordering value from the given ComicChapter.
	Value    func(*ComicChapter) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) comicchapter.OrderOption
	toCursor func(*ComicChapter) Cursor
}

// ComicChapterOrder defines the ordering of ComicChapter.
type ComicChapterOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *ComicChapterOrderField `json:"field"`
}

// DefaultComicChapterOrder is the default ordering of ComicChapter.
var DefaultComicChapterOrder = &ComicChapterOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ComicChapterOrderField{
		Value: func(cc *ComicChapter) (ent.Value, error) {
			return cc.ID, nil
		},
		column: comicchapter.FieldID,
		toTerm: comicchapter.ByID,
		toCursor: func(cc *ComicChapter) Cursor {
			return Cursor{ID: cc.ID}
		},
	},
}

// ToEdge converts ComicChapter into ComicChapterEdge.
func (cc *ComicChapter) ToEdge(order *ComicChapterOrder) *ComicChapterEdge {
	if order == nil {
		order = DefaultComicChapterOrder
	}
	return &ComicChapterEdge{
		Node:   cc,
		Cursor: order.Field.toCursor(cc),
	}
}

// ComicImgEdge is the edge representation of ComicImg.
type ComicImgEdge struct {
	Node   *ComicImg `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ComicImgConnection is the connection containing edges to ComicImg.
type ComicImgConnection struct {
	Edges      []*ComicImgEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *ComicImgConnection) build(nodes []*ComicImg, pager *comicimgPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ComicImg
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ComicImg {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ComicImg {
			return nodes[i]
		}
	}
	c.Edges = make([]*ComicImgEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ComicImgEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ComicImgPaginateOption enables pagination customization.
type ComicImgPaginateOption func(*comicimgPager) error

// WithComicImgOrder configures pagination ordering.
func WithComicImgOrder(order *ComicImgOrder) ComicImgPaginateOption {
	if order == nil {
		order = DefaultComicImgOrder
	}
	o := *order
	return func(pager *comicimgPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultComicImgOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithComicImgFilter configures pagination filter.
func WithComicImgFilter(filter func(*ComicImgQuery) (*ComicImgQuery, error)) ComicImgPaginateOption {
	return func(pager *comicimgPager) error {
		if filter == nil {
			return errors.New("ComicImgQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type comicimgPager struct {
	reverse bool
	order   *ComicImgOrder
	filter  func(*ComicImgQuery) (*ComicImgQuery, error)
}

func newComicImgPager(opts []ComicImgPaginateOption, reverse bool) (*comicimgPager, error) {
	pager := &comicimgPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultComicImgOrder
	}
	return pager, nil
}

func (p *comicimgPager) applyFilter(query *ComicImgQuery) (*ComicImgQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *comicimgPager) toCursor(ci *ComicImg) Cursor {
	return p.order.Field.toCursor(ci)
}

func (p *comicimgPager) applyCursors(query *ComicImgQuery, after, before *Cursor) (*ComicImgQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultComicImgOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *comicimgPager) applyOrder(query *ComicImgQuery) *ComicImgQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultComicImgOrder.Field {
		query = query.Order(DefaultComicImgOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *comicimgPager) orderExpr(query *ComicImgQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultComicImgOrder.Field {
			b.Comma().Ident(DefaultComicImgOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ComicImg.
func (ci *ComicImgQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ComicImgPaginateOption,
) (*ComicImgConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newComicImgPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ci, err = pager.applyFilter(ci); err != nil {
		return nil, err
	}
	conn := &ComicImgConnection{Edges: []*ComicImgEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ci.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ci, err = pager.applyCursors(ci, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ci.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ci.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ci = pager.applyOrder(ci)
	nodes, err := ci.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ComicImgOrderFieldCreatedAt orders ComicImg by created_at.
	ComicImgOrderFieldCreatedAt = &ComicImgOrderField{
		Value: func(ci *ComicImg) (ent.Value, error) {
			return ci.CreatedAt, nil
		},
		column: comicimg.FieldCreatedAt,
		toTerm: comicimg.ByCreatedAt,
		toCursor: func(ci *ComicImg) Cursor {
			return Cursor{
				ID:    ci.ID,
				Value: ci.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ComicImgOrderField) String() string {
	var str string
	switch f.column {
	case ComicImgOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ComicImgOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ComicImgOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ComicImgOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ComicImgOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid ComicImgOrderField", str)
	}
	return nil
}

// ComicImgOrderField defines the ordering field of ComicImg.
type ComicImgOrderField struct {
	// Value extracts the ordering value from the given ComicImg.
	Value    func(*ComicImg) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) comicimg.OrderOption
	toCursor func(*ComicImg) Cursor
}

// ComicImgOrder defines the ordering of ComicImg.
type ComicImgOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ComicImgOrderField `json:"field"`
}

// DefaultComicImgOrder is the default ordering of ComicImg.
var DefaultComicImgOrder = &ComicImgOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ComicImgOrderField{
		Value: func(ci *ComicImg) (ent.Value, error) {
			return ci.ID, nil
		},
		column: comicimg.FieldID,
		toTerm: comicimg.ByID,
		toCursor: func(ci *ComicImg) Cursor {
			return Cursor{ID: ci.ID}
		},
	},
}

// ToEdge converts ComicImg into ComicImgEdge.
func (ci *ComicImg) ToEdge(order *ComicImgOrder) *ComicImgEdge {
	if order == nil {
		order = DefaultComicImgOrder
	}
	return &ComicImgEdge{
		Node:   ci,
		Cursor: order.Field.toCursor(ci),
	}
}

// GenreEdge is the edge representation of Genre.
type GenreEdge struct {
	Node   *Genre `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// GenreConnection is the connection containing edges to Genre.
type GenreConnection struct {
	Edges      []*GenreEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *GenreConnection) build(nodes []*Genre, pager *genrePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Genre
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Genre {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Genre {
			return nodes[i]
		}
	}
	c.Edges = make([]*GenreEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GenreEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GenrePaginateOption enables pagination customization.
type GenrePaginateOption func(*genrePager) error

// WithGenreOrder configures pagination ordering.
func WithGenreOrder(order *GenreOrder) GenrePaginateOption {
	if order == nil {
		order = DefaultGenreOrder
	}
	o := *order
	return func(pager *genrePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGenreOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGenreFilter configures pagination filter.
func WithGenreFilter(filter func(*GenreQuery) (*GenreQuery, error)) GenrePaginateOption {
	return func(pager *genrePager) error {
		if filter == nil {
			return errors.New("GenreQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type genrePager struct {
	reverse bool
	order   *GenreOrder
	filter  func(*GenreQuery) (*GenreQuery, error)
}

func newGenrePager(opts []GenrePaginateOption, reverse bool) (*genrePager, error) {
	pager := &genrePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGenreOrder
	}
	return pager, nil
}

func (p *genrePager) applyFilter(query *GenreQuery) (*GenreQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *genrePager) toCursor(ge *Genre) Cursor {
	return p.order.Field.toCursor(ge)
}

func (p *genrePager) applyCursors(query *GenreQuery, after, before *Cursor) (*GenreQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultGenreOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *genrePager) applyOrder(query *GenreQuery) *GenreQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultGenreOrder.Field {
		query = query.Order(DefaultGenreOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *genrePager) orderExpr(query *GenreQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGenreOrder.Field {
			b.Comma().Ident(DefaultGenreOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Genre.
func (ge *GenreQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GenrePaginateOption,
) (*GenreConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGenrePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ge, err = pager.applyFilter(ge); err != nil {
		return nil, err
	}
	conn := &GenreConnection{Edges: []*GenreEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ge.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ge, err = pager.applyCursors(ge, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ge.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ge.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ge = pager.applyOrder(ge)
	nodes, err := ge.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// GenreOrderFieldCreatedAt orders Genre by created_at.
	GenreOrderFieldCreatedAt = &GenreOrderField{
		Value: func(ge *Genre) (ent.Value, error) {
			return ge.CreatedAt, nil
		},
		column: genre.FieldCreatedAt,
		toTerm: genre.ByCreatedAt,
		toCursor: func(ge *Genre) Cursor {
			return Cursor{
				ID:    ge.ID,
				Value: ge.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f GenreOrderField) String() string {
	var str string
	switch f.column {
	case GenreOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f GenreOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *GenreOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("GenreOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *GenreOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid GenreOrderField", str)
	}
	return nil
}

// GenreOrderField defines the ordering field of Genre.
type GenreOrderField struct {
	// Value extracts the ordering value from the given Genre.
	Value    func(*Genre) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) genre.OrderOption
	toCursor func(*Genre) Cursor
}

// GenreOrder defines the ordering of Genre.
type GenreOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *GenreOrderField `json:"field"`
}

// DefaultGenreOrder is the default ordering of Genre.
var DefaultGenreOrder = &GenreOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &GenreOrderField{
		Value: func(ge *Genre) (ent.Value, error) {
			return ge.ID, nil
		},
		column: genre.FieldID,
		toTerm: genre.ByID,
		toCursor: func(ge *Genre) Cursor {
			return Cursor{ID: ge.ID}
		},
	},
}

// ToEdge converts Genre into GenreEdge.
func (ge *Genre) ToEdge(order *GenreOrder) *GenreEdge {
	if order == nil {
		order = DefaultGenreOrder
	}
	return &GenreEdge{
		Node:   ge,
		Cursor: order.Field.toCursor(ge),
	}
}

// PermissionEdge is the edge representation of Permission.
type PermissionEdge struct {
	Node   *Permission `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// PermissionConnection is the connection containing edges to Permission.
type PermissionConnection struct {
	Edges      []*PermissionEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *PermissionConnection) build(nodes []*Permission, pager *permissionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Permission
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Permission {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Permission {
			return nodes[i]
		}
	}
	c.Edges = make([]*PermissionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PermissionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PermissionPaginateOption enables pagination customization.
type PermissionPaginateOption func(*permissionPager) error

// WithPermissionOrder configures pagination ordering.
func WithPermissionOrder(order *PermissionOrder) PermissionPaginateOption {
	if order == nil {
		order = DefaultPermissionOrder
	}
	o := *order
	return func(pager *permissionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPermissionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPermissionFilter configures pagination filter.
func WithPermissionFilter(filter func(*PermissionQuery) (*PermissionQuery, error)) PermissionPaginateOption {
	return func(pager *permissionPager) error {
		if filter == nil {
			return errors.New("PermissionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type permissionPager struct {
	reverse bool
	order   *PermissionOrder
	filter  func(*PermissionQuery) (*PermissionQuery, error)
}

func newPermissionPager(opts []PermissionPaginateOption, reverse bool) (*permissionPager, error) {
	pager := &permissionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPermissionOrder
	}
	return pager, nil
}

func (p *permissionPager) applyFilter(query *PermissionQuery) (*PermissionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *permissionPager) toCursor(pe *Permission) Cursor {
	return p.order.Field.toCursor(pe)
}

func (p *permissionPager) applyCursors(query *PermissionQuery, after, before *Cursor) (*PermissionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPermissionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *permissionPager) applyOrder(query *PermissionQuery) *PermissionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPermissionOrder.Field {
		query = query.Order(DefaultPermissionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *permissionPager) orderExpr(query *PermissionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPermissionOrder.Field {
			b.Comma().Ident(DefaultPermissionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Permission.
func (pe *PermissionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PermissionPaginateOption,
) (*PermissionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPermissionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pe, err = pager.applyFilter(pe); err != nil {
		return nil, err
	}
	conn := &PermissionConnection{Edges: []*PermissionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pe.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pe, err = pager.applyCursors(pe, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pe.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pe.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pe = pager.applyOrder(pe)
	nodes, err := pe.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PermissionOrderFieldCreatedAt orders Permission by created_at.
	PermissionOrderFieldCreatedAt = &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.CreatedAt, nil
		},
		column: permission.FieldCreatedAt,
		toTerm: permission.ByCreatedAt,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{
				ID:    pe.ID,
				Value: pe.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PermissionOrderField) String() string {
	var str string
	switch f.column {
	case PermissionOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PermissionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PermissionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PermissionOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *PermissionOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid PermissionOrderField", str)
	}
	return nil
}

// PermissionOrderField defines the ordering field of Permission.
type PermissionOrderField struct {
	// Value extracts the ordering value from the given Permission.
	Value    func(*Permission) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) permission.OrderOption
	toCursor func(*Permission) Cursor
}

// PermissionOrder defines the ordering of Permission.
type PermissionOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *PermissionOrderField `json:"field"`
}

// DefaultPermissionOrder is the default ordering of Permission.
var DefaultPermissionOrder = &PermissionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.ID, nil
		},
		column: permission.FieldID,
		toTerm: permission.ByID,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{ID: pe.ID}
		},
	},
}

// ToEdge converts Permission into PermissionEdge.
func (pe *Permission) ToEdge(order *PermissionOrder) *PermissionEdge {
	if order == nil {
		order = DefaultPermissionOrder
	}
	return &PermissionEdge{
		Node:   pe,
		Cursor: order.Field.toCursor(pe),
	}
}

// RoleEdge is the edge representation of Role.
type RoleEdge struct {
	Node   *Role  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// RoleConnection is the connection containing edges to Role.
type RoleConnection struct {
	Edges      []*RoleEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *RoleConnection) build(nodes []*Role, pager *rolePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Role
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Role {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Role {
			return nodes[i]
		}
	}
	c.Edges = make([]*RoleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RoleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RolePaginateOption enables pagination customization.
type RolePaginateOption func(*rolePager) error

// WithRoleOrder configures pagination ordering.
func WithRoleOrder(order *RoleOrder) RolePaginateOption {
	if order == nil {
		order = DefaultRoleOrder
	}
	o := *order
	return func(pager *rolePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRoleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRoleFilter configures pagination filter.
func WithRoleFilter(filter func(*RoleQuery) (*RoleQuery, error)) RolePaginateOption {
	return func(pager *rolePager) error {
		if filter == nil {
			return errors.New("RoleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type rolePager struct {
	reverse bool
	order   *RoleOrder
	filter  func(*RoleQuery) (*RoleQuery, error)
}

func newRolePager(opts []RolePaginateOption, reverse bool) (*rolePager, error) {
	pager := &rolePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRoleOrder
	}
	return pager, nil
}

func (p *rolePager) applyFilter(query *RoleQuery) (*RoleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *rolePager) toCursor(r *Role) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *rolePager) applyCursors(query *RoleQuery, after, before *Cursor) (*RoleQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRoleOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *rolePager) applyOrder(query *RoleQuery) *RoleQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRoleOrder.Field {
		query = query.Order(DefaultRoleOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *rolePager) orderExpr(query *RoleQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRoleOrder.Field {
			b.Comma().Ident(DefaultRoleOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Role.
func (r *RoleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RolePaginateOption,
) (*RoleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRolePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RoleConnection{Edges: []*RoleEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := r.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RoleOrderFieldCreatedAt orders Role by created_at.
	RoleOrderFieldCreatedAt = &RoleOrderField{
		Value: func(r *Role) (ent.Value, error) {
			return r.CreatedAt, nil
		},
		column: role.FieldCreatedAt,
		toTerm: role.ByCreatedAt,
		toCursor: func(r *Role) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RoleOrderField) String() string {
	var str string
	switch f.column {
	case RoleOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RoleOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RoleOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RoleOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *RoleOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid RoleOrderField", str)
	}
	return nil
}

// RoleOrderField defines the ordering field of Role.
type RoleOrderField struct {
	// Value extracts the ordering value from the given Role.
	Value    func(*Role) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) role.OrderOption
	toCursor func(*Role) Cursor
}

// RoleOrder defines the ordering of Role.
type RoleOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *RoleOrderField `json:"field"`
}

// DefaultRoleOrder is the default ordering of Role.
var DefaultRoleOrder = &RoleOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RoleOrderField{
		Value: func(r *Role) (ent.Value, error) {
			return r.ID, nil
		},
		column: role.FieldID,
		toTerm: role.ByID,
		toCursor: func(r *Role) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Role into RoleEdge.
func (r *Role) ToEdge(order *RoleOrder) *RoleEdge {
	if order == nil {
		order = DefaultRoleOrder
	}
	return &RoleEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// RouteEdge is the edge representation of Route.
type RouteEdge struct {
	Node   *Route `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// RouteConnection is the connection containing edges to Route.
type RouteConnection struct {
	Edges      []*RouteEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *RouteConnection) build(nodes []*Route, pager *routePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Route
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Route {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Route {
			return nodes[i]
		}
	}
	c.Edges = make([]*RouteEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RouteEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RoutePaginateOption enables pagination customization.
type RoutePaginateOption func(*routePager) error

// WithRouteOrder configures pagination ordering.
func WithRouteOrder(order *RouteOrder) RoutePaginateOption {
	if order == nil {
		order = DefaultRouteOrder
	}
	o := *order
	return func(pager *routePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRouteOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRouteFilter configures pagination filter.
func WithRouteFilter(filter func(*RouteQuery) (*RouteQuery, error)) RoutePaginateOption {
	return func(pager *routePager) error {
		if filter == nil {
			return errors.New("RouteQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type routePager struct {
	reverse bool
	order   *RouteOrder
	filter  func(*RouteQuery) (*RouteQuery, error)
}

func newRoutePager(opts []RoutePaginateOption, reverse bool) (*routePager, error) {
	pager := &routePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRouteOrder
	}
	return pager, nil
}

func (p *routePager) applyFilter(query *RouteQuery) (*RouteQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *routePager) toCursor(r *Route) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *routePager) applyCursors(query *RouteQuery, after, before *Cursor) (*RouteQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRouteOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *routePager) applyOrder(query *RouteQuery) *RouteQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRouteOrder.Field {
		query = query.Order(DefaultRouteOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *routePager) orderExpr(query *RouteQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRouteOrder.Field {
			b.Comma().Ident(DefaultRouteOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Route.
func (r *RouteQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RoutePaginateOption,
) (*RouteConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRoutePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RouteConnection{Edges: []*RouteEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := r.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RouteOrderFieldCreatedAt orders Route by created_at.
	RouteOrderFieldCreatedAt = &RouteOrderField{
		Value: func(r *Route) (ent.Value, error) {
			return r.CreatedAt, nil
		},
		column: route.FieldCreatedAt,
		toTerm: route.ByCreatedAt,
		toCursor: func(r *Route) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RouteOrderField) String() string {
	var str string
	switch f.column {
	case RouteOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RouteOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RouteOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RouteOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *RouteOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid RouteOrderField", str)
	}
	return nil
}

// RouteOrderField defines the ordering field of Route.
type RouteOrderField struct {
	// Value extracts the ordering value from the given Route.
	Value    func(*Route) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) route.OrderOption
	toCursor func(*Route) Cursor
}

// RouteOrder defines the ordering of Route.
type RouteOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *RouteOrderField `json:"field"`
}

// DefaultRouteOrder is the default ordering of Route.
var DefaultRouteOrder = &RouteOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RouteOrderField{
		Value: func(r *Route) (ent.Value, error) {
			return r.ID, nil
		},
		column: route.FieldID,
		toTerm: route.ByID,
		toCursor: func(r *Route) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Route into RouteEdge.
func (r *Route) ToEdge(order *RouteOrder) *RouteEdge {
	if order == nil {
		order = DefaultRouteOrder
	}
	return &RouteEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}
