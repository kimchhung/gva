// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gva/app/database/schema/types"
	"github.com/gva/app/database/schema/xid"
	"github.com/gva/internal/ent/menu"
	"github.com/gva/internal/ent/role"
)

// MenuCreate is the builder for creating a Menu entity.
type MenuCreate struct {
	config
	mutation *MenuMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mc *MenuCreate) SetCreatedAt(t time.Time) *MenuCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MenuCreate) SetNillableCreatedAt(t *time.Time) *MenuCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MenuCreate) SetUpdatedAt(t time.Time) *MenuCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MenuCreate) SetNillableUpdatedAt(t *time.Time) *MenuCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetIsEnable sets the "is_enable" field.
func (mc *MenuCreate) SetIsEnable(b bool) *MenuCreate {
	mc.mutation.SetIsEnable(b)
	return mc
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIsEnable(b *bool) *MenuCreate {
	if b != nil {
		mc.SetIsEnable(*b)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MenuCreate) SetDeletedAt(i int) *MenuCreate {
	mc.mutation.SetDeletedAt(i)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MenuCreate) SetNillableDeletedAt(i *int) *MenuCreate {
	if i != nil {
		mc.SetDeletedAt(*i)
	}
	return mc
}

// SetParentID sets the "parent_id" field.
func (mc *MenuCreate) SetParentID(x xid.ID) *MenuCreate {
	mc.mutation.SetParentID(x)
	return mc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mc *MenuCreate) SetNillableParentID(x *xid.ID) *MenuCreate {
	if x != nil {
		mc.SetParentID(*x)
	}
	return mc
}

// SetPath sets the "path" field.
func (mc *MenuCreate) SetPath(s string) *MenuCreate {
	mc.mutation.SetPath(s)
	return mc
}

// SetComponent sets the "component" field.
func (mc *MenuCreate) SetComponent(s string) *MenuCreate {
	mc.mutation.SetComponent(s)
	return mc
}

// SetRedirect sets the "redirect" field.
func (mc *MenuCreate) SetRedirect(s string) *MenuCreate {
	mc.mutation.SetRedirect(s)
	return mc
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (mc *MenuCreate) SetNillableRedirect(s *string) *MenuCreate {
	if s != nil {
		mc.SetRedirect(*s)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MenuCreate) SetName(s string) *MenuCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetOrder sets the "order" field.
func (mc *MenuCreate) SetOrder(i int) *MenuCreate {
	mc.mutation.SetOrder(i)
	return mc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (mc *MenuCreate) SetNillableOrder(i *int) *MenuCreate {
	if i != nil {
		mc.SetOrder(*i)
	}
	return mc
}

// SetType sets the "type" field.
func (mc *MenuCreate) SetType(m menu.Type) *MenuCreate {
	mc.mutation.SetType(m)
	return mc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mc *MenuCreate) SetNillableType(m *menu.Type) *MenuCreate {
	if m != nil {
		mc.SetType(*m)
	}
	return mc
}

// SetMeta sets the "meta" field.
func (mc *MenuCreate) SetMeta(tm types.MenuMeta) *MenuCreate {
	mc.mutation.SetMeta(tm)
	return mc
}

// SetID sets the "id" field.
func (mc *MenuCreate) SetID(x xid.ID) *MenuCreate {
	mc.mutation.SetID(x)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MenuCreate) SetNillableID(x *xid.ID) *MenuCreate {
	if x != nil {
		mc.SetID(*x)
	}
	return mc
}

// SetParent sets the "parent" edge to the Menu entity.
func (mc *MenuCreate) SetParent(m *Menu) *MenuCreate {
	return mc.SetParentID(m.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (mc *MenuCreate) AddChildIDs(ids ...xid.ID) *MenuCreate {
	mc.mutation.AddChildIDs(ids...)
	return mc
}

// AddChildren adds the "children" edges to the Menu entity.
func (mc *MenuCreate) AddChildren(m ...*Menu) *MenuCreate {
	ids := make([]xid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddChildIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (mc *MenuCreate) AddRoleIDs(ids ...xid.ID) *MenuCreate {
	mc.mutation.AddRoleIDs(ids...)
	return mc
}

// AddRoles adds the "roles" edges to the Role entity.
func (mc *MenuCreate) AddRoles(r ...*Role) *MenuCreate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mc.AddRoleIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (mc *MenuCreate) Mutation() *MenuMutation {
	return mc.mutation
}

// Save creates the Menu in the database.
func (mc *MenuCreate) Save(ctx context.Context) (*Menu, error) {
	if err := mc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MenuCreate) SaveX(ctx context.Context) *Menu {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MenuCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MenuCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MenuCreate) defaults() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		if menu.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized menu.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := menu.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		if menu.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized menu.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := menu.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.IsEnable(); !ok {
		v := menu.DefaultIsEnable
		mc.mutation.SetIsEnable(v)
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		v := menu.DefaultDeletedAt
		mc.mutation.SetDeletedAt(v)
	}
	if _, ok := mc.mutation.Order(); !ok {
		v := menu.DefaultOrder
		mc.mutation.SetOrder(v)
	}
	if _, ok := mc.mutation.GetType(); !ok {
		v := menu.DefaultType
		mc.mutation.SetType(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		if menu.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized menu.DefaultID (forgotten import ent/runtime?)")
		}
		v := menu.DefaultID()
		mc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mc *MenuCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Menu.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Menu.updated_at"`)}
	}
	if _, ok := mc.mutation.IsEnable(); !ok {
		return &ValidationError{Name: "is_enable", err: errors.New(`ent: missing required field "Menu.is_enable"`)}
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Menu.deleted_at"`)}
	}
	if _, ok := mc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Menu.path"`)}
	}
	if _, ok := mc.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required field "Menu.component"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Menu.name"`)}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Menu.type"`)}
	}
	if v, ok := mc.mutation.GetType(); ok {
		if err := menu.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Menu.type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Meta(); !ok {
		return &ValidationError{Name: "meta", err: errors.New(`ent: missing required field "Menu.meta"`)}
	}
	return nil
}

func (mc *MenuCreate) sqlSave(ctx context.Context) (*Menu, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MenuCreate) createSpec() (*Menu, *sqlgraph.CreateSpec) {
	var (
		_node = &Menu{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(menu.Table, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString))
	)
	_spec.Schema = mc.schemaConfig.Menu
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(menu.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.IsEnable(); ok {
		_spec.SetField(menu.FieldIsEnable, field.TypeBool, value)
		_node.IsEnable = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(menu.FieldDeletedAt, field.TypeInt, value)
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := mc.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
		_node.Component = value
	}
	if value, ok := mc.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
		_node.Redirect = &value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Order(); ok {
		_spec.SetField(menu.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := mc.mutation.Meta(); ok {
		_spec.SetField(menu.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	if nodes := mc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		edge.Schema = mc.schemaConfig.Menu
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		edge.Schema = mc.schemaConfig.Menu
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		edge.Schema = mc.schemaConfig.RoleRoutes
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Menu.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MenuUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mc *MenuCreate) OnConflict(opts ...sql.ConflictOption) *MenuUpsertOne {
	mc.conflict = opts
	return &MenuUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MenuCreate) OnConflictColumns(columns ...string) *MenuUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MenuUpsertOne{
		create: mc,
	}
}

type (
	// MenuUpsertOne is the builder for "upsert"-ing
	//  one Menu node.
	MenuUpsertOne struct {
		create *MenuCreate
	}

	// MenuUpsert is the "OnConflict" setter.
	MenuUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *MenuUpsert) SetCreatedAt(v time.Time) *MenuUpsert {
	u.Set(menu.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MenuUpsert) UpdateCreatedAt() *MenuUpsert {
	u.SetExcluded(menu.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MenuUpsert) SetUpdatedAt(v time.Time) *MenuUpsert {
	u.Set(menu.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MenuUpsert) UpdateUpdatedAt() *MenuUpsert {
	u.SetExcluded(menu.FieldUpdatedAt)
	return u
}

// SetIsEnable sets the "is_enable" field.
func (u *MenuUpsert) SetIsEnable(v bool) *MenuUpsert {
	u.Set(menu.FieldIsEnable, v)
	return u
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *MenuUpsert) UpdateIsEnable() *MenuUpsert {
	u.SetExcluded(menu.FieldIsEnable)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MenuUpsert) SetDeletedAt(v int) *MenuUpsert {
	u.Set(menu.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MenuUpsert) UpdateDeletedAt() *MenuUpsert {
	u.SetExcluded(menu.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MenuUpsert) AddDeletedAt(v int) *MenuUpsert {
	u.Add(menu.FieldDeletedAt, v)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *MenuUpsert) SetParentID(v xid.ID) *MenuUpsert {
	u.Set(menu.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *MenuUpsert) UpdateParentID() *MenuUpsert {
	u.SetExcluded(menu.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *MenuUpsert) ClearParentID() *MenuUpsert {
	u.SetNull(menu.FieldParentID)
	return u
}

// SetPath sets the "path" field.
func (u *MenuUpsert) SetPath(v string) *MenuUpsert {
	u.Set(menu.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *MenuUpsert) UpdatePath() *MenuUpsert {
	u.SetExcluded(menu.FieldPath)
	return u
}

// SetComponent sets the "component" field.
func (u *MenuUpsert) SetComponent(v string) *MenuUpsert {
	u.Set(menu.FieldComponent, v)
	return u
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *MenuUpsert) UpdateComponent() *MenuUpsert {
	u.SetExcluded(menu.FieldComponent)
	return u
}

// SetRedirect sets the "redirect" field.
func (u *MenuUpsert) SetRedirect(v string) *MenuUpsert {
	u.Set(menu.FieldRedirect, v)
	return u
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *MenuUpsert) UpdateRedirect() *MenuUpsert {
	u.SetExcluded(menu.FieldRedirect)
	return u
}

// ClearRedirect clears the value of the "redirect" field.
func (u *MenuUpsert) ClearRedirect() *MenuUpsert {
	u.SetNull(menu.FieldRedirect)
	return u
}

// SetName sets the "name" field.
func (u *MenuUpsert) SetName(v string) *MenuUpsert {
	u.Set(menu.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsert) UpdateName() *MenuUpsert {
	u.SetExcluded(menu.FieldName)
	return u
}

// SetOrder sets the "order" field.
func (u *MenuUpsert) SetOrder(v int) *MenuUpsert {
	u.Set(menu.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *MenuUpsert) UpdateOrder() *MenuUpsert {
	u.SetExcluded(menu.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *MenuUpsert) AddOrder(v int) *MenuUpsert {
	u.Add(menu.FieldOrder, v)
	return u
}

// ClearOrder clears the value of the "order" field.
func (u *MenuUpsert) ClearOrder() *MenuUpsert {
	u.SetNull(menu.FieldOrder)
	return u
}

// SetType sets the "type" field.
func (u *MenuUpsert) SetType(v menu.Type) *MenuUpsert {
	u.Set(menu.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MenuUpsert) UpdateType() *MenuUpsert {
	u.SetExcluded(menu.FieldType)
	return u
}

// SetMeta sets the "meta" field.
func (u *MenuUpsert) SetMeta(v types.MenuMeta) *MenuUpsert {
	u.Set(menu.FieldMeta, v)
	return u
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *MenuUpsert) UpdateMeta() *MenuUpsert {
	u.SetExcluded(menu.FieldMeta)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(menu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MenuUpsertOne) UpdateNewValues() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(menu.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MenuUpsertOne) Ignore() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MenuUpsertOne) DoNothing() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MenuCreate.OnConflict
// documentation for more info.
func (u *MenuUpsertOne) Update(set func(*MenuUpsert)) *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MenuUpsertOne) SetCreatedAt(v time.Time) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateCreatedAt() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MenuUpsertOne) SetUpdatedAt(v time.Time) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateUpdatedAt() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetIsEnable sets the "is_enable" field.
func (u *MenuUpsertOne) SetIsEnable(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetIsEnable(v)
	})
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateIsEnable() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIsEnable()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MenuUpsertOne) SetDeletedAt(v int) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MenuUpsertOne) AddDeletedAt(v int) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateDeletedAt() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetParentID sets the "parent_id" field.
func (u *MenuUpsertOne) SetParentID(v xid.ID) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateParentID() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *MenuUpsertOne) ClearParentID() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearParentID()
	})
}

// SetPath sets the "path" field.
func (u *MenuUpsertOne) SetPath(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdatePath() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePath()
	})
}

// SetComponent sets the "component" field.
func (u *MenuUpsertOne) SetComponent(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateComponent() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateComponent()
	})
}

// SetRedirect sets the "redirect" field.
func (u *MenuUpsertOne) SetRedirect(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetRedirect(v)
	})
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateRedirect() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateRedirect()
	})
}

// ClearRedirect clears the value of the "redirect" field.
func (u *MenuUpsertOne) ClearRedirect() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearRedirect()
	})
}

// SetName sets the "name" field.
func (u *MenuUpsertOne) SetName(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateName() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateName()
	})
}

// SetOrder sets the "order" field.
func (u *MenuUpsertOne) SetOrder(v int) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *MenuUpsertOne) AddOrder(v int) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateOrder() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateOrder()
	})
}

// ClearOrder clears the value of the "order" field.
func (u *MenuUpsertOne) ClearOrder() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearOrder()
	})
}

// SetType sets the "type" field.
func (u *MenuUpsertOne) SetType(v menu.Type) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateType() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateType()
	})
}

// SetMeta sets the "meta" field.
func (u *MenuUpsertOne) SetMeta(v types.MenuMeta) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateMeta() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateMeta()
	})
}

// Exec executes the query.
func (u *MenuUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MenuCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MenuUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MenuUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MenuUpsertOne.ID is not supported by MySQL driver. Use MenuUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MenuUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MenuCreateBulk is the builder for creating many Menu entities in bulk.
type MenuCreateBulk struct {
	config
	err      error
	builders []*MenuCreate
	conflict []sql.ConflictOption
}

// Save creates the Menu entities in the database.
func (mcb *MenuCreateBulk) Save(ctx context.Context) ([]*Menu, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Menu, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MenuCreateBulk) SaveX(ctx context.Context) []*Menu {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MenuCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MenuCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Menu.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MenuUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mcb *MenuCreateBulk) OnConflict(opts ...sql.ConflictOption) *MenuUpsertBulk {
	mcb.conflict = opts
	return &MenuUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MenuCreateBulk) OnConflictColumns(columns ...string) *MenuUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MenuUpsertBulk{
		create: mcb,
	}
}

// MenuUpsertBulk is the builder for "upsert"-ing
// a bulk of Menu nodes.
type MenuUpsertBulk struct {
	create *MenuCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(menu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MenuUpsertBulk) UpdateNewValues() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(menu.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MenuUpsertBulk) Ignore() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MenuUpsertBulk) DoNothing() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MenuCreateBulk.OnConflict
// documentation for more info.
func (u *MenuUpsertBulk) Update(set func(*MenuUpsert)) *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MenuUpsertBulk) SetCreatedAt(v time.Time) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateCreatedAt() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MenuUpsertBulk) SetUpdatedAt(v time.Time) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateUpdatedAt() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetIsEnable sets the "is_enable" field.
func (u *MenuUpsertBulk) SetIsEnable(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetIsEnable(v)
	})
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateIsEnable() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIsEnable()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MenuUpsertBulk) SetDeletedAt(v int) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MenuUpsertBulk) AddDeletedAt(v int) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateDeletedAt() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetParentID sets the "parent_id" field.
func (u *MenuUpsertBulk) SetParentID(v xid.ID) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateParentID() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *MenuUpsertBulk) ClearParentID() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearParentID()
	})
}

// SetPath sets the "path" field.
func (u *MenuUpsertBulk) SetPath(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdatePath() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePath()
	})
}

// SetComponent sets the "component" field.
func (u *MenuUpsertBulk) SetComponent(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateComponent() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateComponent()
	})
}

// SetRedirect sets the "redirect" field.
func (u *MenuUpsertBulk) SetRedirect(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetRedirect(v)
	})
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateRedirect() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateRedirect()
	})
}

// ClearRedirect clears the value of the "redirect" field.
func (u *MenuUpsertBulk) ClearRedirect() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearRedirect()
	})
}

// SetName sets the "name" field.
func (u *MenuUpsertBulk) SetName(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateName() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateName()
	})
}

// SetOrder sets the "order" field.
func (u *MenuUpsertBulk) SetOrder(v int) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *MenuUpsertBulk) AddOrder(v int) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateOrder() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateOrder()
	})
}

// ClearOrder clears the value of the "order" field.
func (u *MenuUpsertBulk) ClearOrder() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearOrder()
	})
}

// SetType sets the "type" field.
func (u *MenuUpsertBulk) SetType(v menu.Type) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateType() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateType()
	})
}

// SetMeta sets the "meta" field.
func (u *MenuUpsertBulk) SetMeta(v types.MenuMeta) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateMeta() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateMeta()
	})
}

// Exec executes the query.
func (u *MenuUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MenuCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MenuCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MenuUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
