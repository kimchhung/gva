// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gva/app/database/schema/xid"
	"github.com/gva/internal/ent/predicate"
	"github.com/gva/internal/ent/region"

	"github.com/gva/internal/ent/internal"
)

// RegionUpdate is the builder for updating Region entities.
type RegionUpdate struct {
	config
	hooks     []Hook
	mutation  *RegionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RegionUpdate builder.
func (ru *RegionUpdate) Where(ps ...predicate.Region) *RegionUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RegionUpdate) SetCreatedAt(t time.Time) *RegionUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableCreatedAt(t *time.Time) *RegionUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RegionUpdate) SetUpdatedAt(t time.Time) *RegionUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RegionUpdate) SetDeletedAt(i int) *RegionUpdate {
	ru.mutation.ResetDeletedAt()
	ru.mutation.SetDeletedAt(i)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableDeletedAt(i *int) *RegionUpdate {
	if i != nil {
		ru.SetDeletedAt(*i)
	}
	return ru
}

// AddDeletedAt adds i to the "deleted_at" field.
func (ru *RegionUpdate) AddDeletedAt(i int) *RegionUpdate {
	ru.mutation.AddDeletedAt(i)
	return ru
}

// SetIsEnable sets the "is_enable" field.
func (ru *RegionUpdate) SetIsEnable(b bool) *RegionUpdate {
	ru.mutation.SetIsEnable(b)
	return ru
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableIsEnable(b *bool) *RegionUpdate {
	if b != nil {
		ru.SetIsEnable(*b)
	}
	return ru
}

// SetNameID sets the "name_id" field.
func (ru *RegionUpdate) SetNameID(s string) *RegionUpdate {
	ru.mutation.SetNameID(s)
	return ru
}

// SetNillableNameID sets the "name_id" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableNameID(s *string) *RegionUpdate {
	if s != nil {
		ru.SetNameID(*s)
	}
	return ru
}

// SetName sets the "name" field.
func (ru *RegionUpdate) SetName(s string) *RegionUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableName(s *string) *RegionUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetType sets the "type" field.
func (ru *RegionUpdate) SetType(r region.Type) *RegionUpdate {
	ru.mutation.SetType(r)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableType(r *region.Type) *RegionUpdate {
	if r != nil {
		ru.SetType(*r)
	}
	return ru
}

// SetPid sets the "pid" field.
func (ru *RegionUpdate) SetPid(x xid.ID) *RegionUpdate {
	ru.mutation.SetPid(x)
	return ru
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (ru *RegionUpdate) SetNillablePid(x *xid.ID) *RegionUpdate {
	if x != nil {
		ru.SetPid(*x)
	}
	return ru
}

// ClearPid clears the value of the "pid" field.
func (ru *RegionUpdate) ClearPid() *RegionUpdate {
	ru.mutation.ClearPid()
	return ru
}

// SetParentID sets the "parent" edge to the Region entity by ID.
func (ru *RegionUpdate) SetParentID(id xid.ID) *RegionUpdate {
	ru.mutation.SetParentID(id)
	return ru
}

// SetNillableParentID sets the "parent" edge to the Region entity by ID if the given value is not nil.
func (ru *RegionUpdate) SetNillableParentID(id *xid.ID) *RegionUpdate {
	if id != nil {
		ru = ru.SetParentID(*id)
	}
	return ru
}

// SetParent sets the "parent" edge to the Region entity.
func (ru *RegionUpdate) SetParent(r *Region) *RegionUpdate {
	return ru.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Region entity by IDs.
func (ru *RegionUpdate) AddChildIDs(ids ...xid.ID) *RegionUpdate {
	ru.mutation.AddChildIDs(ids...)
	return ru
}

// AddChildren adds the "children" edges to the Region entity.
func (ru *RegionUpdate) AddChildren(r ...*Region) *RegionUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddChildIDs(ids...)
}

// Mutation returns the RegionMutation object of the builder.
func (ru *RegionUpdate) Mutation() *RegionMutation {
	return ru.mutation
}

// ClearParent clears the "parent" edge to the Region entity.
func (ru *RegionUpdate) ClearParent() *RegionUpdate {
	ru.mutation.ClearParent()
	return ru
}

// ClearChildren clears all "children" edges to the Region entity.
func (ru *RegionUpdate) ClearChildren() *RegionUpdate {
	ru.mutation.ClearChildren()
	return ru
}

// RemoveChildIDs removes the "children" edge to Region entities by IDs.
func (ru *RegionUpdate) RemoveChildIDs(ids ...xid.ID) *RegionUpdate {
	ru.mutation.RemoveChildIDs(ids...)
	return ru
}

// RemoveChildren removes "children" edges to Region entities.
func (ru *RegionUpdate) RemoveChildren(r ...*Region) *RegionUpdate {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RegionUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RegionUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RegionUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RegionUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RegionUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if region.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized region.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := region.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *RegionUpdate) check() error {
	if v, ok := ru.mutation.GetType(); ok {
		if err := region.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Region.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RegionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RegionUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RegionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(region.Table, region.Columns, sqlgraph.NewFieldSpec(region.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(region.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(region.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(region.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedDeletedAt(); ok {
		_spec.AddField(region.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := ru.mutation.IsEnable(); ok {
		_spec.SetField(region.FieldIsEnable, field.TypeBool, value)
	}
	if value, ok := ru.mutation.NameID(); ok {
		_spec.SetField(region.FieldNameID, field.TypeString, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(region.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(region.FieldType, field.TypeEnum, value)
	}
	if ru.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.ParentTable,
			Columns: []string{region.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.Region
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.ParentTable,
			Columns: []string{region.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.Region
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.Region
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.Region
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.Region
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ru.schemaConfig.Region
	ctx = internal.NewSchemaConfigContext(ctx, ru.schemaConfig)
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{region.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RegionUpdateOne is the builder for updating a single Region entity.
type RegionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RegionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RegionUpdateOne) SetCreatedAt(t time.Time) *RegionUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableCreatedAt(t *time.Time) *RegionUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RegionUpdateOne) SetUpdatedAt(t time.Time) *RegionUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RegionUpdateOne) SetDeletedAt(i int) *RegionUpdateOne {
	ruo.mutation.ResetDeletedAt()
	ruo.mutation.SetDeletedAt(i)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableDeletedAt(i *int) *RegionUpdateOne {
	if i != nil {
		ruo.SetDeletedAt(*i)
	}
	return ruo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (ruo *RegionUpdateOne) AddDeletedAt(i int) *RegionUpdateOne {
	ruo.mutation.AddDeletedAt(i)
	return ruo
}

// SetIsEnable sets the "is_enable" field.
func (ruo *RegionUpdateOne) SetIsEnable(b bool) *RegionUpdateOne {
	ruo.mutation.SetIsEnable(b)
	return ruo
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableIsEnable(b *bool) *RegionUpdateOne {
	if b != nil {
		ruo.SetIsEnable(*b)
	}
	return ruo
}

// SetNameID sets the "name_id" field.
func (ruo *RegionUpdateOne) SetNameID(s string) *RegionUpdateOne {
	ruo.mutation.SetNameID(s)
	return ruo
}

// SetNillableNameID sets the "name_id" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableNameID(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetNameID(*s)
	}
	return ruo
}

// SetName sets the "name" field.
func (ruo *RegionUpdateOne) SetName(s string) *RegionUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableName(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetType sets the "type" field.
func (ruo *RegionUpdateOne) SetType(r region.Type) *RegionUpdateOne {
	ruo.mutation.SetType(r)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableType(r *region.Type) *RegionUpdateOne {
	if r != nil {
		ruo.SetType(*r)
	}
	return ruo
}

// SetPid sets the "pid" field.
func (ruo *RegionUpdateOne) SetPid(x xid.ID) *RegionUpdateOne {
	ruo.mutation.SetPid(x)
	return ruo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillablePid(x *xid.ID) *RegionUpdateOne {
	if x != nil {
		ruo.SetPid(*x)
	}
	return ruo
}

// ClearPid clears the value of the "pid" field.
func (ruo *RegionUpdateOne) ClearPid() *RegionUpdateOne {
	ruo.mutation.ClearPid()
	return ruo
}

// SetParentID sets the "parent" edge to the Region entity by ID.
func (ruo *RegionUpdateOne) SetParentID(id xid.ID) *RegionUpdateOne {
	ruo.mutation.SetParentID(id)
	return ruo
}

// SetNillableParentID sets the "parent" edge to the Region entity by ID if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableParentID(id *xid.ID) *RegionUpdateOne {
	if id != nil {
		ruo = ruo.SetParentID(*id)
	}
	return ruo
}

// SetParent sets the "parent" edge to the Region entity.
func (ruo *RegionUpdateOne) SetParent(r *Region) *RegionUpdateOne {
	return ruo.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Region entity by IDs.
func (ruo *RegionUpdateOne) AddChildIDs(ids ...xid.ID) *RegionUpdateOne {
	ruo.mutation.AddChildIDs(ids...)
	return ruo
}

// AddChildren adds the "children" edges to the Region entity.
func (ruo *RegionUpdateOne) AddChildren(r ...*Region) *RegionUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddChildIDs(ids...)
}

// Mutation returns the RegionMutation object of the builder.
func (ruo *RegionUpdateOne) Mutation() *RegionMutation {
	return ruo.mutation
}

// ClearParent clears the "parent" edge to the Region entity.
func (ruo *RegionUpdateOne) ClearParent() *RegionUpdateOne {
	ruo.mutation.ClearParent()
	return ruo
}

// ClearChildren clears all "children" edges to the Region entity.
func (ruo *RegionUpdateOne) ClearChildren() *RegionUpdateOne {
	ruo.mutation.ClearChildren()
	return ruo
}

// RemoveChildIDs removes the "children" edge to Region entities by IDs.
func (ruo *RegionUpdateOne) RemoveChildIDs(ids ...xid.ID) *RegionUpdateOne {
	ruo.mutation.RemoveChildIDs(ids...)
	return ruo
}

// RemoveChildren removes "children" edges to Region entities.
func (ruo *RegionUpdateOne) RemoveChildren(r ...*Region) *RegionUpdateOne {
	ids := make([]xid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the RegionUpdate builder.
func (ruo *RegionUpdateOne) Where(ps ...predicate.Region) *RegionUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RegionUpdateOne) Select(field string, fields ...string) *RegionUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Region entity.
func (ruo *RegionUpdateOne) Save(ctx context.Context) (*Region, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RegionUpdateOne) SaveX(ctx context.Context) *Region {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RegionUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RegionUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RegionUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if region.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized region.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := region.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RegionUpdateOne) check() error {
	if v, ok := ruo.mutation.GetType(); ok {
		if err := region.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Region.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RegionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RegionUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RegionUpdateOne) sqlSave(ctx context.Context) (_node *Region, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(region.Table, region.Columns, sqlgraph.NewFieldSpec(region.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Region.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, region.FieldID)
		for _, f := range fields {
			if !region.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != region.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(region.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(region.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(region.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(region.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.IsEnable(); ok {
		_spec.SetField(region.FieldIsEnable, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.NameID(); ok {
		_spec.SetField(region.FieldNameID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(region.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(region.FieldType, field.TypeEnum, value)
	}
	if ruo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.ParentTable,
			Columns: []string{region.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.Region
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.ParentTable,
			Columns: []string{region.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.Region
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.Region
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.Region
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.Region
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ruo.schemaConfig.Region
	ctx = internal.NewSchemaConfigContext(ctx, ruo.schemaConfig)
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Region{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{region.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
