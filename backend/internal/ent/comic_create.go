// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimchhung/gva/backend/app/database/schema/types"
	"github.com/kimchhung/gva/backend/internal/ent/comic"
	"github.com/kimchhung/gva/backend/internal/ent/comicchapter"
)

// ComicCreate is the builder for creating a Comic entity.
type ComicCreate struct {
	config
	mutation *ComicMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *ComicCreate) SetCreatedAt(t time.Time) *ComicCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ComicCreate) SetNillableCreatedAt(t *time.Time) *ComicCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ComicCreate) SetUpdatedAt(t time.Time) *ComicCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ComicCreate) SetNillableUpdatedAt(t *time.Time) *ComicCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetChapter sets the "chapter" field.
func (cc *ComicCreate) SetChapter(u uint) *ComicCreate {
	cc.mutation.SetChapter(u)
	return cc
}

// SetTitle sets the "title" field.
func (cc *ComicCreate) SetTitle(s string) *ComicCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetSlug sets the "slug" field.
func (cc *ComicCreate) SetSlug(s string) *ComicCreate {
	cc.mutation.SetSlug(s)
	return cc
}

// SetCovers sets the "covers" field.
func (cc *ComicCreate) SetCovers(ti []types.CoverImg) *ComicCreate {
	cc.mutation.SetCovers(ti)
	return cc
}

// SetStatus sets the "status" field.
func (cc *ComicCreate) SetStatus(s string) *ComicCreate {
	cc.mutation.SetStatus(s)
	return cc
}

// SetIsTranslateCompleted sets the "isTranslateCompleted" field.
func (cc *ComicCreate) SetIsTranslateCompleted(b bool) *ComicCreate {
	cc.mutation.SetIsTranslateCompleted(b)
	return cc
}

// SetNillableIsTranslateCompleted sets the "isTranslateCompleted" field if the given value is not nil.
func (cc *ComicCreate) SetNillableIsTranslateCompleted(b *bool) *ComicCreate {
	if b != nil {
		cc.SetIsTranslateCompleted(*b)
	}
	return cc
}

// SetUpCount sets the "up_count" field.
func (cc *ComicCreate) SetUpCount(u uint) *ComicCreate {
	cc.mutation.SetUpCount(u)
	return cc
}

// SetNillableUpCount sets the "up_count" field if the given value is not nil.
func (cc *ComicCreate) SetNillableUpCount(u *uint) *ComicCreate {
	if u != nil {
		cc.SetUpCount(*u)
	}
	return cc
}

// SetFinalChapterID sets the "final_chapter_id" field.
func (cc *ComicCreate) SetFinalChapterID(s string) *ComicCreate {
	cc.mutation.SetFinalChapterID(s)
	return cc
}

// SetNillableFinalChapterID sets the "final_chapter_id" field if the given value is not nil.
func (cc *ComicCreate) SetNillableFinalChapterID(s *string) *ComicCreate {
	if s != nil {
		cc.SetFinalChapterID(*s)
	}
	return cc
}

// SetLastChapterID sets the "last_chapter_id" field.
func (cc *ComicCreate) SetLastChapterID(s string) *ComicCreate {
	cc.mutation.SetLastChapterID(s)
	return cc
}

// SetNillableLastChapterID sets the "last_chapter_id" field if the given value is not nil.
func (cc *ComicCreate) SetNillableLastChapterID(s *string) *ComicCreate {
	if s != nil {
		cc.SetLastChapterID(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ComicCreate) SetID(s string) *ComicCreate {
	cc.mutation.SetID(s)
	return cc
}

// AddChapterIDs adds the "chapters" edge to the ComicChapter entity by IDs.
func (cc *ComicCreate) AddChapterIDs(ids ...string) *ComicCreate {
	cc.mutation.AddChapterIDs(ids...)
	return cc
}

// AddChapters adds the "chapters" edges to the ComicChapter entity.
func (cc *ComicCreate) AddChapters(c ...*ComicChapter) *ComicCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddChapterIDs(ids...)
}

// SetLastChapter sets the "last_chapter" edge to the ComicChapter entity.
func (cc *ComicCreate) SetLastChapter(c *ComicChapter) *ComicCreate {
	return cc.SetLastChapterID(c.ID)
}

// SetFinalChapter sets the "final_chapter" edge to the ComicChapter entity.
func (cc *ComicCreate) SetFinalChapter(c *ComicChapter) *ComicCreate {
	return cc.SetFinalChapterID(c.ID)
}

// Mutation returns the ComicMutation object of the builder.
func (cc *ComicCreate) Mutation() *ComicMutation {
	return cc.mutation
}

// Save creates the Comic in the database.
func (cc *ComicCreate) Save(ctx context.Context) (*Comic, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ComicCreate) SaveX(ctx context.Context) *Comic {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ComicCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ComicCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ComicCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := comic.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := comic.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.IsTranslateCompleted(); !ok {
		v := comic.DefaultIsTranslateCompleted
		cc.mutation.SetIsTranslateCompleted(v)
	}
	if _, ok := cc.mutation.UpCount(); !ok {
		v := comic.DefaultUpCount
		cc.mutation.SetUpCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ComicCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Comic.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Comic.updated_at"`)}
	}
	if _, ok := cc.mutation.Chapter(); !ok {
		return &ValidationError{Name: "chapter", err: errors.New(`ent: missing required field "Comic.chapter"`)}
	}
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Comic.title"`)}
	}
	if _, ok := cc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Comic.slug"`)}
	}
	if _, ok := cc.mutation.Covers(); !ok {
		return &ValidationError{Name: "covers", err: errors.New(`ent: missing required field "Comic.covers"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Comic.status"`)}
	}
	if _, ok := cc.mutation.IsTranslateCompleted(); !ok {
		return &ValidationError{Name: "isTranslateCompleted", err: errors.New(`ent: missing required field "Comic.isTranslateCompleted"`)}
	}
	if _, ok := cc.mutation.UpCount(); !ok {
		return &ValidationError{Name: "up_count", err: errors.New(`ent: missing required field "Comic.up_count"`)}
	}
	return nil
}

func (cc *ComicCreate) sqlSave(ctx context.Context) (*Comic, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Comic.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ComicCreate) createSpec() (*Comic, *sqlgraph.CreateSpec) {
	var (
		_node = &Comic{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(comic.Table, sqlgraph.NewFieldSpec(comic.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(comic.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(comic.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Chapter(); ok {
		_spec.SetField(comic.FieldChapter, field.TypeUint, value)
		_node.Chapter = value
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(comic.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.Slug(); ok {
		_spec.SetField(comic.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := cc.mutation.Covers(); ok {
		_spec.SetField(comic.FieldCovers, field.TypeJSON, value)
		_node.Covers = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(comic.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.IsTranslateCompleted(); ok {
		_spec.SetField(comic.FieldIsTranslateCompleted, field.TypeBool, value)
		_node.IsTranslateCompleted = value
	}
	if value, ok := cc.mutation.UpCount(); ok {
		_spec.SetField(comic.FieldUpCount, field.TypeUint, value)
		_node.UpCount = value
	}
	if nodes := cc.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comic.ChaptersTable,
			Columns: []string{comic.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comicchapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.LastChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comic.LastChapterTable,
			Columns: []string{comic.LastChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comicchapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LastChapterID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.FinalChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comic.FinalChapterTable,
			Columns: []string{comic.FinalChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comicchapter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FinalChapterID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ComicCreateBulk is the builder for creating many Comic entities in bulk.
type ComicCreateBulk struct {
	config
	err      error
	builders []*ComicCreate
}

// Save creates the Comic entities in the database.
func (ccb *ComicCreateBulk) Save(ctx context.Context) ([]*Comic, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comic, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ComicCreateBulk) SaveX(ctx context.Context) []*Comic {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ComicCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ComicCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
