// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimchhung/gva/backend/internal/ent/comicchapter"
	"github.com/kimchhung/gva/backend/internal/ent/predicate"
)

// ComicChapterDelete is the builder for deleting a ComicChapter entity.
type ComicChapterDelete struct {
	config
	hooks    []Hook
	mutation *ComicChapterMutation
}

// Where appends a list predicates to the ComicChapterDelete builder.
func (ccd *ComicChapterDelete) Where(ps ...predicate.ComicChapter) *ComicChapterDelete {
	ccd.mutation.Where(ps...)
	return ccd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ccd *ComicChapterDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ccd.sqlExec, ccd.mutation, ccd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ccd *ComicChapterDelete) ExecX(ctx context.Context) int {
	n, err := ccd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ccd *ComicChapterDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(comicchapter.Table, sqlgraph.NewFieldSpec(comicchapter.FieldID, field.TypeString))
	if ps := ccd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ccd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ccd.mutation.done = true
	return affected, err
}

// ComicChapterDeleteOne is the builder for deleting a single ComicChapter entity.
type ComicChapterDeleteOne struct {
	ccd *ComicChapterDelete
}

// Where appends a list predicates to the ComicChapterDelete builder.
func (ccdo *ComicChapterDeleteOne) Where(ps ...predicate.ComicChapter) *ComicChapterDeleteOne {
	ccdo.ccd.mutation.Where(ps...)
	return ccdo
}

// Exec executes the deletion query.
func (ccdo *ComicChapterDeleteOne) Exec(ctx context.Context) error {
	n, err := ccdo.ccd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{comicchapter.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ccdo *ComicChapterDeleteOne) ExecX(ctx context.Context) {
	if err := ccdo.Exec(ctx); err != nil {
		panic(err)
	}
}
