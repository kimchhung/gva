// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kimchhung/gva/backend/app/database/schema/types"
	"github.com/kimchhung/gva/backend/internal/ent/admin"
	"github.com/kimchhung/gva/backend/internal/ent/comic"
	"github.com/kimchhung/gva/backend/internal/ent/comicchapter"
	"github.com/kimchhung/gva/backend/internal/ent/comicimg"
	"github.com/kimchhung/gva/backend/internal/ent/genre"
	"github.com/kimchhung/gva/backend/internal/ent/permission"
	"github.com/kimchhung/gva/backend/internal/ent/predicate"
	"github.com/kimchhung/gva/backend/internal/ent/role"
	"github.com/kimchhung/gva/backend/internal/ent/route"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdmin        = "Admin"
	TypeComic        = "Comic"
	TypeComicChapter = "ComicChapter"
	TypeComicImg     = "ComicImg"
	TypeGenre        = "Genre"
	TypePermission   = "Permission"
	TypeRole         = "Role"
	TypeRoute        = "Route"
)

// AdminMutation represents an operation that mutates the Admin nodes in the graph.
type AdminMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	created_at          *time.Time
	updated_at          *time.Time
	is_enable           *bool
	deleted_at          *int
	adddeleted_at       *int
	username            *string
	password            *string
	whitelist_ips       *[]string
	appendwhitelist_ips []string
	display_name        *string
	clearedFields       map[string]struct{}
	roles               map[string]struct{}
	removedroles        map[string]struct{}
	clearedroles        bool
	done                bool
	oldValue            func(context.Context) (*Admin, error)
	predicates          []predicate.Admin
}

var _ ent.Mutation = (*AdminMutation)(nil)

// adminOption allows management of the mutation configuration using functional options.
type adminOption func(*AdminMutation)

// newAdminMutation creates new mutation for the Admin entity.
func newAdminMutation(c config, op Op, opts ...adminOption) *AdminMutation {
	m := &AdminMutation{
		config:        c,
		op:            op,
		typ:           TypeAdmin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminID sets the ID field of the mutation.
func withAdminID(id string) adminOption {
	return func(m *AdminMutation) {
		var (
			err   error
			once  sync.Once
			value *Admin
		)
		m.oldValue = func(ctx context.Context) (*Admin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Admin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdmin sets the old Admin of the mutation.
func withAdmin(node *Admin) adminOption {
	return func(m *AdminMutation) {
		m.oldValue = func(context.Context) (*Admin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Admin entities.
func (m *AdminMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdminMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdminMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Admin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AdminMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AdminMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AdminMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AdminMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AdminMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AdminMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIsEnable sets the "is_enable" field.
func (m *AdminMutation) SetIsEnable(b bool) {
	m.is_enable = &b
}

// IsEnable returns the value of the "is_enable" field in the mutation.
func (m *AdminMutation) IsEnable() (r bool, exists bool) {
	v := m.is_enable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnable returns the old "is_enable" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldIsEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnable: %w", err)
	}
	return oldValue.IsEnable, nil
}

// ResetIsEnable resets all changes to the "is_enable" field.
func (m *AdminMutation) ResetIsEnable() {
	m.is_enable = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AdminMutation) SetDeletedAt(i int) {
	m.deleted_at = &i
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AdminMutation) DeletedAt() (r int, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldDeletedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds i to the "deleted_at" field.
func (m *AdminMutation) AddDeletedAt(i int) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += i
	} else {
		m.adddeleted_at = &i
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AdminMutation) AddedDeletedAt() (r int, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AdminMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetUsername sets the "username" field.
func (m *AdminMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *AdminMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *AdminMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *AdminMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *AdminMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *AdminMutation) ResetPassword() {
	m.password = nil
}

// SetWhitelistIps sets the "whitelist_ips" field.
func (m *AdminMutation) SetWhitelistIps(s []string) {
	m.whitelist_ips = &s
	m.appendwhitelist_ips = nil
}

// WhitelistIps returns the value of the "whitelist_ips" field in the mutation.
func (m *AdminMutation) WhitelistIps() (r []string, exists bool) {
	v := m.whitelist_ips
	if v == nil {
		return
	}
	return *v, true
}

// OldWhitelistIps returns the old "whitelist_ips" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldWhitelistIps(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhitelistIps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhitelistIps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhitelistIps: %w", err)
	}
	return oldValue.WhitelistIps, nil
}

// AppendWhitelistIps adds s to the "whitelist_ips" field.
func (m *AdminMutation) AppendWhitelistIps(s []string) {
	m.appendwhitelist_ips = append(m.appendwhitelist_ips, s...)
}

// AppendedWhitelistIps returns the list of values that were appended to the "whitelist_ips" field in this mutation.
func (m *AdminMutation) AppendedWhitelistIps() ([]string, bool) {
	if len(m.appendwhitelist_ips) == 0 {
		return nil, false
	}
	return m.appendwhitelist_ips, true
}

// ResetWhitelistIps resets all changes to the "whitelist_ips" field.
func (m *AdminMutation) ResetWhitelistIps() {
	m.whitelist_ips = nil
	m.appendwhitelist_ips = nil
}

// SetDisplayName sets the "display_name" field.
func (m *AdminMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *AdminMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Admin entity.
// If the Admin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdminMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ClearDisplayName clears the value of the "display_name" field.
func (m *AdminMutation) ClearDisplayName() {
	m.display_name = nil
	m.clearedFields[admin.FieldDisplayName] = struct{}{}
}

// DisplayNameCleared returns if the "display_name" field was cleared in this mutation.
func (m *AdminMutation) DisplayNameCleared() bool {
	_, ok := m.clearedFields[admin.FieldDisplayName]
	return ok
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *AdminMutation) ResetDisplayName() {
	m.display_name = nil
	delete(m.clearedFields, admin.FieldDisplayName)
}

// AddRoleIDs adds the "roles" edge to the Role entity by ids.
func (m *AdminMutation) AddRoleIDs(ids ...string) {
	if m.roles == nil {
		m.roles = make(map[string]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the Role entity.
func (m *AdminMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the Role entity was cleared.
func (m *AdminMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the Role entity by IDs.
func (m *AdminMutation) RemoveRoleIDs(ids ...string) {
	if m.removedroles == nil {
		m.removedroles = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the Role entity.
func (m *AdminMutation) RemovedRolesIDs() (ids []string) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *AdminMutation) RolesIDs() (ids []string) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *AdminMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the AdminMutation builder.
func (m *AdminMutation) Where(ps ...predicate.Admin) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdminMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdminMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Admin, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdminMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdminMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Admin).
func (m *AdminMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdminMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, admin.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, admin.FieldUpdatedAt)
	}
	if m.is_enable != nil {
		fields = append(fields, admin.FieldIsEnable)
	}
	if m.deleted_at != nil {
		fields = append(fields, admin.FieldDeletedAt)
	}
	if m.username != nil {
		fields = append(fields, admin.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, admin.FieldPassword)
	}
	if m.whitelist_ips != nil {
		fields = append(fields, admin.FieldWhitelistIps)
	}
	if m.display_name != nil {
		fields = append(fields, admin.FieldDisplayName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdminMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case admin.FieldCreatedAt:
		return m.CreatedAt()
	case admin.FieldUpdatedAt:
		return m.UpdatedAt()
	case admin.FieldIsEnable:
		return m.IsEnable()
	case admin.FieldDeletedAt:
		return m.DeletedAt()
	case admin.FieldUsername:
		return m.Username()
	case admin.FieldPassword:
		return m.Password()
	case admin.FieldWhitelistIps:
		return m.WhitelistIps()
	case admin.FieldDisplayName:
		return m.DisplayName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdminMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case admin.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case admin.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case admin.FieldIsEnable:
		return m.OldIsEnable(ctx)
	case admin.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case admin.FieldUsername:
		return m.OldUsername(ctx)
	case admin.FieldPassword:
		return m.OldPassword(ctx)
	case admin.FieldWhitelistIps:
		return m.OldWhitelistIps(ctx)
	case admin.FieldDisplayName:
		return m.OldDisplayName(ctx)
	}
	return nil, fmt.Errorf("unknown Admin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminMutation) SetField(name string, value ent.Value) error {
	switch name {
	case admin.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case admin.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case admin.FieldIsEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnable(v)
		return nil
	case admin.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case admin.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case admin.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case admin.FieldWhitelistIps:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhitelistIps(v)
		return nil
	case admin.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	}
	return fmt.Errorf("unknown Admin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdminMutation) AddedFields() []string {
	var fields []string
	if m.adddeleted_at != nil {
		fields = append(fields, admin.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdminMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case admin.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdminMutation) AddField(name string, value ent.Value) error {
	switch name {
	case admin.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Admin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdminMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(admin.FieldDisplayName) {
		fields = append(fields, admin.FieldDisplayName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdminMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminMutation) ClearField(name string) error {
	switch name {
	case admin.FieldDisplayName:
		m.ClearDisplayName()
		return nil
	}
	return fmt.Errorf("unknown Admin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdminMutation) ResetField(name string) error {
	switch name {
	case admin.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case admin.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case admin.FieldIsEnable:
		m.ResetIsEnable()
		return nil
	case admin.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case admin.FieldUsername:
		m.ResetUsername()
		return nil
	case admin.FieldPassword:
		m.ResetPassword()
		return nil
	case admin.FieldWhitelistIps:
		m.ResetWhitelistIps()
		return nil
	case admin.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	}
	return fmt.Errorf("unknown Admin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdminMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.roles != nil {
		edges = append(edges, admin.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdminMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case admin.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdminMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroles != nil {
		edges = append(edges, admin.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdminMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case admin.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdminMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedroles {
		edges = append(edges, admin.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdminMutation) EdgeCleared(name string) bool {
	switch name {
	case admin.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdminMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Admin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdminMutation) ResetEdge(name string) error {
	switch name {
	case admin.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown Admin edge %s", name)
}

// ComicMutation represents an operation that mutates the Comic nodes in the graph.
type ComicMutation struct {
	config
	op                   Op
	typ                  string
	id                   *string
	created_at           *time.Time
	updated_at           *time.Time
	chapter              *uint
	addchapter           *int
	title                *string
	slug                 *string
	covers               *[]types.CoverImg
	appendcovers         []types.CoverImg
	status               *string
	isTranslateCompleted *bool
	up_count             *uint
	addup_count          *int
	clearedFields        map[string]struct{}
	chapters             map[string]struct{}
	removedchapters      map[string]struct{}
	clearedchapters      bool
	last_chapter         *string
	clearedlast_chapter  bool
	final_chapter        *string
	clearedfinal_chapter bool
	done                 bool
	oldValue             func(context.Context) (*Comic, error)
	predicates           []predicate.Comic
}

var _ ent.Mutation = (*ComicMutation)(nil)

// comicOption allows management of the mutation configuration using functional options.
type comicOption func(*ComicMutation)

// newComicMutation creates new mutation for the Comic entity.
func newComicMutation(c config, op Op, opts ...comicOption) *ComicMutation {
	m := &ComicMutation{
		config:        c,
		op:            op,
		typ:           TypeComic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComicID sets the ID field of the mutation.
func withComicID(id string) comicOption {
	return func(m *ComicMutation) {
		var (
			err   error
			once  sync.Once
			value *Comic
		)
		m.oldValue = func(ctx context.Context) (*Comic, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Comic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComic sets the old Comic of the mutation.
func withComic(node *Comic) comicOption {
	return func(m *ComicMutation) {
		m.oldValue = func(context.Context) (*Comic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComicMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComicMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Comic entities.
func (m *ComicMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComicMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ComicMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Comic.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ComicMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ComicMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Comic entity.
// If the Comic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ComicMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ComicMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ComicMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Comic entity.
// If the Comic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ComicMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetChapter sets the "chapter" field.
func (m *ComicMutation) SetChapter(u uint) {
	m.chapter = &u
	m.addchapter = nil
}

// Chapter returns the value of the "chapter" field in the mutation.
func (m *ComicMutation) Chapter() (r uint, exists bool) {
	v := m.chapter
	if v == nil {
		return
	}
	return *v, true
}

// OldChapter returns the old "chapter" field's value of the Comic entity.
// If the Comic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicMutation) OldChapter(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChapter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChapter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChapter: %w", err)
	}
	return oldValue.Chapter, nil
}

// AddChapter adds u to the "chapter" field.
func (m *ComicMutation) AddChapter(u int) {
	if m.addchapter != nil {
		*m.addchapter += u
	} else {
		m.addchapter = &u
	}
}

// AddedChapter returns the value that was added to the "chapter" field in this mutation.
func (m *ComicMutation) AddedChapter() (r int, exists bool) {
	v := m.addchapter
	if v == nil {
		return
	}
	return *v, true
}

// ResetChapter resets all changes to the "chapter" field.
func (m *ComicMutation) ResetChapter() {
	m.chapter = nil
	m.addchapter = nil
}

// SetTitle sets the "title" field.
func (m *ComicMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ComicMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Comic entity.
// If the Comic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ComicMutation) ResetTitle() {
	m.title = nil
}

// SetSlug sets the "slug" field.
func (m *ComicMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *ComicMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Comic entity.
// If the Comic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *ComicMutation) ResetSlug() {
	m.slug = nil
}

// SetCovers sets the "covers" field.
func (m *ComicMutation) SetCovers(ti []types.CoverImg) {
	m.covers = &ti
	m.appendcovers = nil
}

// Covers returns the value of the "covers" field in the mutation.
func (m *ComicMutation) Covers() (r []types.CoverImg, exists bool) {
	v := m.covers
	if v == nil {
		return
	}
	return *v, true
}

// OldCovers returns the old "covers" field's value of the Comic entity.
// If the Comic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicMutation) OldCovers(ctx context.Context) (v []types.CoverImg, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCovers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCovers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCovers: %w", err)
	}
	return oldValue.Covers, nil
}

// AppendCovers adds ti to the "covers" field.
func (m *ComicMutation) AppendCovers(ti []types.CoverImg) {
	m.appendcovers = append(m.appendcovers, ti...)
}

// AppendedCovers returns the list of values that were appended to the "covers" field in this mutation.
func (m *ComicMutation) AppendedCovers() ([]types.CoverImg, bool) {
	if len(m.appendcovers) == 0 {
		return nil, false
	}
	return m.appendcovers, true
}

// ResetCovers resets all changes to the "covers" field.
func (m *ComicMutation) ResetCovers() {
	m.covers = nil
	m.appendcovers = nil
}

// SetStatus sets the "status" field.
func (m *ComicMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *ComicMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Comic entity.
// If the Comic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ComicMutation) ResetStatus() {
	m.status = nil
}

// SetIsTranslateCompleted sets the "isTranslateCompleted" field.
func (m *ComicMutation) SetIsTranslateCompleted(b bool) {
	m.isTranslateCompleted = &b
}

// IsTranslateCompleted returns the value of the "isTranslateCompleted" field in the mutation.
func (m *ComicMutation) IsTranslateCompleted() (r bool, exists bool) {
	v := m.isTranslateCompleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsTranslateCompleted returns the old "isTranslateCompleted" field's value of the Comic entity.
// If the Comic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicMutation) OldIsTranslateCompleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsTranslateCompleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsTranslateCompleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsTranslateCompleted: %w", err)
	}
	return oldValue.IsTranslateCompleted, nil
}

// ResetIsTranslateCompleted resets all changes to the "isTranslateCompleted" field.
func (m *ComicMutation) ResetIsTranslateCompleted() {
	m.isTranslateCompleted = nil
}

// SetUpCount sets the "up_count" field.
func (m *ComicMutation) SetUpCount(u uint) {
	m.up_count = &u
	m.addup_count = nil
}

// UpCount returns the value of the "up_count" field in the mutation.
func (m *ComicMutation) UpCount() (r uint, exists bool) {
	v := m.up_count
	if v == nil {
		return
	}
	return *v, true
}

// OldUpCount returns the old "up_count" field's value of the Comic entity.
// If the Comic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicMutation) OldUpCount(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpCount: %w", err)
	}
	return oldValue.UpCount, nil
}

// AddUpCount adds u to the "up_count" field.
func (m *ComicMutation) AddUpCount(u int) {
	if m.addup_count != nil {
		*m.addup_count += u
	} else {
		m.addup_count = &u
	}
}

// AddedUpCount returns the value that was added to the "up_count" field in this mutation.
func (m *ComicMutation) AddedUpCount() (r int, exists bool) {
	v := m.addup_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpCount resets all changes to the "up_count" field.
func (m *ComicMutation) ResetUpCount() {
	m.up_count = nil
	m.addup_count = nil
}

// SetFinalChapterID sets the "final_chapter_id" field.
func (m *ComicMutation) SetFinalChapterID(s string) {
	m.final_chapter = &s
}

// FinalChapterID returns the value of the "final_chapter_id" field in the mutation.
func (m *ComicMutation) FinalChapterID() (r string, exists bool) {
	v := m.final_chapter
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalChapterID returns the old "final_chapter_id" field's value of the Comic entity.
// If the Comic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicMutation) OldFinalChapterID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalChapterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalChapterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalChapterID: %w", err)
	}
	return oldValue.FinalChapterID, nil
}

// ClearFinalChapterID clears the value of the "final_chapter_id" field.
func (m *ComicMutation) ClearFinalChapterID() {
	m.final_chapter = nil
	m.clearedFields[comic.FieldFinalChapterID] = struct{}{}
}

// FinalChapterIDCleared returns if the "final_chapter_id" field was cleared in this mutation.
func (m *ComicMutation) FinalChapterIDCleared() bool {
	_, ok := m.clearedFields[comic.FieldFinalChapterID]
	return ok
}

// ResetFinalChapterID resets all changes to the "final_chapter_id" field.
func (m *ComicMutation) ResetFinalChapterID() {
	m.final_chapter = nil
	delete(m.clearedFields, comic.FieldFinalChapterID)
}

// SetLastChapterID sets the "last_chapter_id" field.
func (m *ComicMutation) SetLastChapterID(s string) {
	m.last_chapter = &s
}

// LastChapterID returns the value of the "last_chapter_id" field in the mutation.
func (m *ComicMutation) LastChapterID() (r string, exists bool) {
	v := m.last_chapter
	if v == nil {
		return
	}
	return *v, true
}

// OldLastChapterID returns the old "last_chapter_id" field's value of the Comic entity.
// If the Comic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicMutation) OldLastChapterID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastChapterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastChapterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastChapterID: %w", err)
	}
	return oldValue.LastChapterID, nil
}

// ClearLastChapterID clears the value of the "last_chapter_id" field.
func (m *ComicMutation) ClearLastChapterID() {
	m.last_chapter = nil
	m.clearedFields[comic.FieldLastChapterID] = struct{}{}
}

// LastChapterIDCleared returns if the "last_chapter_id" field was cleared in this mutation.
func (m *ComicMutation) LastChapterIDCleared() bool {
	_, ok := m.clearedFields[comic.FieldLastChapterID]
	return ok
}

// ResetLastChapterID resets all changes to the "last_chapter_id" field.
func (m *ComicMutation) ResetLastChapterID() {
	m.last_chapter = nil
	delete(m.clearedFields, comic.FieldLastChapterID)
}

// AddChapterIDs adds the "chapters" edge to the ComicChapter entity by ids.
func (m *ComicMutation) AddChapterIDs(ids ...string) {
	if m.chapters == nil {
		m.chapters = make(map[string]struct{})
	}
	for i := range ids {
		m.chapters[ids[i]] = struct{}{}
	}
}

// ClearChapters clears the "chapters" edge to the ComicChapter entity.
func (m *ComicMutation) ClearChapters() {
	m.clearedchapters = true
}

// ChaptersCleared reports if the "chapters" edge to the ComicChapter entity was cleared.
func (m *ComicMutation) ChaptersCleared() bool {
	return m.clearedchapters
}

// RemoveChapterIDs removes the "chapters" edge to the ComicChapter entity by IDs.
func (m *ComicMutation) RemoveChapterIDs(ids ...string) {
	if m.removedchapters == nil {
		m.removedchapters = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.chapters, ids[i])
		m.removedchapters[ids[i]] = struct{}{}
	}
}

// RemovedChapters returns the removed IDs of the "chapters" edge to the ComicChapter entity.
func (m *ComicMutation) RemovedChaptersIDs() (ids []string) {
	for id := range m.removedchapters {
		ids = append(ids, id)
	}
	return
}

// ChaptersIDs returns the "chapters" edge IDs in the mutation.
func (m *ComicMutation) ChaptersIDs() (ids []string) {
	for id := range m.chapters {
		ids = append(ids, id)
	}
	return
}

// ResetChapters resets all changes to the "chapters" edge.
func (m *ComicMutation) ResetChapters() {
	m.chapters = nil
	m.clearedchapters = false
	m.removedchapters = nil
}

// ClearLastChapter clears the "last_chapter" edge to the ComicChapter entity.
func (m *ComicMutation) ClearLastChapter() {
	m.clearedlast_chapter = true
	m.clearedFields[comic.FieldLastChapterID] = struct{}{}
}

// LastChapterCleared reports if the "last_chapter" edge to the ComicChapter entity was cleared.
func (m *ComicMutation) LastChapterCleared() bool {
	return m.LastChapterIDCleared() || m.clearedlast_chapter
}

// LastChapterIDs returns the "last_chapter" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LastChapterID instead. It exists only for internal usage by the builders.
func (m *ComicMutation) LastChapterIDs() (ids []string) {
	if id := m.last_chapter; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLastChapter resets all changes to the "last_chapter" edge.
func (m *ComicMutation) ResetLastChapter() {
	m.last_chapter = nil
	m.clearedlast_chapter = false
}

// ClearFinalChapter clears the "final_chapter" edge to the ComicChapter entity.
func (m *ComicMutation) ClearFinalChapter() {
	m.clearedfinal_chapter = true
	m.clearedFields[comic.FieldFinalChapterID] = struct{}{}
}

// FinalChapterCleared reports if the "final_chapter" edge to the ComicChapter entity was cleared.
func (m *ComicMutation) FinalChapterCleared() bool {
	return m.FinalChapterIDCleared() || m.clearedfinal_chapter
}

// FinalChapterIDs returns the "final_chapter" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FinalChapterID instead. It exists only for internal usage by the builders.
func (m *ComicMutation) FinalChapterIDs() (ids []string) {
	if id := m.final_chapter; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFinalChapter resets all changes to the "final_chapter" edge.
func (m *ComicMutation) ResetFinalChapter() {
	m.final_chapter = nil
	m.clearedfinal_chapter = false
}

// Where appends a list predicates to the ComicMutation builder.
func (m *ComicMutation) Where(ps ...predicate.Comic) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ComicMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ComicMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Comic, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ComicMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ComicMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Comic).
func (m *ComicMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComicMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, comic.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, comic.FieldUpdatedAt)
	}
	if m.chapter != nil {
		fields = append(fields, comic.FieldChapter)
	}
	if m.title != nil {
		fields = append(fields, comic.FieldTitle)
	}
	if m.slug != nil {
		fields = append(fields, comic.FieldSlug)
	}
	if m.covers != nil {
		fields = append(fields, comic.FieldCovers)
	}
	if m.status != nil {
		fields = append(fields, comic.FieldStatus)
	}
	if m.isTranslateCompleted != nil {
		fields = append(fields, comic.FieldIsTranslateCompleted)
	}
	if m.up_count != nil {
		fields = append(fields, comic.FieldUpCount)
	}
	if m.final_chapter != nil {
		fields = append(fields, comic.FieldFinalChapterID)
	}
	if m.last_chapter != nil {
		fields = append(fields, comic.FieldLastChapterID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComicMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case comic.FieldCreatedAt:
		return m.CreatedAt()
	case comic.FieldUpdatedAt:
		return m.UpdatedAt()
	case comic.FieldChapter:
		return m.Chapter()
	case comic.FieldTitle:
		return m.Title()
	case comic.FieldSlug:
		return m.Slug()
	case comic.FieldCovers:
		return m.Covers()
	case comic.FieldStatus:
		return m.Status()
	case comic.FieldIsTranslateCompleted:
		return m.IsTranslateCompleted()
	case comic.FieldUpCount:
		return m.UpCount()
	case comic.FieldFinalChapterID:
		return m.FinalChapterID()
	case comic.FieldLastChapterID:
		return m.LastChapterID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComicMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case comic.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case comic.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case comic.FieldChapter:
		return m.OldChapter(ctx)
	case comic.FieldTitle:
		return m.OldTitle(ctx)
	case comic.FieldSlug:
		return m.OldSlug(ctx)
	case comic.FieldCovers:
		return m.OldCovers(ctx)
	case comic.FieldStatus:
		return m.OldStatus(ctx)
	case comic.FieldIsTranslateCompleted:
		return m.OldIsTranslateCompleted(ctx)
	case comic.FieldUpCount:
		return m.OldUpCount(ctx)
	case comic.FieldFinalChapterID:
		return m.OldFinalChapterID(ctx)
	case comic.FieldLastChapterID:
		return m.OldLastChapterID(ctx)
	}
	return nil, fmt.Errorf("unknown Comic field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComicMutation) SetField(name string, value ent.Value) error {
	switch name {
	case comic.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case comic.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case comic.FieldChapter:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChapter(v)
		return nil
	case comic.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case comic.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case comic.FieldCovers:
		v, ok := value.([]types.CoverImg)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCovers(v)
		return nil
	case comic.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case comic.FieldIsTranslateCompleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsTranslateCompleted(v)
		return nil
	case comic.FieldUpCount:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpCount(v)
		return nil
	case comic.FieldFinalChapterID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalChapterID(v)
		return nil
	case comic.FieldLastChapterID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastChapterID(v)
		return nil
	}
	return fmt.Errorf("unknown Comic field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComicMutation) AddedFields() []string {
	var fields []string
	if m.addchapter != nil {
		fields = append(fields, comic.FieldChapter)
	}
	if m.addup_count != nil {
		fields = append(fields, comic.FieldUpCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComicMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case comic.FieldChapter:
		return m.AddedChapter()
	case comic.FieldUpCount:
		return m.AddedUpCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComicMutation) AddField(name string, value ent.Value) error {
	switch name {
	case comic.FieldChapter:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChapter(v)
		return nil
	case comic.FieldUpCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpCount(v)
		return nil
	}
	return fmt.Errorf("unknown Comic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComicMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(comic.FieldFinalChapterID) {
		fields = append(fields, comic.FieldFinalChapterID)
	}
	if m.FieldCleared(comic.FieldLastChapterID) {
		fields = append(fields, comic.FieldLastChapterID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComicMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComicMutation) ClearField(name string) error {
	switch name {
	case comic.FieldFinalChapterID:
		m.ClearFinalChapterID()
		return nil
	case comic.FieldLastChapterID:
		m.ClearLastChapterID()
		return nil
	}
	return fmt.Errorf("unknown Comic nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComicMutation) ResetField(name string) error {
	switch name {
	case comic.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case comic.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case comic.FieldChapter:
		m.ResetChapter()
		return nil
	case comic.FieldTitle:
		m.ResetTitle()
		return nil
	case comic.FieldSlug:
		m.ResetSlug()
		return nil
	case comic.FieldCovers:
		m.ResetCovers()
		return nil
	case comic.FieldStatus:
		m.ResetStatus()
		return nil
	case comic.FieldIsTranslateCompleted:
		m.ResetIsTranslateCompleted()
		return nil
	case comic.FieldUpCount:
		m.ResetUpCount()
		return nil
	case comic.FieldFinalChapterID:
		m.ResetFinalChapterID()
		return nil
	case comic.FieldLastChapterID:
		m.ResetLastChapterID()
		return nil
	}
	return fmt.Errorf("unknown Comic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComicMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.chapters != nil {
		edges = append(edges, comic.EdgeChapters)
	}
	if m.last_chapter != nil {
		edges = append(edges, comic.EdgeLastChapter)
	}
	if m.final_chapter != nil {
		edges = append(edges, comic.EdgeFinalChapter)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComicMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case comic.EdgeChapters:
		ids := make([]ent.Value, 0, len(m.chapters))
		for id := range m.chapters {
			ids = append(ids, id)
		}
		return ids
	case comic.EdgeLastChapter:
		if id := m.last_chapter; id != nil {
			return []ent.Value{*id}
		}
	case comic.EdgeFinalChapter:
		if id := m.final_chapter; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComicMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchapters != nil {
		edges = append(edges, comic.EdgeChapters)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComicMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case comic.EdgeChapters:
		ids := make([]ent.Value, 0, len(m.removedchapters))
		for id := range m.removedchapters {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComicMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedchapters {
		edges = append(edges, comic.EdgeChapters)
	}
	if m.clearedlast_chapter {
		edges = append(edges, comic.EdgeLastChapter)
	}
	if m.clearedfinal_chapter {
		edges = append(edges, comic.EdgeFinalChapter)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComicMutation) EdgeCleared(name string) bool {
	switch name {
	case comic.EdgeChapters:
		return m.clearedchapters
	case comic.EdgeLastChapter:
		return m.clearedlast_chapter
	case comic.EdgeFinalChapter:
		return m.clearedfinal_chapter
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComicMutation) ClearEdge(name string) error {
	switch name {
	case comic.EdgeLastChapter:
		m.ClearLastChapter()
		return nil
	case comic.EdgeFinalChapter:
		m.ClearFinalChapter()
		return nil
	}
	return fmt.Errorf("unknown Comic unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComicMutation) ResetEdge(name string) error {
	switch name {
	case comic.EdgeChapters:
		m.ResetChapters()
		return nil
	case comic.EdgeLastChapter:
		m.ResetLastChapter()
		return nil
	case comic.EdgeFinalChapter:
		m.ResetFinalChapter()
		return nil
	}
	return fmt.Errorf("unknown Comic edge %s", name)
}

// ComicChapterMutation represents an operation that mutates the ComicChapter nodes in the graph.
type ComicChapterMutation struct {
	config
	op              Op
	typ             string
	id              *string
	created_at      *time.Time
	updated_at      *time.Time
	chapter         *uint
	addchapter      *int
	title           *string
	volumn          *string
	lang            *string
	up_count        *uint
	addup_count     *int
	down_count      *uint
	adddown_count   *int
	is_last_chapter *bool
	clearedFields   map[string]struct{}
	imgs            map[string]struct{}
	removedimgs     map[string]struct{}
	clearedimgs     bool
	comic           *string
	clearedcomic    bool
	done            bool
	oldValue        func(context.Context) (*ComicChapter, error)
	predicates      []predicate.ComicChapter
}

var _ ent.Mutation = (*ComicChapterMutation)(nil)

// comicchapterOption allows management of the mutation configuration using functional options.
type comicchapterOption func(*ComicChapterMutation)

// newComicChapterMutation creates new mutation for the ComicChapter entity.
func newComicChapterMutation(c config, op Op, opts ...comicchapterOption) *ComicChapterMutation {
	m := &ComicChapterMutation{
		config:        c,
		op:            op,
		typ:           TypeComicChapter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComicChapterID sets the ID field of the mutation.
func withComicChapterID(id string) comicchapterOption {
	return func(m *ComicChapterMutation) {
		var (
			err   error
			once  sync.Once
			value *ComicChapter
		)
		m.oldValue = func(ctx context.Context) (*ComicChapter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ComicChapter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComicChapter sets the old ComicChapter of the mutation.
func withComicChapter(node *ComicChapter) comicchapterOption {
	return func(m *ComicChapterMutation) {
		m.oldValue = func(context.Context) (*ComicChapter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComicChapterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComicChapterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ComicChapter entities.
func (m *ComicChapterMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComicChapterMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ComicChapterMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ComicChapter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ComicChapterMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ComicChapterMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ComicChapter entity.
// If the ComicChapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicChapterMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ComicChapterMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ComicChapterMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ComicChapterMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ComicChapter entity.
// If the ComicChapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicChapterMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ComicChapterMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetChapter sets the "chapter" field.
func (m *ComicChapterMutation) SetChapter(u uint) {
	m.chapter = &u
	m.addchapter = nil
}

// Chapter returns the value of the "chapter" field in the mutation.
func (m *ComicChapterMutation) Chapter() (r uint, exists bool) {
	v := m.chapter
	if v == nil {
		return
	}
	return *v, true
}

// OldChapter returns the old "chapter" field's value of the ComicChapter entity.
// If the ComicChapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicChapterMutation) OldChapter(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChapter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChapter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChapter: %w", err)
	}
	return oldValue.Chapter, nil
}

// AddChapter adds u to the "chapter" field.
func (m *ComicChapterMutation) AddChapter(u int) {
	if m.addchapter != nil {
		*m.addchapter += u
	} else {
		m.addchapter = &u
	}
}

// AddedChapter returns the value that was added to the "chapter" field in this mutation.
func (m *ComicChapterMutation) AddedChapter() (r int, exists bool) {
	v := m.addchapter
	if v == nil {
		return
	}
	return *v, true
}

// ResetChapter resets all changes to the "chapter" field.
func (m *ComicChapterMutation) ResetChapter() {
	m.chapter = nil
	m.addchapter = nil
}

// SetTitle sets the "title" field.
func (m *ComicChapterMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ComicChapterMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the ComicChapter entity.
// If the ComicChapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicChapterMutation) OldTitle(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *ComicChapterMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[comicchapter.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *ComicChapterMutation) TitleCleared() bool {
	_, ok := m.clearedFields[comicchapter.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *ComicChapterMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, comicchapter.FieldTitle)
}

// SetVolumn sets the "volumn" field.
func (m *ComicChapterMutation) SetVolumn(s string) {
	m.volumn = &s
}

// Volumn returns the value of the "volumn" field in the mutation.
func (m *ComicChapterMutation) Volumn() (r string, exists bool) {
	v := m.volumn
	if v == nil {
		return
	}
	return *v, true
}

// OldVolumn returns the old "volumn" field's value of the ComicChapter entity.
// If the ComicChapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicChapterMutation) OldVolumn(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVolumn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVolumn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVolumn: %w", err)
	}
	return oldValue.Volumn, nil
}

// ClearVolumn clears the value of the "volumn" field.
func (m *ComicChapterMutation) ClearVolumn() {
	m.volumn = nil
	m.clearedFields[comicchapter.FieldVolumn] = struct{}{}
}

// VolumnCleared returns if the "volumn" field was cleared in this mutation.
func (m *ComicChapterMutation) VolumnCleared() bool {
	_, ok := m.clearedFields[comicchapter.FieldVolumn]
	return ok
}

// ResetVolumn resets all changes to the "volumn" field.
func (m *ComicChapterMutation) ResetVolumn() {
	m.volumn = nil
	delete(m.clearedFields, comicchapter.FieldVolumn)
}

// SetLang sets the "lang" field.
func (m *ComicChapterMutation) SetLang(s string) {
	m.lang = &s
}

// Lang returns the value of the "lang" field in the mutation.
func (m *ComicChapterMutation) Lang() (r string, exists bool) {
	v := m.lang
	if v == nil {
		return
	}
	return *v, true
}

// OldLang returns the old "lang" field's value of the ComicChapter entity.
// If the ComicChapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicChapterMutation) OldLang(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang: %w", err)
	}
	return oldValue.Lang, nil
}

// ResetLang resets all changes to the "lang" field.
func (m *ComicChapterMutation) ResetLang() {
	m.lang = nil
}

// SetUpCount sets the "up_count" field.
func (m *ComicChapterMutation) SetUpCount(u uint) {
	m.up_count = &u
	m.addup_count = nil
}

// UpCount returns the value of the "up_count" field in the mutation.
func (m *ComicChapterMutation) UpCount() (r uint, exists bool) {
	v := m.up_count
	if v == nil {
		return
	}
	return *v, true
}

// OldUpCount returns the old "up_count" field's value of the ComicChapter entity.
// If the ComicChapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicChapterMutation) OldUpCount(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpCount: %w", err)
	}
	return oldValue.UpCount, nil
}

// AddUpCount adds u to the "up_count" field.
func (m *ComicChapterMutation) AddUpCount(u int) {
	if m.addup_count != nil {
		*m.addup_count += u
	} else {
		m.addup_count = &u
	}
}

// AddedUpCount returns the value that was added to the "up_count" field in this mutation.
func (m *ComicChapterMutation) AddedUpCount() (r int, exists bool) {
	v := m.addup_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpCount resets all changes to the "up_count" field.
func (m *ComicChapterMutation) ResetUpCount() {
	m.up_count = nil
	m.addup_count = nil
}

// SetDownCount sets the "down_count" field.
func (m *ComicChapterMutation) SetDownCount(u uint) {
	m.down_count = &u
	m.adddown_count = nil
}

// DownCount returns the value of the "down_count" field in the mutation.
func (m *ComicChapterMutation) DownCount() (r uint, exists bool) {
	v := m.down_count
	if v == nil {
		return
	}
	return *v, true
}

// OldDownCount returns the old "down_count" field's value of the ComicChapter entity.
// If the ComicChapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicChapterMutation) OldDownCount(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDownCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDownCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDownCount: %w", err)
	}
	return oldValue.DownCount, nil
}

// AddDownCount adds u to the "down_count" field.
func (m *ComicChapterMutation) AddDownCount(u int) {
	if m.adddown_count != nil {
		*m.adddown_count += u
	} else {
		m.adddown_count = &u
	}
}

// AddedDownCount returns the value that was added to the "down_count" field in this mutation.
func (m *ComicChapterMutation) AddedDownCount() (r int, exists bool) {
	v := m.adddown_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetDownCount resets all changes to the "down_count" field.
func (m *ComicChapterMutation) ResetDownCount() {
	m.down_count = nil
	m.adddown_count = nil
}

// SetIsLastChapter sets the "is_last_chapter" field.
func (m *ComicChapterMutation) SetIsLastChapter(b bool) {
	m.is_last_chapter = &b
}

// IsLastChapter returns the value of the "is_last_chapter" field in the mutation.
func (m *ComicChapterMutation) IsLastChapter() (r bool, exists bool) {
	v := m.is_last_chapter
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLastChapter returns the old "is_last_chapter" field's value of the ComicChapter entity.
// If the ComicChapter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicChapterMutation) OldIsLastChapter(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLastChapter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLastChapter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLastChapter: %w", err)
	}
	return oldValue.IsLastChapter, nil
}

// ResetIsLastChapter resets all changes to the "is_last_chapter" field.
func (m *ComicChapterMutation) ResetIsLastChapter() {
	m.is_last_chapter = nil
}

// AddImgIDs adds the "imgs" edge to the ComicImg entity by ids.
func (m *ComicChapterMutation) AddImgIDs(ids ...string) {
	if m.imgs == nil {
		m.imgs = make(map[string]struct{})
	}
	for i := range ids {
		m.imgs[ids[i]] = struct{}{}
	}
}

// ClearImgs clears the "imgs" edge to the ComicImg entity.
func (m *ComicChapterMutation) ClearImgs() {
	m.clearedimgs = true
}

// ImgsCleared reports if the "imgs" edge to the ComicImg entity was cleared.
func (m *ComicChapterMutation) ImgsCleared() bool {
	return m.clearedimgs
}

// RemoveImgIDs removes the "imgs" edge to the ComicImg entity by IDs.
func (m *ComicChapterMutation) RemoveImgIDs(ids ...string) {
	if m.removedimgs == nil {
		m.removedimgs = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.imgs, ids[i])
		m.removedimgs[ids[i]] = struct{}{}
	}
}

// RemovedImgs returns the removed IDs of the "imgs" edge to the ComicImg entity.
func (m *ComicChapterMutation) RemovedImgsIDs() (ids []string) {
	for id := range m.removedimgs {
		ids = append(ids, id)
	}
	return
}

// ImgsIDs returns the "imgs" edge IDs in the mutation.
func (m *ComicChapterMutation) ImgsIDs() (ids []string) {
	for id := range m.imgs {
		ids = append(ids, id)
	}
	return
}

// ResetImgs resets all changes to the "imgs" edge.
func (m *ComicChapterMutation) ResetImgs() {
	m.imgs = nil
	m.clearedimgs = false
	m.removedimgs = nil
}

// SetComicID sets the "comic" edge to the Comic entity by id.
func (m *ComicChapterMutation) SetComicID(id string) {
	m.comic = &id
}

// ClearComic clears the "comic" edge to the Comic entity.
func (m *ComicChapterMutation) ClearComic() {
	m.clearedcomic = true
}

// ComicCleared reports if the "comic" edge to the Comic entity was cleared.
func (m *ComicChapterMutation) ComicCleared() bool {
	return m.clearedcomic
}

// ComicID returns the "comic" edge ID in the mutation.
func (m *ComicChapterMutation) ComicID() (id string, exists bool) {
	if m.comic != nil {
		return *m.comic, true
	}
	return
}

// ComicIDs returns the "comic" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ComicID instead. It exists only for internal usage by the builders.
func (m *ComicChapterMutation) ComicIDs() (ids []string) {
	if id := m.comic; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetComic resets all changes to the "comic" edge.
func (m *ComicChapterMutation) ResetComic() {
	m.comic = nil
	m.clearedcomic = false
}

// Where appends a list predicates to the ComicChapterMutation builder.
func (m *ComicChapterMutation) Where(ps ...predicate.ComicChapter) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ComicChapterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ComicChapterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ComicChapter, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ComicChapterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ComicChapterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ComicChapter).
func (m *ComicChapterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComicChapterMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, comicchapter.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, comicchapter.FieldUpdatedAt)
	}
	if m.chapter != nil {
		fields = append(fields, comicchapter.FieldChapter)
	}
	if m.title != nil {
		fields = append(fields, comicchapter.FieldTitle)
	}
	if m.volumn != nil {
		fields = append(fields, comicchapter.FieldVolumn)
	}
	if m.lang != nil {
		fields = append(fields, comicchapter.FieldLang)
	}
	if m.up_count != nil {
		fields = append(fields, comicchapter.FieldUpCount)
	}
	if m.down_count != nil {
		fields = append(fields, comicchapter.FieldDownCount)
	}
	if m.is_last_chapter != nil {
		fields = append(fields, comicchapter.FieldIsLastChapter)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComicChapterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case comicchapter.FieldCreatedAt:
		return m.CreatedAt()
	case comicchapter.FieldUpdatedAt:
		return m.UpdatedAt()
	case comicchapter.FieldChapter:
		return m.Chapter()
	case comicchapter.FieldTitle:
		return m.Title()
	case comicchapter.FieldVolumn:
		return m.Volumn()
	case comicchapter.FieldLang:
		return m.Lang()
	case comicchapter.FieldUpCount:
		return m.UpCount()
	case comicchapter.FieldDownCount:
		return m.DownCount()
	case comicchapter.FieldIsLastChapter:
		return m.IsLastChapter()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComicChapterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case comicchapter.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case comicchapter.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case comicchapter.FieldChapter:
		return m.OldChapter(ctx)
	case comicchapter.FieldTitle:
		return m.OldTitle(ctx)
	case comicchapter.FieldVolumn:
		return m.OldVolumn(ctx)
	case comicchapter.FieldLang:
		return m.OldLang(ctx)
	case comicchapter.FieldUpCount:
		return m.OldUpCount(ctx)
	case comicchapter.FieldDownCount:
		return m.OldDownCount(ctx)
	case comicchapter.FieldIsLastChapter:
		return m.OldIsLastChapter(ctx)
	}
	return nil, fmt.Errorf("unknown ComicChapter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComicChapterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case comicchapter.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case comicchapter.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case comicchapter.FieldChapter:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChapter(v)
		return nil
	case comicchapter.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case comicchapter.FieldVolumn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVolumn(v)
		return nil
	case comicchapter.FieldLang:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang(v)
		return nil
	case comicchapter.FieldUpCount:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpCount(v)
		return nil
	case comicchapter.FieldDownCount:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDownCount(v)
		return nil
	case comicchapter.FieldIsLastChapter:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLastChapter(v)
		return nil
	}
	return fmt.Errorf("unknown ComicChapter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComicChapterMutation) AddedFields() []string {
	var fields []string
	if m.addchapter != nil {
		fields = append(fields, comicchapter.FieldChapter)
	}
	if m.addup_count != nil {
		fields = append(fields, comicchapter.FieldUpCount)
	}
	if m.adddown_count != nil {
		fields = append(fields, comicchapter.FieldDownCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComicChapterMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case comicchapter.FieldChapter:
		return m.AddedChapter()
	case comicchapter.FieldUpCount:
		return m.AddedUpCount()
	case comicchapter.FieldDownCount:
		return m.AddedDownCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComicChapterMutation) AddField(name string, value ent.Value) error {
	switch name {
	case comicchapter.FieldChapter:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChapter(v)
		return nil
	case comicchapter.FieldUpCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpCount(v)
		return nil
	case comicchapter.FieldDownCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDownCount(v)
		return nil
	}
	return fmt.Errorf("unknown ComicChapter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComicChapterMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(comicchapter.FieldTitle) {
		fields = append(fields, comicchapter.FieldTitle)
	}
	if m.FieldCleared(comicchapter.FieldVolumn) {
		fields = append(fields, comicchapter.FieldVolumn)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComicChapterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComicChapterMutation) ClearField(name string) error {
	switch name {
	case comicchapter.FieldTitle:
		m.ClearTitle()
		return nil
	case comicchapter.FieldVolumn:
		m.ClearVolumn()
		return nil
	}
	return fmt.Errorf("unknown ComicChapter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComicChapterMutation) ResetField(name string) error {
	switch name {
	case comicchapter.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case comicchapter.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case comicchapter.FieldChapter:
		m.ResetChapter()
		return nil
	case comicchapter.FieldTitle:
		m.ResetTitle()
		return nil
	case comicchapter.FieldVolumn:
		m.ResetVolumn()
		return nil
	case comicchapter.FieldLang:
		m.ResetLang()
		return nil
	case comicchapter.FieldUpCount:
		m.ResetUpCount()
		return nil
	case comicchapter.FieldDownCount:
		m.ResetDownCount()
		return nil
	case comicchapter.FieldIsLastChapter:
		m.ResetIsLastChapter()
		return nil
	}
	return fmt.Errorf("unknown ComicChapter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComicChapterMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.imgs != nil {
		edges = append(edges, comicchapter.EdgeImgs)
	}
	if m.comic != nil {
		edges = append(edges, comicchapter.EdgeComic)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComicChapterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case comicchapter.EdgeImgs:
		ids := make([]ent.Value, 0, len(m.imgs))
		for id := range m.imgs {
			ids = append(ids, id)
		}
		return ids
	case comicchapter.EdgeComic:
		if id := m.comic; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComicChapterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedimgs != nil {
		edges = append(edges, comicchapter.EdgeImgs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComicChapterMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case comicchapter.EdgeImgs:
		ids := make([]ent.Value, 0, len(m.removedimgs))
		for id := range m.removedimgs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComicChapterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedimgs {
		edges = append(edges, comicchapter.EdgeImgs)
	}
	if m.clearedcomic {
		edges = append(edges, comicchapter.EdgeComic)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComicChapterMutation) EdgeCleared(name string) bool {
	switch name {
	case comicchapter.EdgeImgs:
		return m.clearedimgs
	case comicchapter.EdgeComic:
		return m.clearedcomic
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComicChapterMutation) ClearEdge(name string) error {
	switch name {
	case comicchapter.EdgeComic:
		m.ClearComic()
		return nil
	}
	return fmt.Errorf("unknown ComicChapter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComicChapterMutation) ResetEdge(name string) error {
	switch name {
	case comicchapter.EdgeImgs:
		m.ResetImgs()
		return nil
	case comicchapter.EdgeComic:
		m.ResetComic()
		return nil
	}
	return fmt.Errorf("unknown ComicChapter edge %s", name)
}

// ComicImgMutation represents an operation that mutates the ComicImg nodes in the graph.
type ComicImgMutation struct {
	config
	op                Op
	typ               string
	id                *string
	created_at        *time.Time
	updated_at        *time.Time
	b2key             *string
	height            *int
	addheight         *int
	name              *string
	optimized_size    *int64
	addoptimized_size *int64
	size              *int64
	addsize           *int64
	width             *int
	addwidth          *int
	clearedFields     map[string]struct{}
	chapter           *string
	clearedchapter    bool
	done              bool
	oldValue          func(context.Context) (*ComicImg, error)
	predicates        []predicate.ComicImg
}

var _ ent.Mutation = (*ComicImgMutation)(nil)

// comicimgOption allows management of the mutation configuration using functional options.
type comicimgOption func(*ComicImgMutation)

// newComicImgMutation creates new mutation for the ComicImg entity.
func newComicImgMutation(c config, op Op, opts ...comicimgOption) *ComicImgMutation {
	m := &ComicImgMutation{
		config:        c,
		op:            op,
		typ:           TypeComicImg,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComicImgID sets the ID field of the mutation.
func withComicImgID(id string) comicimgOption {
	return func(m *ComicImgMutation) {
		var (
			err   error
			once  sync.Once
			value *ComicImg
		)
		m.oldValue = func(ctx context.Context) (*ComicImg, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ComicImg.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComicImg sets the old ComicImg of the mutation.
func withComicImg(node *ComicImg) comicimgOption {
	return func(m *ComicImgMutation) {
		m.oldValue = func(context.Context) (*ComicImg, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComicImgMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComicImgMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ComicImg entities.
func (m *ComicImgMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComicImgMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ComicImgMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ComicImg.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ComicImgMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ComicImgMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ComicImg entity.
// If the ComicImg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicImgMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ComicImgMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ComicImgMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ComicImgMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ComicImg entity.
// If the ComicImg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicImgMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ComicImgMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetB2key sets the "b2key" field.
func (m *ComicImgMutation) SetB2key(s string) {
	m.b2key = &s
}

// B2key returns the value of the "b2key" field in the mutation.
func (m *ComicImgMutation) B2key() (r string, exists bool) {
	v := m.b2key
	if v == nil {
		return
	}
	return *v, true
}

// OldB2key returns the old "b2key" field's value of the ComicImg entity.
// If the ComicImg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicImgMutation) OldB2key(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldB2key is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldB2key requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldB2key: %w", err)
	}
	return oldValue.B2key, nil
}

// ResetB2key resets all changes to the "b2key" field.
func (m *ComicImgMutation) ResetB2key() {
	m.b2key = nil
}

// SetHeight sets the "height" field.
func (m *ComicImgMutation) SetHeight(i int) {
	m.height = &i
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *ComicImgMutation) Height() (r int, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the ComicImg entity.
// If the ComicImg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicImgMutation) OldHeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds i to the "height" field.
func (m *ComicImgMutation) AddHeight(i int) {
	if m.addheight != nil {
		*m.addheight += i
	} else {
		m.addheight = &i
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *ComicImgMutation) AddedHeight() (r int, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *ComicImgMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetName sets the "name" field.
func (m *ComicImgMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ComicImgMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ComicImg entity.
// If the ComicImg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicImgMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ComicImgMutation) ResetName() {
	m.name = nil
}

// SetOptimizedSize sets the "optimized_size" field.
func (m *ComicImgMutation) SetOptimizedSize(i int64) {
	m.optimized_size = &i
	m.addoptimized_size = nil
}

// OptimizedSize returns the value of the "optimized_size" field in the mutation.
func (m *ComicImgMutation) OptimizedSize() (r int64, exists bool) {
	v := m.optimized_size
	if v == nil {
		return
	}
	return *v, true
}

// OldOptimizedSize returns the old "optimized_size" field's value of the ComicImg entity.
// If the ComicImg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicImgMutation) OldOptimizedSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOptimizedSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOptimizedSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOptimizedSize: %w", err)
	}
	return oldValue.OptimizedSize, nil
}

// AddOptimizedSize adds i to the "optimized_size" field.
func (m *ComicImgMutation) AddOptimizedSize(i int64) {
	if m.addoptimized_size != nil {
		*m.addoptimized_size += i
	} else {
		m.addoptimized_size = &i
	}
}

// AddedOptimizedSize returns the value that was added to the "optimized_size" field in this mutation.
func (m *ComicImgMutation) AddedOptimizedSize() (r int64, exists bool) {
	v := m.addoptimized_size
	if v == nil {
		return
	}
	return *v, true
}

// ResetOptimizedSize resets all changes to the "optimized_size" field.
func (m *ComicImgMutation) ResetOptimizedSize() {
	m.optimized_size = nil
	m.addoptimized_size = nil
}

// SetSize sets the "size" field.
func (m *ComicImgMutation) SetSize(i int64) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *ComicImgMutation) Size() (r int64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the ComicImg entity.
// If the ComicImg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicImgMutation) OldSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *ComicImgMutation) AddSize(i int64) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *ComicImgMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *ComicImgMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetWidth sets the "width" field.
func (m *ComicImgMutation) SetWidth(i int) {
	m.width = &i
	m.addwidth = nil
}

// Width returns the value of the "width" field in the mutation.
func (m *ComicImgMutation) Width() (r int, exists bool) {
	v := m.width
	if v == nil {
		return
	}
	return *v, true
}

// OldWidth returns the old "width" field's value of the ComicImg entity.
// If the ComicImg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComicImgMutation) OldWidth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidth: %w", err)
	}
	return oldValue.Width, nil
}

// AddWidth adds i to the "width" field.
func (m *ComicImgMutation) AddWidth(i int) {
	if m.addwidth != nil {
		*m.addwidth += i
	} else {
		m.addwidth = &i
	}
}

// AddedWidth returns the value that was added to the "width" field in this mutation.
func (m *ComicImgMutation) AddedWidth() (r int, exists bool) {
	v := m.addwidth
	if v == nil {
		return
	}
	return *v, true
}

// ResetWidth resets all changes to the "width" field.
func (m *ComicImgMutation) ResetWidth() {
	m.width = nil
	m.addwidth = nil
}

// SetChapterID sets the "chapter" edge to the ComicChapter entity by id.
func (m *ComicImgMutation) SetChapterID(id string) {
	m.chapter = &id
}

// ClearChapter clears the "chapter" edge to the ComicChapter entity.
func (m *ComicImgMutation) ClearChapter() {
	m.clearedchapter = true
}

// ChapterCleared reports if the "chapter" edge to the ComicChapter entity was cleared.
func (m *ComicImgMutation) ChapterCleared() bool {
	return m.clearedchapter
}

// ChapterID returns the "chapter" edge ID in the mutation.
func (m *ComicImgMutation) ChapterID() (id string, exists bool) {
	if m.chapter != nil {
		return *m.chapter, true
	}
	return
}

// ChapterIDs returns the "chapter" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChapterID instead. It exists only for internal usage by the builders.
func (m *ComicImgMutation) ChapterIDs() (ids []string) {
	if id := m.chapter; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChapter resets all changes to the "chapter" edge.
func (m *ComicImgMutation) ResetChapter() {
	m.chapter = nil
	m.clearedchapter = false
}

// Where appends a list predicates to the ComicImgMutation builder.
func (m *ComicImgMutation) Where(ps ...predicate.ComicImg) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ComicImgMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ComicImgMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ComicImg, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ComicImgMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ComicImgMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ComicImg).
func (m *ComicImgMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComicImgMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, comicimg.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, comicimg.FieldUpdatedAt)
	}
	if m.b2key != nil {
		fields = append(fields, comicimg.FieldB2key)
	}
	if m.height != nil {
		fields = append(fields, comicimg.FieldHeight)
	}
	if m.name != nil {
		fields = append(fields, comicimg.FieldName)
	}
	if m.optimized_size != nil {
		fields = append(fields, comicimg.FieldOptimizedSize)
	}
	if m.size != nil {
		fields = append(fields, comicimg.FieldSize)
	}
	if m.width != nil {
		fields = append(fields, comicimg.FieldWidth)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComicImgMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case comicimg.FieldCreatedAt:
		return m.CreatedAt()
	case comicimg.FieldUpdatedAt:
		return m.UpdatedAt()
	case comicimg.FieldB2key:
		return m.B2key()
	case comicimg.FieldHeight:
		return m.Height()
	case comicimg.FieldName:
		return m.Name()
	case comicimg.FieldOptimizedSize:
		return m.OptimizedSize()
	case comicimg.FieldSize:
		return m.Size()
	case comicimg.FieldWidth:
		return m.Width()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComicImgMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case comicimg.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case comicimg.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case comicimg.FieldB2key:
		return m.OldB2key(ctx)
	case comicimg.FieldHeight:
		return m.OldHeight(ctx)
	case comicimg.FieldName:
		return m.OldName(ctx)
	case comicimg.FieldOptimizedSize:
		return m.OldOptimizedSize(ctx)
	case comicimg.FieldSize:
		return m.OldSize(ctx)
	case comicimg.FieldWidth:
		return m.OldWidth(ctx)
	}
	return nil, fmt.Errorf("unknown ComicImg field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComicImgMutation) SetField(name string, value ent.Value) error {
	switch name {
	case comicimg.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case comicimg.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case comicimg.FieldB2key:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetB2key(v)
		return nil
	case comicimg.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case comicimg.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case comicimg.FieldOptimizedSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOptimizedSize(v)
		return nil
	case comicimg.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case comicimg.FieldWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidth(v)
		return nil
	}
	return fmt.Errorf("unknown ComicImg field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComicImgMutation) AddedFields() []string {
	var fields []string
	if m.addheight != nil {
		fields = append(fields, comicimg.FieldHeight)
	}
	if m.addoptimized_size != nil {
		fields = append(fields, comicimg.FieldOptimizedSize)
	}
	if m.addsize != nil {
		fields = append(fields, comicimg.FieldSize)
	}
	if m.addwidth != nil {
		fields = append(fields, comicimg.FieldWidth)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComicImgMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case comicimg.FieldHeight:
		return m.AddedHeight()
	case comicimg.FieldOptimizedSize:
		return m.AddedOptimizedSize()
	case comicimg.FieldSize:
		return m.AddedSize()
	case comicimg.FieldWidth:
		return m.AddedWidth()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComicImgMutation) AddField(name string, value ent.Value) error {
	switch name {
	case comicimg.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case comicimg.FieldOptimizedSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOptimizedSize(v)
		return nil
	case comicimg.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	case comicimg.FieldWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWidth(v)
		return nil
	}
	return fmt.Errorf("unknown ComicImg numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComicImgMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComicImgMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComicImgMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ComicImg nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComicImgMutation) ResetField(name string) error {
	switch name {
	case comicimg.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case comicimg.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case comicimg.FieldB2key:
		m.ResetB2key()
		return nil
	case comicimg.FieldHeight:
		m.ResetHeight()
		return nil
	case comicimg.FieldName:
		m.ResetName()
		return nil
	case comicimg.FieldOptimizedSize:
		m.ResetOptimizedSize()
		return nil
	case comicimg.FieldSize:
		m.ResetSize()
		return nil
	case comicimg.FieldWidth:
		m.ResetWidth()
		return nil
	}
	return fmt.Errorf("unknown ComicImg field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComicImgMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chapter != nil {
		edges = append(edges, comicimg.EdgeChapter)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComicImgMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case comicimg.EdgeChapter:
		if id := m.chapter; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComicImgMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComicImgMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComicImgMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchapter {
		edges = append(edges, comicimg.EdgeChapter)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComicImgMutation) EdgeCleared(name string) bool {
	switch name {
	case comicimg.EdgeChapter:
		return m.clearedchapter
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComicImgMutation) ClearEdge(name string) error {
	switch name {
	case comicimg.EdgeChapter:
		m.ClearChapter()
		return nil
	}
	return fmt.Errorf("unknown ComicImg unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComicImgMutation) ResetEdge(name string) error {
	switch name {
	case comicimg.EdgeChapter:
		m.ResetChapter()
		return nil
	}
	return fmt.Errorf("unknown ComicImg edge %s", name)
}

// GenreMutation represents an operation that mutates the Genre nodes in the graph.
type GenreMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	_type         *genre.Type
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Genre, error)
	predicates    []predicate.Genre
}

var _ ent.Mutation = (*GenreMutation)(nil)

// genreOption allows management of the mutation configuration using functional options.
type genreOption func(*GenreMutation)

// newGenreMutation creates new mutation for the Genre entity.
func newGenreMutation(c config, op Op, opts ...genreOption) *GenreMutation {
	m := &GenreMutation{
		config:        c,
		op:            op,
		typ:           TypeGenre,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenreID sets the ID field of the mutation.
func withGenreID(id string) genreOption {
	return func(m *GenreMutation) {
		var (
			err   error
			once  sync.Once
			value *Genre
		)
		m.oldValue = func(ctx context.Context) (*Genre, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Genre.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGenre sets the old Genre of the mutation.
func withGenre(node *Genre) genreOption {
	return func(m *GenreMutation) {
		m.oldValue = func(context.Context) (*Genre, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Genre entities.
func (m *GenreMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GenreMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GenreMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Genre.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GenreMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GenreMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Genre entity.
// If the Genre object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GenreMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GenreMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GenreMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GenreMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Genre entity.
// If the Genre object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GenreMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GenreMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *GenreMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GenreMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Genre entity.
// If the Genre object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GenreMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GenreMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *GenreMutation) SetType(ge genre.Type) {
	m._type = &ge
}

// GetType returns the value of the "type" field in the mutation.
func (m *GenreMutation) GetType() (r genre.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Genre entity.
// If the Genre object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GenreMutation) OldType(ctx context.Context) (v genre.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *GenreMutation) ResetType() {
	m._type = nil
}

// Where appends a list predicates to the GenreMutation builder.
func (m *GenreMutation) Where(ps ...predicate.Genre) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GenreMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GenreMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Genre, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GenreMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GenreMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Genre).
func (m *GenreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GenreMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, genre.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, genre.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, genre.FieldName)
	}
	if m._type != nil {
		fields = append(fields, genre.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GenreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case genre.FieldCreatedAt:
		return m.CreatedAt()
	case genre.FieldUpdatedAt:
		return m.UpdatedAt()
	case genre.FieldName:
		return m.Name()
	case genre.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GenreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case genre.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case genre.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case genre.FieldName:
		return m.OldName(ctx)
	case genre.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Genre field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GenreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case genre.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case genre.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case genre.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case genre.FieldType:
		v, ok := value.(genre.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Genre field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GenreMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GenreMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GenreMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Genre numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GenreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GenreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Genre nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GenreMutation) ResetField(name string) error {
	switch name {
	case genre.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case genre.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case genre.FieldName:
		m.ResetName()
		return nil
	case genre.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Genre field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GenreMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GenreMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GenreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GenreMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GenreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GenreMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GenreMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Genre unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GenreMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Genre edge %s", name)
}

// PermissionMutation represents an operation that mutates the Permission nodes in the graph.
type PermissionMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	updated_at    *time.Time
	group         *string
	name          *string
	key           *string
	_order        *int
	add_order     *int
	clearedFields map[string]struct{}
	roles         map[string]struct{}
	removedroles  map[string]struct{}
	clearedroles  bool
	done          bool
	oldValue      func(context.Context) (*Permission, error)
	predicates    []predicate.Permission
}

var _ ent.Mutation = (*PermissionMutation)(nil)

// permissionOption allows management of the mutation configuration using functional options.
type permissionOption func(*PermissionMutation)

// newPermissionMutation creates new mutation for the Permission entity.
func newPermissionMutation(c config, op Op, opts ...permissionOption) *PermissionMutation {
	m := &PermissionMutation{
		config:        c,
		op:            op,
		typ:           TypePermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermissionID sets the ID field of the mutation.
func withPermissionID(id string) permissionOption {
	return func(m *PermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *Permission
		)
		m.oldValue = func(ctx context.Context) (*Permission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Permission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPermission sets the old Permission of the mutation.
func withPermission(node *Permission) permissionOption {
	return func(m *PermissionMutation) {
		m.oldValue = func(context.Context) (*Permission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Permission entities.
func (m *PermissionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PermissionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PermissionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Permission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PermissionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PermissionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PermissionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PermissionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PermissionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PermissionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetGroup sets the "group" field.
func (m *PermissionMutation) SetGroup(s string) {
	m.group = &s
}

// Group returns the value of the "group" field in the mutation.
func (m *PermissionMutation) Group() (r string, exists bool) {
	v := m.group
	if v == nil {
		return
	}
	return *v, true
}

// OldGroup returns the old "group" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldGroup(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroup: %w", err)
	}
	return oldValue.Group, nil
}

// ResetGroup resets all changes to the "group" field.
func (m *PermissionMutation) ResetGroup() {
	m.group = nil
}

// SetName sets the "name" field.
func (m *PermissionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PermissionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PermissionMutation) ResetName() {
	m.name = nil
}

// SetKey sets the "key" field.
func (m *PermissionMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *PermissionMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *PermissionMutation) ResetKey() {
	m.key = nil
}

// SetOrder sets the "order" field.
func (m *PermissionMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *PermissionMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *PermissionMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *PermissionMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *PermissionMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// AddRoleIDs adds the "roles" edge to the Role entity by ids.
func (m *PermissionMutation) AddRoleIDs(ids ...string) {
	if m.roles == nil {
		m.roles = make(map[string]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the Role entity.
func (m *PermissionMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the Role entity was cleared.
func (m *PermissionMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the Role entity by IDs.
func (m *PermissionMutation) RemoveRoleIDs(ids ...string) {
	if m.removedroles == nil {
		m.removedroles = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the Role entity.
func (m *PermissionMutation) RemovedRolesIDs() (ids []string) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *PermissionMutation) RolesIDs() (ids []string) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *PermissionMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the PermissionMutation builder.
func (m *PermissionMutation) Where(ps ...predicate.Permission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PermissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PermissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Permission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PermissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PermissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Permission).
func (m *PermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermissionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, permission.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, permission.FieldUpdatedAt)
	}
	if m.group != nil {
		fields = append(fields, permission.FieldGroup)
	}
	if m.name != nil {
		fields = append(fields, permission.FieldName)
	}
	if m.key != nil {
		fields = append(fields, permission.FieldKey)
	}
	if m._order != nil {
		fields = append(fields, permission.FieldOrder)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case permission.FieldCreatedAt:
		return m.CreatedAt()
	case permission.FieldUpdatedAt:
		return m.UpdatedAt()
	case permission.FieldGroup:
		return m.Group()
	case permission.FieldName:
		return m.Name()
	case permission.FieldKey:
		return m.Key()
	case permission.FieldOrder:
		return m.Order()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case permission.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case permission.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case permission.FieldGroup:
		return m.OldGroup(ctx)
	case permission.FieldName:
		return m.OldName(ctx)
	case permission.FieldKey:
		return m.OldKey(ctx)
	case permission.FieldOrder:
		return m.OldOrder(ctx)
	}
	return nil, fmt.Errorf("unknown Permission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case permission.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case permission.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case permission.FieldGroup:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroup(v)
		return nil
	case permission.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case permission.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case permission.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermissionMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, permission.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case permission.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case permission.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Permission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Permission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermissionMutation) ResetField(name string) error {
	switch name {
	case permission.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case permission.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case permission.FieldGroup:
		m.ResetGroup()
		return nil
	case permission.FieldName:
		m.ResetName()
		return nil
	case permission.FieldKey:
		m.ResetKey()
		return nil
	case permission.FieldOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.roles != nil {
		edges = append(edges, permission.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case permission.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroles != nil {
		edges = append(edges, permission.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermissionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case permission.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedroles {
		edges = append(edges, permission.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermissionMutation) EdgeCleared(name string) bool {
	switch name {
	case permission.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermissionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Permission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermissionMutation) ResetEdge(name string) error {
	switch name {
	case permission.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown Permission edge %s", name)
}

// RoleMutation represents an operation that mutates the Role nodes in the graph.
type RoleMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	created_at         *time.Time
	updated_at         *time.Time
	is_enable          *bool
	deleted_at         *int
	adddeleted_at      *int
	name               *string
	description        *string
	_order             *int
	add_order          *int
	is_changeable      *bool
	clearedFields      map[string]struct{}
	admins             map[string]struct{}
	removedadmins      map[string]struct{}
	clearedadmins      bool
	permissions        map[string]struct{}
	removedpermissions map[string]struct{}
	clearedpermissions bool
	routes             map[string]struct{}
	removedroutes      map[string]struct{}
	clearedroutes      bool
	done               bool
	oldValue           func(context.Context) (*Role, error)
	predicates         []predicate.Role
}

var _ ent.Mutation = (*RoleMutation)(nil)

// roleOption allows management of the mutation configuration using functional options.
type roleOption func(*RoleMutation)

// newRoleMutation creates new mutation for the Role entity.
func newRoleMutation(c config, op Op, opts ...roleOption) *RoleMutation {
	m := &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleID sets the ID field of the mutation.
func withRoleID(id string) roleOption {
	return func(m *RoleMutation) {
		var (
			err   error
			once  sync.Once
			value *Role
		)
		m.oldValue = func(ctx context.Context) (*Role, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Role.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRole sets the old Role of the mutation.
func withRole(node *Role) roleOption {
	return func(m *RoleMutation) {
		m.oldValue = func(context.Context) (*Role, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Role entities.
func (m *RoleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Role.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIsEnable sets the "is_enable" field.
func (m *RoleMutation) SetIsEnable(b bool) {
	m.is_enable = &b
}

// IsEnable returns the value of the "is_enable" field in the mutation.
func (m *RoleMutation) IsEnable() (r bool, exists bool) {
	v := m.is_enable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnable returns the old "is_enable" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldIsEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnable: %w", err)
	}
	return oldValue.IsEnable, nil
}

// ResetIsEnable resets all changes to the "is_enable" field.
func (m *RoleMutation) ResetIsEnable() {
	m.is_enable = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RoleMutation) SetDeletedAt(i int) {
	m.deleted_at = &i
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RoleMutation) DeletedAt() (r int, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDeletedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds i to the "deleted_at" field.
func (m *RoleMutation) AddDeletedAt(i int) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += i
	} else {
		m.adddeleted_at = &i
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *RoleMutation) AddedDeletedAt() (r int, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RoleMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetName sets the "name" field.
func (m *RoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoleMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *RoleMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RoleMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *RoleMutation) ResetDescription() {
	m.description = nil
}

// SetOrder sets the "order" field.
func (m *RoleMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *RoleMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *RoleMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *RoleMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *RoleMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetIsChangeable sets the "is_changeable" field.
func (m *RoleMutation) SetIsChangeable(b bool) {
	m.is_changeable = &b
}

// IsChangeable returns the value of the "is_changeable" field in the mutation.
func (m *RoleMutation) IsChangeable() (r bool, exists bool) {
	v := m.is_changeable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsChangeable returns the old "is_changeable" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldIsChangeable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsChangeable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsChangeable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsChangeable: %w", err)
	}
	return oldValue.IsChangeable, nil
}

// ResetIsChangeable resets all changes to the "is_changeable" field.
func (m *RoleMutation) ResetIsChangeable() {
	m.is_changeable = nil
}

// AddAdminIDs adds the "admins" edge to the Admin entity by ids.
func (m *RoleMutation) AddAdminIDs(ids ...string) {
	if m.admins == nil {
		m.admins = make(map[string]struct{})
	}
	for i := range ids {
		m.admins[ids[i]] = struct{}{}
	}
}

// ClearAdmins clears the "admins" edge to the Admin entity.
func (m *RoleMutation) ClearAdmins() {
	m.clearedadmins = true
}

// AdminsCleared reports if the "admins" edge to the Admin entity was cleared.
func (m *RoleMutation) AdminsCleared() bool {
	return m.clearedadmins
}

// RemoveAdminIDs removes the "admins" edge to the Admin entity by IDs.
func (m *RoleMutation) RemoveAdminIDs(ids ...string) {
	if m.removedadmins == nil {
		m.removedadmins = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.admins, ids[i])
		m.removedadmins[ids[i]] = struct{}{}
	}
}

// RemovedAdmins returns the removed IDs of the "admins" edge to the Admin entity.
func (m *RoleMutation) RemovedAdminsIDs() (ids []string) {
	for id := range m.removedadmins {
		ids = append(ids, id)
	}
	return
}

// AdminsIDs returns the "admins" edge IDs in the mutation.
func (m *RoleMutation) AdminsIDs() (ids []string) {
	for id := range m.admins {
		ids = append(ids, id)
	}
	return
}

// ResetAdmins resets all changes to the "admins" edge.
func (m *RoleMutation) ResetAdmins() {
	m.admins = nil
	m.clearedadmins = false
	m.removedadmins = nil
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by ids.
func (m *RoleMutation) AddPermissionIDs(ids ...string) {
	if m.permissions == nil {
		m.permissions = make(map[string]struct{})
	}
	for i := range ids {
		m.permissions[ids[i]] = struct{}{}
	}
}

// ClearPermissions clears the "permissions" edge to the Permission entity.
func (m *RoleMutation) ClearPermissions() {
	m.clearedpermissions = true
}

// PermissionsCleared reports if the "permissions" edge to the Permission entity was cleared.
func (m *RoleMutation) PermissionsCleared() bool {
	return m.clearedpermissions
}

// RemovePermissionIDs removes the "permissions" edge to the Permission entity by IDs.
func (m *RoleMutation) RemovePermissionIDs(ids ...string) {
	if m.removedpermissions == nil {
		m.removedpermissions = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.permissions, ids[i])
		m.removedpermissions[ids[i]] = struct{}{}
	}
}

// RemovedPermissions returns the removed IDs of the "permissions" edge to the Permission entity.
func (m *RoleMutation) RemovedPermissionsIDs() (ids []string) {
	for id := range m.removedpermissions {
		ids = append(ids, id)
	}
	return
}

// PermissionsIDs returns the "permissions" edge IDs in the mutation.
func (m *RoleMutation) PermissionsIDs() (ids []string) {
	for id := range m.permissions {
		ids = append(ids, id)
	}
	return
}

// ResetPermissions resets all changes to the "permissions" edge.
func (m *RoleMutation) ResetPermissions() {
	m.permissions = nil
	m.clearedpermissions = false
	m.removedpermissions = nil
}

// AddRouteIDs adds the "routes" edge to the Route entity by ids.
func (m *RoleMutation) AddRouteIDs(ids ...string) {
	if m.routes == nil {
		m.routes = make(map[string]struct{})
	}
	for i := range ids {
		m.routes[ids[i]] = struct{}{}
	}
}

// ClearRoutes clears the "routes" edge to the Route entity.
func (m *RoleMutation) ClearRoutes() {
	m.clearedroutes = true
}

// RoutesCleared reports if the "routes" edge to the Route entity was cleared.
func (m *RoleMutation) RoutesCleared() bool {
	return m.clearedroutes
}

// RemoveRouteIDs removes the "routes" edge to the Route entity by IDs.
func (m *RoleMutation) RemoveRouteIDs(ids ...string) {
	if m.removedroutes == nil {
		m.removedroutes = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.routes, ids[i])
		m.removedroutes[ids[i]] = struct{}{}
	}
}

// RemovedRoutes returns the removed IDs of the "routes" edge to the Route entity.
func (m *RoleMutation) RemovedRoutesIDs() (ids []string) {
	for id := range m.removedroutes {
		ids = append(ids, id)
	}
	return
}

// RoutesIDs returns the "routes" edge IDs in the mutation.
func (m *RoleMutation) RoutesIDs() (ids []string) {
	for id := range m.routes {
		ids = append(ids, id)
	}
	return
}

// ResetRoutes resets all changes to the "routes" edge.
func (m *RoleMutation) ResetRoutes() {
	m.routes = nil
	m.clearedroutes = false
	m.removedroutes = nil
}

// Where appends a list predicates to the RoleMutation builder.
func (m *RoleMutation) Where(ps ...predicate.Role) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Role, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, role.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, role.FieldUpdatedAt)
	}
	if m.is_enable != nil {
		fields = append(fields, role.FieldIsEnable)
	}
	if m.deleted_at != nil {
		fields = append(fields, role.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, role.FieldName)
	}
	if m.description != nil {
		fields = append(fields, role.FieldDescription)
	}
	if m._order != nil {
		fields = append(fields, role.FieldOrder)
	}
	if m.is_changeable != nil {
		fields = append(fields, role.FieldIsChangeable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldCreatedAt:
		return m.CreatedAt()
	case role.FieldUpdatedAt:
		return m.UpdatedAt()
	case role.FieldIsEnable:
		return m.IsEnable()
	case role.FieldDeletedAt:
		return m.DeletedAt()
	case role.FieldName:
		return m.Name()
	case role.FieldDescription:
		return m.Description()
	case role.FieldOrder:
		return m.Order()
	case role.FieldIsChangeable:
		return m.IsChangeable()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case role.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case role.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case role.FieldIsEnable:
		return m.OldIsEnable(ctx)
	case role.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case role.FieldName:
		return m.OldName(ctx)
	case role.FieldDescription:
		return m.OldDescription(ctx)
	case role.FieldOrder:
		return m.OldOrder(ctx)
	case role.FieldIsChangeable:
		return m.OldIsChangeable(ctx)
	}
	return nil, fmt.Errorf("unknown Role field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case role.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case role.FieldIsEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnable(v)
		return nil
	case role.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case role.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case role.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case role.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case role.FieldIsChangeable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsChangeable(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleMutation) AddedFields() []string {
	var fields []string
	if m.adddeleted_at != nil {
		fields = append(fields, role.FieldDeletedAt)
	}
	if m.add_order != nil {
		fields = append(fields, role.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case role.FieldDeletedAt:
		return m.AddedDeletedAt()
	case role.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case role.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case role.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case role.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case role.FieldIsEnable:
		m.ResetIsEnable()
		return nil
	case role.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case role.FieldName:
		m.ResetName()
		return nil
	case role.FieldDescription:
		m.ResetDescription()
		return nil
	case role.FieldOrder:
		m.ResetOrder()
		return nil
	case role.FieldIsChangeable:
		m.ResetIsChangeable()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.admins != nil {
		edges = append(edges, role.EdgeAdmins)
	}
	if m.permissions != nil {
		edges = append(edges, role.EdgePermissions)
	}
	if m.routes != nil {
		edges = append(edges, role.EdgeRoutes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.admins))
		for id := range m.admins {
			ids = append(ids, id)
		}
		return ids
	case role.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.permissions))
		for id := range m.permissions {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeRoutes:
		ids := make([]ent.Value, 0, len(m.routes))
		for id := range m.routes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedadmins != nil {
		edges = append(edges, role.EdgeAdmins)
	}
	if m.removedpermissions != nil {
		edges = append(edges, role.EdgePermissions)
	}
	if m.removedroutes != nil {
		edges = append(edges, role.EdgeRoutes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.removedadmins))
		for id := range m.removedadmins {
			ids = append(ids, id)
		}
		return ids
	case role.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.removedpermissions))
		for id := range m.removedpermissions {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeRoutes:
		ids := make([]ent.Value, 0, len(m.removedroutes))
		for id := range m.removedroutes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedadmins {
		edges = append(edges, role.EdgeAdmins)
	}
	if m.clearedpermissions {
		edges = append(edges, role.EdgePermissions)
	}
	if m.clearedroutes {
		edges = append(edges, role.EdgeRoutes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	switch name {
	case role.EdgeAdmins:
		return m.clearedadmins
	case role.EdgePermissions:
		return m.clearedpermissions
	case role.EdgeRoutes:
		return m.clearedroutes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	switch name {
	case role.EdgeAdmins:
		m.ResetAdmins()
		return nil
	case role.EdgePermissions:
		m.ResetPermissions()
		return nil
	case role.EdgeRoutes:
		m.ResetRoutes()
		return nil
	}
	return fmt.Errorf("unknown Role edge %s", name)
}

// RouteMutation represents an operation that mutates the Route nodes in the graph.
type RouteMutation struct {
	config
	op              Op
	typ             string
	id              *string
	created_at      *time.Time
	updated_at      *time.Time
	is_enable       *bool
	deleted_at      *int
	adddeleted_at   *int
	_path           *string
	component       *string
	redirect        *string
	name            *string
	_order          *int
	add_order       *int
	_type           *route.Type
	meta            *types.RouteMeta
	clearedFields   map[string]struct{}
	parent          *string
	clearedparent   bool
	children        map[string]struct{}
	removedchildren map[string]struct{}
	clearedchildren bool
	roles           map[string]struct{}
	removedroles    map[string]struct{}
	clearedroles    bool
	done            bool
	oldValue        func(context.Context) (*Route, error)
	predicates      []predicate.Route
}

var _ ent.Mutation = (*RouteMutation)(nil)

// routeOption allows management of the mutation configuration using functional options.
type routeOption func(*RouteMutation)

// newRouteMutation creates new mutation for the Route entity.
func newRouteMutation(c config, op Op, opts ...routeOption) *RouteMutation {
	m := &RouteMutation{
		config:        c,
		op:            op,
		typ:           TypeRoute,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRouteID sets the ID field of the mutation.
func withRouteID(id string) routeOption {
	return func(m *RouteMutation) {
		var (
			err   error
			once  sync.Once
			value *Route
		)
		m.oldValue = func(ctx context.Context) (*Route, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Route.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoute sets the old Route of the mutation.
func withRoute(node *Route) routeOption {
	return func(m *RouteMutation) {
		m.oldValue = func(context.Context) (*Route, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RouteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RouteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Route entities.
func (m *RouteMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RouteMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RouteMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Route.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RouteMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RouteMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RouteMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RouteMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RouteMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RouteMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIsEnable sets the "is_enable" field.
func (m *RouteMutation) SetIsEnable(b bool) {
	m.is_enable = &b
}

// IsEnable returns the value of the "is_enable" field in the mutation.
func (m *RouteMutation) IsEnable() (r bool, exists bool) {
	v := m.is_enable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnable returns the old "is_enable" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldIsEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnable: %w", err)
	}
	return oldValue.IsEnable, nil
}

// ResetIsEnable resets all changes to the "is_enable" field.
func (m *RouteMutation) ResetIsEnable() {
	m.is_enable = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RouteMutation) SetDeletedAt(i int) {
	m.deleted_at = &i
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RouteMutation) DeletedAt() (r int, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldDeletedAt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds i to the "deleted_at" field.
func (m *RouteMutation) AddDeletedAt(i int) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += i
	} else {
		m.adddeleted_at = &i
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *RouteMutation) AddedDeletedAt() (r int, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RouteMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetParentID sets the "parent_id" field.
func (m *RouteMutation) SetParentID(s string) {
	m.parent = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *RouteMutation) ParentID() (r string, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldParentID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *RouteMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[route.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *RouteMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[route.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *RouteMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, route.FieldParentID)
}

// SetPath sets the "path" field.
func (m *RouteMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *RouteMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *RouteMutation) ResetPath() {
	m._path = nil
}

// SetComponent sets the "component" field.
func (m *RouteMutation) SetComponent(s string) {
	m.component = &s
}

// Component returns the value of the "component" field in the mutation.
func (m *RouteMutation) Component() (r string, exists bool) {
	v := m.component
	if v == nil {
		return
	}
	return *v, true
}

// OldComponent returns the old "component" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldComponent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComponent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComponent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComponent: %w", err)
	}
	return oldValue.Component, nil
}

// ResetComponent resets all changes to the "component" field.
func (m *RouteMutation) ResetComponent() {
	m.component = nil
}

// SetRedirect sets the "redirect" field.
func (m *RouteMutation) SetRedirect(s string) {
	m.redirect = &s
}

// Redirect returns the value of the "redirect" field in the mutation.
func (m *RouteMutation) Redirect() (r string, exists bool) {
	v := m.redirect
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirect returns the old "redirect" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldRedirect(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedirect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedirect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirect: %w", err)
	}
	return oldValue.Redirect, nil
}

// ClearRedirect clears the value of the "redirect" field.
func (m *RouteMutation) ClearRedirect() {
	m.redirect = nil
	m.clearedFields[route.FieldRedirect] = struct{}{}
}

// RedirectCleared returns if the "redirect" field was cleared in this mutation.
func (m *RouteMutation) RedirectCleared() bool {
	_, ok := m.clearedFields[route.FieldRedirect]
	return ok
}

// ResetRedirect resets all changes to the "redirect" field.
func (m *RouteMutation) ResetRedirect() {
	m.redirect = nil
	delete(m.clearedFields, route.FieldRedirect)
}

// SetName sets the "name" field.
func (m *RouteMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RouteMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RouteMutation) ResetName() {
	m.name = nil
}

// SetOrder sets the "order" field.
func (m *RouteMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *RouteMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *RouteMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *RouteMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *RouteMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetType sets the "type" field.
func (m *RouteMutation) SetType(r route.Type) {
	m._type = &r
}

// GetType returns the value of the "type" field in the mutation.
func (m *RouteMutation) GetType() (r route.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldType(ctx context.Context) (v route.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *RouteMutation) ResetType() {
	m._type = nil
}

// SetMeta sets the "meta" field.
func (m *RouteMutation) SetMeta(tm types.RouteMeta) {
	m.meta = &tm
}

// Meta returns the value of the "meta" field in the mutation.
func (m *RouteMutation) Meta() (r types.RouteMeta, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the Route entity.
// If the Route object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RouteMutation) OldMeta(ctx context.Context) (v types.RouteMeta, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ResetMeta resets all changes to the "meta" field.
func (m *RouteMutation) ResetMeta() {
	m.meta = nil
}

// ClearParent clears the "parent" edge to the Route entity.
func (m *RouteMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[route.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Route entity was cleared.
func (m *RouteMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *RouteMutation) ParentIDs() (ids []string) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *RouteMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Route entity by ids.
func (m *RouteMutation) AddChildIDs(ids ...string) {
	if m.children == nil {
		m.children = make(map[string]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Route entity.
func (m *RouteMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Route entity was cleared.
func (m *RouteMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Route entity by IDs.
func (m *RouteMutation) RemoveChildIDs(ids ...string) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Route entity.
func (m *RouteMutation) RemovedChildrenIDs() (ids []string) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *RouteMutation) ChildrenIDs() (ids []string) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *RouteMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// AddRoleIDs adds the "roles" edge to the Role entity by ids.
func (m *RouteMutation) AddRoleIDs(ids ...string) {
	if m.roles == nil {
		m.roles = make(map[string]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the Role entity.
func (m *RouteMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the Role entity was cleared.
func (m *RouteMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the Role entity by IDs.
func (m *RouteMutation) RemoveRoleIDs(ids ...string) {
	if m.removedroles == nil {
		m.removedroles = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the Role entity.
func (m *RouteMutation) RemovedRolesIDs() (ids []string) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *RouteMutation) RolesIDs() (ids []string) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *RouteMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the RouteMutation builder.
func (m *RouteMutation) Where(ps ...predicate.Route) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RouteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RouteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Route, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RouteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RouteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Route).
func (m *RouteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RouteMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, route.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, route.FieldUpdatedAt)
	}
	if m.is_enable != nil {
		fields = append(fields, route.FieldIsEnable)
	}
	if m.deleted_at != nil {
		fields = append(fields, route.FieldDeletedAt)
	}
	if m.parent != nil {
		fields = append(fields, route.FieldParentID)
	}
	if m._path != nil {
		fields = append(fields, route.FieldPath)
	}
	if m.component != nil {
		fields = append(fields, route.FieldComponent)
	}
	if m.redirect != nil {
		fields = append(fields, route.FieldRedirect)
	}
	if m.name != nil {
		fields = append(fields, route.FieldName)
	}
	if m._order != nil {
		fields = append(fields, route.FieldOrder)
	}
	if m._type != nil {
		fields = append(fields, route.FieldType)
	}
	if m.meta != nil {
		fields = append(fields, route.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RouteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case route.FieldCreatedAt:
		return m.CreatedAt()
	case route.FieldUpdatedAt:
		return m.UpdatedAt()
	case route.FieldIsEnable:
		return m.IsEnable()
	case route.FieldDeletedAt:
		return m.DeletedAt()
	case route.FieldParentID:
		return m.ParentID()
	case route.FieldPath:
		return m.Path()
	case route.FieldComponent:
		return m.Component()
	case route.FieldRedirect:
		return m.Redirect()
	case route.FieldName:
		return m.Name()
	case route.FieldOrder:
		return m.Order()
	case route.FieldType:
		return m.GetType()
	case route.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RouteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case route.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case route.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case route.FieldIsEnable:
		return m.OldIsEnable(ctx)
	case route.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case route.FieldParentID:
		return m.OldParentID(ctx)
	case route.FieldPath:
		return m.OldPath(ctx)
	case route.FieldComponent:
		return m.OldComponent(ctx)
	case route.FieldRedirect:
		return m.OldRedirect(ctx)
	case route.FieldName:
		return m.OldName(ctx)
	case route.FieldOrder:
		return m.OldOrder(ctx)
	case route.FieldType:
		return m.OldType(ctx)
	case route.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown Route field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RouteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case route.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case route.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case route.FieldIsEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnable(v)
		return nil
	case route.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case route.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case route.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case route.FieldComponent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComponent(v)
		return nil
	case route.FieldRedirect:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirect(v)
		return nil
	case route.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case route.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case route.FieldType:
		v, ok := value.(route.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case route.FieldMeta:
		v, ok := value.(types.RouteMeta)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown Route field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RouteMutation) AddedFields() []string {
	var fields []string
	if m.adddeleted_at != nil {
		fields = append(fields, route.FieldDeletedAt)
	}
	if m.add_order != nil {
		fields = append(fields, route.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RouteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case route.FieldDeletedAt:
		return m.AddedDeletedAt()
	case route.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RouteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case route.FieldDeletedAt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case route.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Route numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RouteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(route.FieldParentID) {
		fields = append(fields, route.FieldParentID)
	}
	if m.FieldCleared(route.FieldRedirect) {
		fields = append(fields, route.FieldRedirect)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RouteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RouteMutation) ClearField(name string) error {
	switch name {
	case route.FieldParentID:
		m.ClearParentID()
		return nil
	case route.FieldRedirect:
		m.ClearRedirect()
		return nil
	}
	return fmt.Errorf("unknown Route nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RouteMutation) ResetField(name string) error {
	switch name {
	case route.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case route.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case route.FieldIsEnable:
		m.ResetIsEnable()
		return nil
	case route.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case route.FieldParentID:
		m.ResetParentID()
		return nil
	case route.FieldPath:
		m.ResetPath()
		return nil
	case route.FieldComponent:
		m.ResetComponent()
		return nil
	case route.FieldRedirect:
		m.ResetRedirect()
		return nil
	case route.FieldName:
		m.ResetName()
		return nil
	case route.FieldOrder:
		m.ResetOrder()
		return nil
	case route.FieldType:
		m.ResetType()
		return nil
	case route.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown Route field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RouteMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.parent != nil {
		edges = append(edges, route.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, route.EdgeChildren)
	}
	if m.roles != nil {
		edges = append(edges, route.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RouteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case route.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case route.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case route.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RouteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchildren != nil {
		edges = append(edges, route.EdgeChildren)
	}
	if m.removedroles != nil {
		edges = append(edges, route.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RouteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case route.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	case route.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RouteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedparent {
		edges = append(edges, route.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, route.EdgeChildren)
	}
	if m.clearedroles {
		edges = append(edges, route.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RouteMutation) EdgeCleared(name string) bool {
	switch name {
	case route.EdgeParent:
		return m.clearedparent
	case route.EdgeChildren:
		return m.clearedchildren
	case route.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RouteMutation) ClearEdge(name string) error {
	switch name {
	case route.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Route unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RouteMutation) ResetEdge(name string) error {
	switch name {
	case route.EdgeParent:
		m.ResetParent()
		return nil
	case route.EdgeChildren:
		m.ResetChildren()
		return nil
	case route.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown Route edge %s", name)
}
