// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/gva/app/database/schema/types"
	"github.com/gva/internal/ent/genre"
)

// CreateComicInput represents a mutation input for creating comics.
type CreateComicInput struct {
	CreatedAt            *time.Time
	UpdatedAt            *time.Time
	Chapter              uint
	Title                string
	Slug                 string
	Covers               []types.CoverImg
	Status               string
	IsTranslateCompleted *bool
	UpCount              *uint
	ChapterIDs           []string
	LastChapterID        *string
	FinalChapterID       *string
}

// Mutate applies the CreateComicInput on the ComicMutation builder.
func (i *CreateComicInput) Mutate(m *ComicMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetChapter(i.Chapter)
	m.SetTitle(i.Title)
	m.SetSlug(i.Slug)
	if v := i.Covers; v != nil {
		m.SetCovers(v)
	}
	m.SetStatus(i.Status)
	if v := i.IsTranslateCompleted; v != nil {
		m.SetIsTranslateCompleted(*v)
	}
	if v := i.UpCount; v != nil {
		m.SetUpCount(*v)
	}
	if v := i.ChapterIDs; len(v) > 0 {
		m.AddChapterIDs(v...)
	}
	if v := i.LastChapterID; v != nil {
		m.SetLastChapterID(*v)
	}
	if v := i.FinalChapterID; v != nil {
		m.SetFinalChapterID(*v)
	}
}

// SetInput applies the change-set in the CreateComicInput on the ComicCreate builder.
func (c *ComicCreate) SetInput(i CreateComicInput) *ComicCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateComicChapterInput represents a mutation input for creating comicchapters.
type CreateComicChapterInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	Chapter       uint
	Title         *string
	Volumn        *string
	Lang          string
	UpCount       *uint
	DownCount     *uint
	IsLastChapter *bool
	ImgIDs        []string
	ComicID       *string
}

// Mutate applies the CreateComicChapterInput on the ComicChapterMutation builder.
func (i *CreateComicChapterInput) Mutate(m *ComicChapterMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetChapter(i.Chapter)
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Volumn; v != nil {
		m.SetVolumn(*v)
	}
	m.SetLang(i.Lang)
	if v := i.UpCount; v != nil {
		m.SetUpCount(*v)
	}
	if v := i.DownCount; v != nil {
		m.SetDownCount(*v)
	}
	if v := i.IsLastChapter; v != nil {
		m.SetIsLastChapter(*v)
	}
	if v := i.ImgIDs; len(v) > 0 {
		m.AddImgIDs(v...)
	}
	if v := i.ComicID; v != nil {
		m.SetComicID(*v)
	}
}

// SetInput applies the change-set in the CreateComicChapterInput on the ComicChapterCreate builder.
func (c *ComicChapterCreate) SetInput(i CreateComicChapterInput) *ComicChapterCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateComicImgInput represents a mutation input for creating comicimgs.
type CreateComicImgInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	B2key         string
	Height        int
	Name          string
	OptimizedSize int64
	Size          int64
	Width         int
	ChapterID     *string
}

// Mutate applies the CreateComicImgInput on the ComicImgMutation builder.
func (i *CreateComicImgInput) Mutate(m *ComicImgMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetB2key(i.B2key)
	m.SetHeight(i.Height)
	m.SetName(i.Name)
	m.SetOptimizedSize(i.OptimizedSize)
	m.SetSize(i.Size)
	m.SetWidth(i.Width)
	if v := i.ChapterID; v != nil {
		m.SetChapterID(*v)
	}
}

// SetInput applies the change-set in the CreateComicImgInput on the ComicImgCreate builder.
func (c *ComicImgCreate) SetInput(i CreateComicImgInput) *ComicImgCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateGenreInput represents a mutation input for creating genres.
type CreateGenreInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Name      string
	Type      genre.Type
}

// Mutate applies the CreateGenreInput on the GenreMutation builder.
func (i *CreateGenreInput) Mutate(m *GenreMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetType(i.Type)
}

// SetInput applies the change-set in the CreateGenreInput on the GenreCreate builder.
func (c *GenreCreate) SetInput(i CreateGenreInput) *GenreCreate {
	i.Mutate(c.Mutation())
	return c
}
