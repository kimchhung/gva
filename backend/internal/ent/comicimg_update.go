// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimchhung/gva/backend/internal/ent/comicchapter"
	"github.com/kimchhung/gva/backend/internal/ent/comicimg"
	"github.com/kimchhung/gva/backend/internal/ent/predicate"

	"github.com/kimchhung/gva/backend/internal/ent/internal"
)

// ComicImgUpdate is the builder for updating ComicImg entities.
type ComicImgUpdate struct {
	config
	hooks     []Hook
	mutation  *ComicImgMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ComicImgUpdate builder.
func (ciu *ComicImgUpdate) Where(ps ...predicate.ComicImg) *ComicImgUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetCreatedAt sets the "created_at" field.
func (ciu *ComicImgUpdate) SetCreatedAt(t time.Time) *ComicImgUpdate {
	ciu.mutation.SetCreatedAt(t)
	return ciu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciu *ComicImgUpdate) SetNillableCreatedAt(t *time.Time) *ComicImgUpdate {
	if t != nil {
		ciu.SetCreatedAt(*t)
	}
	return ciu
}

// SetUpdatedAt sets the "updated_at" field.
func (ciu *ComicImgUpdate) SetUpdatedAt(t time.Time) *ComicImgUpdate {
	ciu.mutation.SetUpdatedAt(t)
	return ciu
}

// SetB2key sets the "b2key" field.
func (ciu *ComicImgUpdate) SetB2key(s string) *ComicImgUpdate {
	ciu.mutation.SetB2key(s)
	return ciu
}

// SetNillableB2key sets the "b2key" field if the given value is not nil.
func (ciu *ComicImgUpdate) SetNillableB2key(s *string) *ComicImgUpdate {
	if s != nil {
		ciu.SetB2key(*s)
	}
	return ciu
}

// SetHeight sets the "height" field.
func (ciu *ComicImgUpdate) SetHeight(i int) *ComicImgUpdate {
	ciu.mutation.ResetHeight()
	ciu.mutation.SetHeight(i)
	return ciu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (ciu *ComicImgUpdate) SetNillableHeight(i *int) *ComicImgUpdate {
	if i != nil {
		ciu.SetHeight(*i)
	}
	return ciu
}

// AddHeight adds i to the "height" field.
func (ciu *ComicImgUpdate) AddHeight(i int) *ComicImgUpdate {
	ciu.mutation.AddHeight(i)
	return ciu
}

// SetName sets the "name" field.
func (ciu *ComicImgUpdate) SetName(s string) *ComicImgUpdate {
	ciu.mutation.SetName(s)
	return ciu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ciu *ComicImgUpdate) SetNillableName(s *string) *ComicImgUpdate {
	if s != nil {
		ciu.SetName(*s)
	}
	return ciu
}

// SetOptimizedSize sets the "optimized_size" field.
func (ciu *ComicImgUpdate) SetOptimizedSize(i int64) *ComicImgUpdate {
	ciu.mutation.ResetOptimizedSize()
	ciu.mutation.SetOptimizedSize(i)
	return ciu
}

// SetNillableOptimizedSize sets the "optimized_size" field if the given value is not nil.
func (ciu *ComicImgUpdate) SetNillableOptimizedSize(i *int64) *ComicImgUpdate {
	if i != nil {
		ciu.SetOptimizedSize(*i)
	}
	return ciu
}

// AddOptimizedSize adds i to the "optimized_size" field.
func (ciu *ComicImgUpdate) AddOptimizedSize(i int64) *ComicImgUpdate {
	ciu.mutation.AddOptimizedSize(i)
	return ciu
}

// SetSize sets the "size" field.
func (ciu *ComicImgUpdate) SetSize(i int64) *ComicImgUpdate {
	ciu.mutation.ResetSize()
	ciu.mutation.SetSize(i)
	return ciu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ciu *ComicImgUpdate) SetNillableSize(i *int64) *ComicImgUpdate {
	if i != nil {
		ciu.SetSize(*i)
	}
	return ciu
}

// AddSize adds i to the "size" field.
func (ciu *ComicImgUpdate) AddSize(i int64) *ComicImgUpdate {
	ciu.mutation.AddSize(i)
	return ciu
}

// SetWidth sets the "width" field.
func (ciu *ComicImgUpdate) SetWidth(i int) *ComicImgUpdate {
	ciu.mutation.ResetWidth()
	ciu.mutation.SetWidth(i)
	return ciu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (ciu *ComicImgUpdate) SetNillableWidth(i *int) *ComicImgUpdate {
	if i != nil {
		ciu.SetWidth(*i)
	}
	return ciu
}

// AddWidth adds i to the "width" field.
func (ciu *ComicImgUpdate) AddWidth(i int) *ComicImgUpdate {
	ciu.mutation.AddWidth(i)
	return ciu
}

// SetChapterID sets the "chapter" edge to the ComicChapter entity by ID.
func (ciu *ComicImgUpdate) SetChapterID(id string) *ComicImgUpdate {
	ciu.mutation.SetChapterID(id)
	return ciu
}

// SetNillableChapterID sets the "chapter" edge to the ComicChapter entity by ID if the given value is not nil.
func (ciu *ComicImgUpdate) SetNillableChapterID(id *string) *ComicImgUpdate {
	if id != nil {
		ciu = ciu.SetChapterID(*id)
	}
	return ciu
}

// SetChapter sets the "chapter" edge to the ComicChapter entity.
func (ciu *ComicImgUpdate) SetChapter(c *ComicChapter) *ComicImgUpdate {
	return ciu.SetChapterID(c.ID)
}

// Mutation returns the ComicImgMutation object of the builder.
func (ciu *ComicImgUpdate) Mutation() *ComicImgMutation {
	return ciu.mutation
}

// ClearChapter clears the "chapter" edge to the ComicChapter entity.
func (ciu *ComicImgUpdate) ClearChapter() *ComicImgUpdate {
	ciu.mutation.ClearChapter()
	return ciu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *ComicImgUpdate) Save(ctx context.Context) (int, error) {
	ciu.defaults()
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *ComicImgUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *ComicImgUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *ComicImgUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciu *ComicImgUpdate) defaults() {
	if _, ok := ciu.mutation.UpdatedAt(); !ok {
		v := comicimg.UpdateDefaultUpdatedAt()
		ciu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ciu *ComicImgUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ComicImgUpdate {
	ciu.modifiers = append(ciu.modifiers, modifiers...)
	return ciu
}

func (ciu *ComicImgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(comicimg.Table, comicimg.Columns, sqlgraph.NewFieldSpec(comicimg.FieldID, field.TypeString))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.CreatedAt(); ok {
		_spec.SetField(comicimg.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ciu.mutation.UpdatedAt(); ok {
		_spec.SetField(comicimg.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ciu.mutation.B2key(); ok {
		_spec.SetField(comicimg.FieldB2key, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Height(); ok {
		_spec.SetField(comicimg.FieldHeight, field.TypeInt, value)
	}
	if value, ok := ciu.mutation.AddedHeight(); ok {
		_spec.AddField(comicimg.FieldHeight, field.TypeInt, value)
	}
	if value, ok := ciu.mutation.Name(); ok {
		_spec.SetField(comicimg.FieldName, field.TypeString, value)
	}
	if value, ok := ciu.mutation.OptimizedSize(); ok {
		_spec.SetField(comicimg.FieldOptimizedSize, field.TypeInt64, value)
	}
	if value, ok := ciu.mutation.AddedOptimizedSize(); ok {
		_spec.AddField(comicimg.FieldOptimizedSize, field.TypeInt64, value)
	}
	if value, ok := ciu.mutation.Size(); ok {
		_spec.SetField(comicimg.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ciu.mutation.AddedSize(); ok {
		_spec.AddField(comicimg.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ciu.mutation.Width(); ok {
		_spec.SetField(comicimg.FieldWidth, field.TypeInt, value)
	}
	if value, ok := ciu.mutation.AddedWidth(); ok {
		_spec.AddField(comicimg.FieldWidth, field.TypeInt, value)
	}
	if ciu.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comicimg.ChapterTable,
			Columns: []string{comicimg.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comicchapter.FieldID, field.TypeString),
			},
		}
		edge.Schema = ciu.schemaConfig.ComicImg
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comicimg.ChapterTable,
			Columns: []string{comicimg.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comicchapter.FieldID, field.TypeString),
			},
		}
		edge.Schema = ciu.schemaConfig.ComicImg
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ciu.schemaConfig.ComicImg
	ctx = internal.NewSchemaConfigContext(ctx, ciu.schemaConfig)
	_spec.AddModifiers(ciu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comicimg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// ComicImgUpdateOne is the builder for updating a single ComicImg entity.
type ComicImgUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ComicImgMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ciuo *ComicImgUpdateOne) SetCreatedAt(t time.Time) *ComicImgUpdateOne {
	ciuo.mutation.SetCreatedAt(t)
	return ciuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciuo *ComicImgUpdateOne) SetNillableCreatedAt(t *time.Time) *ComicImgUpdateOne {
	if t != nil {
		ciuo.SetCreatedAt(*t)
	}
	return ciuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ciuo *ComicImgUpdateOne) SetUpdatedAt(t time.Time) *ComicImgUpdateOne {
	ciuo.mutation.SetUpdatedAt(t)
	return ciuo
}

// SetB2key sets the "b2key" field.
func (ciuo *ComicImgUpdateOne) SetB2key(s string) *ComicImgUpdateOne {
	ciuo.mutation.SetB2key(s)
	return ciuo
}

// SetNillableB2key sets the "b2key" field if the given value is not nil.
func (ciuo *ComicImgUpdateOne) SetNillableB2key(s *string) *ComicImgUpdateOne {
	if s != nil {
		ciuo.SetB2key(*s)
	}
	return ciuo
}

// SetHeight sets the "height" field.
func (ciuo *ComicImgUpdateOne) SetHeight(i int) *ComicImgUpdateOne {
	ciuo.mutation.ResetHeight()
	ciuo.mutation.SetHeight(i)
	return ciuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (ciuo *ComicImgUpdateOne) SetNillableHeight(i *int) *ComicImgUpdateOne {
	if i != nil {
		ciuo.SetHeight(*i)
	}
	return ciuo
}

// AddHeight adds i to the "height" field.
func (ciuo *ComicImgUpdateOne) AddHeight(i int) *ComicImgUpdateOne {
	ciuo.mutation.AddHeight(i)
	return ciuo
}

// SetName sets the "name" field.
func (ciuo *ComicImgUpdateOne) SetName(s string) *ComicImgUpdateOne {
	ciuo.mutation.SetName(s)
	return ciuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ciuo *ComicImgUpdateOne) SetNillableName(s *string) *ComicImgUpdateOne {
	if s != nil {
		ciuo.SetName(*s)
	}
	return ciuo
}

// SetOptimizedSize sets the "optimized_size" field.
func (ciuo *ComicImgUpdateOne) SetOptimizedSize(i int64) *ComicImgUpdateOne {
	ciuo.mutation.ResetOptimizedSize()
	ciuo.mutation.SetOptimizedSize(i)
	return ciuo
}

// SetNillableOptimizedSize sets the "optimized_size" field if the given value is not nil.
func (ciuo *ComicImgUpdateOne) SetNillableOptimizedSize(i *int64) *ComicImgUpdateOne {
	if i != nil {
		ciuo.SetOptimizedSize(*i)
	}
	return ciuo
}

// AddOptimizedSize adds i to the "optimized_size" field.
func (ciuo *ComicImgUpdateOne) AddOptimizedSize(i int64) *ComicImgUpdateOne {
	ciuo.mutation.AddOptimizedSize(i)
	return ciuo
}

// SetSize sets the "size" field.
func (ciuo *ComicImgUpdateOne) SetSize(i int64) *ComicImgUpdateOne {
	ciuo.mutation.ResetSize()
	ciuo.mutation.SetSize(i)
	return ciuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (ciuo *ComicImgUpdateOne) SetNillableSize(i *int64) *ComicImgUpdateOne {
	if i != nil {
		ciuo.SetSize(*i)
	}
	return ciuo
}

// AddSize adds i to the "size" field.
func (ciuo *ComicImgUpdateOne) AddSize(i int64) *ComicImgUpdateOne {
	ciuo.mutation.AddSize(i)
	return ciuo
}

// SetWidth sets the "width" field.
func (ciuo *ComicImgUpdateOne) SetWidth(i int) *ComicImgUpdateOne {
	ciuo.mutation.ResetWidth()
	ciuo.mutation.SetWidth(i)
	return ciuo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (ciuo *ComicImgUpdateOne) SetNillableWidth(i *int) *ComicImgUpdateOne {
	if i != nil {
		ciuo.SetWidth(*i)
	}
	return ciuo
}

// AddWidth adds i to the "width" field.
func (ciuo *ComicImgUpdateOne) AddWidth(i int) *ComicImgUpdateOne {
	ciuo.mutation.AddWidth(i)
	return ciuo
}

// SetChapterID sets the "chapter" edge to the ComicChapter entity by ID.
func (ciuo *ComicImgUpdateOne) SetChapterID(id string) *ComicImgUpdateOne {
	ciuo.mutation.SetChapterID(id)
	return ciuo
}

// SetNillableChapterID sets the "chapter" edge to the ComicChapter entity by ID if the given value is not nil.
func (ciuo *ComicImgUpdateOne) SetNillableChapterID(id *string) *ComicImgUpdateOne {
	if id != nil {
		ciuo = ciuo.SetChapterID(*id)
	}
	return ciuo
}

// SetChapter sets the "chapter" edge to the ComicChapter entity.
func (ciuo *ComicImgUpdateOne) SetChapter(c *ComicChapter) *ComicImgUpdateOne {
	return ciuo.SetChapterID(c.ID)
}

// Mutation returns the ComicImgMutation object of the builder.
func (ciuo *ComicImgUpdateOne) Mutation() *ComicImgMutation {
	return ciuo.mutation
}

// ClearChapter clears the "chapter" edge to the ComicChapter entity.
func (ciuo *ComicImgUpdateOne) ClearChapter() *ComicImgUpdateOne {
	ciuo.mutation.ClearChapter()
	return ciuo
}

// Where appends a list predicates to the ComicImgUpdate builder.
func (ciuo *ComicImgUpdateOne) Where(ps ...predicate.ComicImg) *ComicImgUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *ComicImgUpdateOne) Select(field string, fields ...string) *ComicImgUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated ComicImg entity.
func (ciuo *ComicImgUpdateOne) Save(ctx context.Context) (*ComicImg, error) {
	ciuo.defaults()
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *ComicImgUpdateOne) SaveX(ctx context.Context) *ComicImg {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *ComicImgUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *ComicImgUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciuo *ComicImgUpdateOne) defaults() {
	if _, ok := ciuo.mutation.UpdatedAt(); !ok {
		v := comicimg.UpdateDefaultUpdatedAt()
		ciuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ciuo *ComicImgUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ComicImgUpdateOne {
	ciuo.modifiers = append(ciuo.modifiers, modifiers...)
	return ciuo
}

func (ciuo *ComicImgUpdateOne) sqlSave(ctx context.Context) (_node *ComicImg, err error) {
	_spec := sqlgraph.NewUpdateSpec(comicimg.Table, comicimg.Columns, sqlgraph.NewFieldSpec(comicimg.FieldID, field.TypeString))
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ComicImg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comicimg.FieldID)
		for _, f := range fields {
			if !comicimg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comicimg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.CreatedAt(); ok {
		_spec.SetField(comicimg.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ciuo.mutation.UpdatedAt(); ok {
		_spec.SetField(comicimg.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ciuo.mutation.B2key(); ok {
		_spec.SetField(comicimg.FieldB2key, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Height(); ok {
		_spec.SetField(comicimg.FieldHeight, field.TypeInt, value)
	}
	if value, ok := ciuo.mutation.AddedHeight(); ok {
		_spec.AddField(comicimg.FieldHeight, field.TypeInt, value)
	}
	if value, ok := ciuo.mutation.Name(); ok {
		_spec.SetField(comicimg.FieldName, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.OptimizedSize(); ok {
		_spec.SetField(comicimg.FieldOptimizedSize, field.TypeInt64, value)
	}
	if value, ok := ciuo.mutation.AddedOptimizedSize(); ok {
		_spec.AddField(comicimg.FieldOptimizedSize, field.TypeInt64, value)
	}
	if value, ok := ciuo.mutation.Size(); ok {
		_spec.SetField(comicimg.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ciuo.mutation.AddedSize(); ok {
		_spec.AddField(comicimg.FieldSize, field.TypeInt64, value)
	}
	if value, ok := ciuo.mutation.Width(); ok {
		_spec.SetField(comicimg.FieldWidth, field.TypeInt, value)
	}
	if value, ok := ciuo.mutation.AddedWidth(); ok {
		_spec.AddField(comicimg.FieldWidth, field.TypeInt, value)
	}
	if ciuo.mutation.ChapterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comicimg.ChapterTable,
			Columns: []string{comicimg.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comicchapter.FieldID, field.TypeString),
			},
		}
		edge.Schema = ciuo.schemaConfig.ComicImg
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.ChapterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comicimg.ChapterTable,
			Columns: []string{comicimg.ChapterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comicchapter.FieldID, field.TypeString),
			},
		}
		edge.Schema = ciuo.schemaConfig.ComicImg
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ciuo.schemaConfig.ComicImg
	ctx = internal.NewSchemaConfigContext(ctx, ciuo.schemaConfig)
	_spec.AddModifiers(ciuo.modifiers...)
	_node = &ComicImg{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comicimg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}
