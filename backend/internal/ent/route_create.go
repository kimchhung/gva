// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gva/app/database/schema/types"
	"github.com/gva/internal/ent/role"
	"github.com/gva/internal/ent/route"
)

// RouteCreate is the builder for creating a Route entity.
type RouteCreate struct {
	config
	mutation *RouteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *RouteCreate) SetCreatedAt(t time.Time) *RouteCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RouteCreate) SetNillableCreatedAt(t *time.Time) *RouteCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RouteCreate) SetUpdatedAt(t time.Time) *RouteCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RouteCreate) SetNillableUpdatedAt(t *time.Time) *RouteCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetIsEnable sets the "is_enable" field.
func (rc *RouteCreate) SetIsEnable(b bool) *RouteCreate {
	rc.mutation.SetIsEnable(b)
	return rc
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (rc *RouteCreate) SetNillableIsEnable(b *bool) *RouteCreate {
	if b != nil {
		rc.SetIsEnable(*b)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RouteCreate) SetDeletedAt(i int) *RouteCreate {
	rc.mutation.SetDeletedAt(i)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RouteCreate) SetNillableDeletedAt(i *int) *RouteCreate {
	if i != nil {
		rc.SetDeletedAt(*i)
	}
	return rc
}

// SetParentID sets the "parent_id" field.
func (rc *RouteCreate) SetParentID(s string) *RouteCreate {
	rc.mutation.SetParentID(s)
	return rc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (rc *RouteCreate) SetNillableParentID(s *string) *RouteCreate {
	if s != nil {
		rc.SetParentID(*s)
	}
	return rc
}

// SetPath sets the "path" field.
func (rc *RouteCreate) SetPath(s string) *RouteCreate {
	rc.mutation.SetPath(s)
	return rc
}

// SetComponent sets the "component" field.
func (rc *RouteCreate) SetComponent(s string) *RouteCreate {
	rc.mutation.SetComponent(s)
	return rc
}

// SetRedirect sets the "redirect" field.
func (rc *RouteCreate) SetRedirect(s string) *RouteCreate {
	rc.mutation.SetRedirect(s)
	return rc
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (rc *RouteCreate) SetNillableRedirect(s *string) *RouteCreate {
	if s != nil {
		rc.SetRedirect(*s)
	}
	return rc
}

// SetName sets the "name" field.
func (rc *RouteCreate) SetName(s string) *RouteCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetOrder sets the "order" field.
func (rc *RouteCreate) SetOrder(i int) *RouteCreate {
	rc.mutation.SetOrder(i)
	return rc
}

// SetType sets the "type" field.
func (rc *RouteCreate) SetType(r route.Type) *RouteCreate {
	rc.mutation.SetType(r)
	return rc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rc *RouteCreate) SetNillableType(r *route.Type) *RouteCreate {
	if r != nil {
		rc.SetType(*r)
	}
	return rc
}

// SetMeta sets the "meta" field.
func (rc *RouteCreate) SetMeta(tm types.RouteMeta) *RouteCreate {
	rc.mutation.SetMeta(tm)
	return rc
}

// SetID sets the "id" field.
func (rc *RouteCreate) SetID(s string) *RouteCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RouteCreate) SetNillableID(s *string) *RouteCreate {
	if s != nil {
		rc.SetID(*s)
	}
	return rc
}

// SetParent sets the "parent" edge to the Route entity.
func (rc *RouteCreate) SetParent(r *Route) *RouteCreate {
	return rc.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Route entity by IDs.
func (rc *RouteCreate) AddChildIDs(ids ...string) *RouteCreate {
	rc.mutation.AddChildIDs(ids...)
	return rc
}

// AddChildren adds the "children" edges to the Route entity.
func (rc *RouteCreate) AddChildren(r ...*Route) *RouteCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddChildIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (rc *RouteCreate) AddRoleIDs(ids ...string) *RouteCreate {
	rc.mutation.AddRoleIDs(ids...)
	return rc
}

// AddRoles adds the "roles" edges to the Role entity.
func (rc *RouteCreate) AddRoles(r ...*Role) *RouteCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRoleIDs(ids...)
}

// Mutation returns the RouteMutation object of the builder.
func (rc *RouteCreate) Mutation() *RouteMutation {
	return rc.mutation
}

// Save creates the Route in the database.
func (rc *RouteCreate) Save(ctx context.Context) (*Route, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RouteCreate) SaveX(ctx context.Context) *Route {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RouteCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RouteCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RouteCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if route.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized route.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := route.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if route.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized route.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := route.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.IsEnable(); !ok {
		v := route.DefaultIsEnable
		rc.mutation.SetIsEnable(v)
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		v := route.DefaultDeletedAt
		rc.mutation.SetDeletedAt(v)
	}
	if _, ok := rc.mutation.ParentID(); !ok {
		if route.DefaultParentID == nil {
			return fmt.Errorf("ent: uninitialized route.DefaultParentID (forgotten import ent/runtime?)")
		}
		v := route.DefaultParentID()
		rc.mutation.SetParentID(v)
	}
	if _, ok := rc.mutation.GetType(); !ok {
		v := route.DefaultType
		rc.mutation.SetType(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		if route.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized route.DefaultID (forgotten import ent/runtime?)")
		}
		v := route.DefaultID()
		rc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RouteCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Route.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Route.updated_at"`)}
	}
	if _, ok := rc.mutation.IsEnable(); !ok {
		return &ValidationError{Name: "is_enable", err: errors.New(`ent: missing required field "Route.is_enable"`)}
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Route.deleted_at"`)}
	}
	if _, ok := rc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Route.path"`)}
	}
	if _, ok := rc.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required field "Route.component"`)}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Route.name"`)}
	}
	if _, ok := rc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Route.order"`)}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Route.type"`)}
	}
	if v, ok := rc.mutation.GetType(); ok {
		if err := route.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Route.type": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Meta(); !ok {
		return &ValidationError{Name: "meta", err: errors.New(`ent: missing required field "Route.meta"`)}
	}
	return nil
}

func (rc *RouteCreate) sqlSave(ctx context.Context) (*Route, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Route.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RouteCreate) createSpec() (*Route, *sqlgraph.CreateSpec) {
	var (
		_node = &Route{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(route.Table, sqlgraph.NewFieldSpec(route.FieldID, field.TypeString))
	)
	_spec.Schema = rc.schemaConfig.Route
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(route.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(route.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.IsEnable(); ok {
		_spec.SetField(route.FieldIsEnable, field.TypeBool, value)
		_node.IsEnable = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(route.FieldDeletedAt, field.TypeInt, value)
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.Path(); ok {
		_spec.SetField(route.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := rc.mutation.Component(); ok {
		_spec.SetField(route.FieldComponent, field.TypeString, value)
		_node.Component = value
	}
	if value, ok := rc.mutation.Redirect(); ok {
		_spec.SetField(route.FieldRedirect, field.TypeString, value)
		_node.Redirect = &value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(route.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Order(); ok {
		_spec.SetField(route.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(route.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := rc.mutation.Meta(); ok {
		_spec.SetField(route.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	if nodes := rc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   route.ParentTable,
			Columns: []string{route.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Route
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   route.ChildrenTable,
			Columns: []string{route.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Route
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   route.RolesTable,
			Columns: route.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.RoleRoutes
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Route.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RouteUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rc *RouteCreate) OnConflict(opts ...sql.ConflictOption) *RouteUpsertOne {
	rc.conflict = opts
	return &RouteUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Route.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RouteCreate) OnConflictColumns(columns ...string) *RouteUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RouteUpsertOne{
		create: rc,
	}
}

type (
	// RouteUpsertOne is the builder for "upsert"-ing
	//  one Route node.
	RouteUpsertOne struct {
		create *RouteCreate
	}

	// RouteUpsert is the "OnConflict" setter.
	RouteUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RouteUpsert) SetCreatedAt(v time.Time) *RouteUpsert {
	u.Set(route.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RouteUpsert) UpdateCreatedAt() *RouteUpsert {
	u.SetExcluded(route.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RouteUpsert) SetUpdatedAt(v time.Time) *RouteUpsert {
	u.Set(route.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RouteUpsert) UpdateUpdatedAt() *RouteUpsert {
	u.SetExcluded(route.FieldUpdatedAt)
	return u
}

// SetIsEnable sets the "is_enable" field.
func (u *RouteUpsert) SetIsEnable(v bool) *RouteUpsert {
	u.Set(route.FieldIsEnable, v)
	return u
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *RouteUpsert) UpdateIsEnable() *RouteUpsert {
	u.SetExcluded(route.FieldIsEnable)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RouteUpsert) SetDeletedAt(v int) *RouteUpsert {
	u.Set(route.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RouteUpsert) UpdateDeletedAt() *RouteUpsert {
	u.SetExcluded(route.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RouteUpsert) AddDeletedAt(v int) *RouteUpsert {
	u.Add(route.FieldDeletedAt, v)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *RouteUpsert) SetParentID(v string) *RouteUpsert {
	u.Set(route.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RouteUpsert) UpdateParentID() *RouteUpsert {
	u.SetExcluded(route.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RouteUpsert) ClearParentID() *RouteUpsert {
	u.SetNull(route.FieldParentID)
	return u
}

// SetPath sets the "path" field.
func (u *RouteUpsert) SetPath(v string) *RouteUpsert {
	u.Set(route.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *RouteUpsert) UpdatePath() *RouteUpsert {
	u.SetExcluded(route.FieldPath)
	return u
}

// SetComponent sets the "component" field.
func (u *RouteUpsert) SetComponent(v string) *RouteUpsert {
	u.Set(route.FieldComponent, v)
	return u
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *RouteUpsert) UpdateComponent() *RouteUpsert {
	u.SetExcluded(route.FieldComponent)
	return u
}

// SetRedirect sets the "redirect" field.
func (u *RouteUpsert) SetRedirect(v string) *RouteUpsert {
	u.Set(route.FieldRedirect, v)
	return u
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *RouteUpsert) UpdateRedirect() *RouteUpsert {
	u.SetExcluded(route.FieldRedirect)
	return u
}

// ClearRedirect clears the value of the "redirect" field.
func (u *RouteUpsert) ClearRedirect() *RouteUpsert {
	u.SetNull(route.FieldRedirect)
	return u
}

// SetName sets the "name" field.
func (u *RouteUpsert) SetName(v string) *RouteUpsert {
	u.Set(route.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RouteUpsert) UpdateName() *RouteUpsert {
	u.SetExcluded(route.FieldName)
	return u
}

// SetOrder sets the "order" field.
func (u *RouteUpsert) SetOrder(v int) *RouteUpsert {
	u.Set(route.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *RouteUpsert) UpdateOrder() *RouteUpsert {
	u.SetExcluded(route.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *RouteUpsert) AddOrder(v int) *RouteUpsert {
	u.Add(route.FieldOrder, v)
	return u
}

// SetType sets the "type" field.
func (u *RouteUpsert) SetType(v route.Type) *RouteUpsert {
	u.Set(route.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RouteUpsert) UpdateType() *RouteUpsert {
	u.SetExcluded(route.FieldType)
	return u
}

// SetMeta sets the "meta" field.
func (u *RouteUpsert) SetMeta(v types.RouteMeta) *RouteUpsert {
	u.Set(route.FieldMeta, v)
	return u
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *RouteUpsert) UpdateMeta() *RouteUpsert {
	u.SetExcluded(route.FieldMeta)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Route.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(route.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RouteUpsertOne) UpdateNewValues() *RouteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(route.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Route.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RouteUpsertOne) Ignore() *RouteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RouteUpsertOne) DoNothing() *RouteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RouteCreate.OnConflict
// documentation for more info.
func (u *RouteUpsertOne) Update(set func(*RouteUpsert)) *RouteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RouteUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RouteUpsertOne) SetCreatedAt(v time.Time) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdateCreatedAt() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RouteUpsertOne) SetUpdatedAt(v time.Time) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdateUpdatedAt() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetIsEnable sets the "is_enable" field.
func (u *RouteUpsertOne) SetIsEnable(v bool) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetIsEnable(v)
	})
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdateIsEnable() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateIsEnable()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RouteUpsertOne) SetDeletedAt(v int) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RouteUpsertOne) AddDeletedAt(v int) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdateDeletedAt() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetParentID sets the "parent_id" field.
func (u *RouteUpsertOne) SetParentID(v string) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdateParentID() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RouteUpsertOne) ClearParentID() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.ClearParentID()
	})
}

// SetPath sets the "path" field.
func (u *RouteUpsertOne) SetPath(v string) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdatePath() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdatePath()
	})
}

// SetComponent sets the "component" field.
func (u *RouteUpsertOne) SetComponent(v string) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdateComponent() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateComponent()
	})
}

// SetRedirect sets the "redirect" field.
func (u *RouteUpsertOne) SetRedirect(v string) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetRedirect(v)
	})
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdateRedirect() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateRedirect()
	})
}

// ClearRedirect clears the value of the "redirect" field.
func (u *RouteUpsertOne) ClearRedirect() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.ClearRedirect()
	})
}

// SetName sets the "name" field.
func (u *RouteUpsertOne) SetName(v string) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdateName() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateName()
	})
}

// SetOrder sets the "order" field.
func (u *RouteUpsertOne) SetOrder(v int) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *RouteUpsertOne) AddOrder(v int) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdateOrder() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateOrder()
	})
}

// SetType sets the "type" field.
func (u *RouteUpsertOne) SetType(v route.Type) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdateType() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateType()
	})
}

// SetMeta sets the "meta" field.
func (u *RouteUpsertOne) SetMeta(v types.RouteMeta) *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *RouteUpsertOne) UpdateMeta() *RouteUpsertOne {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateMeta()
	})
}

// Exec executes the query.
func (u *RouteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RouteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RouteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RouteUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RouteUpsertOne.ID is not supported by MySQL driver. Use RouteUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RouteUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RouteCreateBulk is the builder for creating many Route entities in bulk.
type RouteCreateBulk struct {
	config
	err      error
	builders []*RouteCreate
	conflict []sql.ConflictOption
}

// Save creates the Route entities in the database.
func (rcb *RouteCreateBulk) Save(ctx context.Context) ([]*Route, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Route, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RouteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RouteCreateBulk) SaveX(ctx context.Context) []*Route {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RouteCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RouteCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Route.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RouteUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rcb *RouteCreateBulk) OnConflict(opts ...sql.ConflictOption) *RouteUpsertBulk {
	rcb.conflict = opts
	return &RouteUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Route.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RouteCreateBulk) OnConflictColumns(columns ...string) *RouteUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RouteUpsertBulk{
		create: rcb,
	}
}

// RouteUpsertBulk is the builder for "upsert"-ing
// a bulk of Route nodes.
type RouteUpsertBulk struct {
	create *RouteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Route.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(route.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RouteUpsertBulk) UpdateNewValues() *RouteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(route.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Route.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RouteUpsertBulk) Ignore() *RouteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RouteUpsertBulk) DoNothing() *RouteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RouteCreateBulk.OnConflict
// documentation for more info.
func (u *RouteUpsertBulk) Update(set func(*RouteUpsert)) *RouteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RouteUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RouteUpsertBulk) SetCreatedAt(v time.Time) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdateCreatedAt() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RouteUpsertBulk) SetUpdatedAt(v time.Time) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdateUpdatedAt() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetIsEnable sets the "is_enable" field.
func (u *RouteUpsertBulk) SetIsEnable(v bool) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetIsEnable(v)
	})
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdateIsEnable() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateIsEnable()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RouteUpsertBulk) SetDeletedAt(v int) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RouteUpsertBulk) AddDeletedAt(v int) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdateDeletedAt() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetParentID sets the "parent_id" field.
func (u *RouteUpsertBulk) SetParentID(v string) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdateParentID() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RouteUpsertBulk) ClearParentID() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.ClearParentID()
	})
}

// SetPath sets the "path" field.
func (u *RouteUpsertBulk) SetPath(v string) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdatePath() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdatePath()
	})
}

// SetComponent sets the "component" field.
func (u *RouteUpsertBulk) SetComponent(v string) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdateComponent() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateComponent()
	})
}

// SetRedirect sets the "redirect" field.
func (u *RouteUpsertBulk) SetRedirect(v string) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetRedirect(v)
	})
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdateRedirect() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateRedirect()
	})
}

// ClearRedirect clears the value of the "redirect" field.
func (u *RouteUpsertBulk) ClearRedirect() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.ClearRedirect()
	})
}

// SetName sets the "name" field.
func (u *RouteUpsertBulk) SetName(v string) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdateName() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateName()
	})
}

// SetOrder sets the "order" field.
func (u *RouteUpsertBulk) SetOrder(v int) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *RouteUpsertBulk) AddOrder(v int) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdateOrder() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateOrder()
	})
}

// SetType sets the "type" field.
func (u *RouteUpsertBulk) SetType(v route.Type) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdateType() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateType()
	})
}

// SetMeta sets the "meta" field.
func (u *RouteUpsertBulk) SetMeta(v types.RouteMeta) *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *RouteUpsertBulk) UpdateMeta() *RouteUpsertBulk {
	return u.Update(func(s *RouteUpsert) {
		s.UpdateMeta()
	})
}

// Exec executes the query.
func (u *RouteUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RouteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RouteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RouteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
