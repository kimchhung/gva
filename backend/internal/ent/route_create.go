// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimchhung/gva/backend-echo/app/database/schema/types"
	"github.com/kimchhung/gva/backend-echo/internal/ent/role"
	"github.com/kimchhung/gva/backend-echo/internal/ent/route"
)

// RouteCreate is the builder for creating a Route entity.
type RouteCreate struct {
	config
	mutation *RouteMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RouteCreate) SetCreatedAt(t time.Time) *RouteCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RouteCreate) SetNillableCreatedAt(t *time.Time) *RouteCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RouteCreate) SetUpdatedAt(t time.Time) *RouteCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RouteCreate) SetNillableUpdatedAt(t *time.Time) *RouteCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetIsEnable sets the "is_enable" field.
func (rc *RouteCreate) SetIsEnable(b bool) *RouteCreate {
	rc.mutation.SetIsEnable(b)
	return rc
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (rc *RouteCreate) SetNillableIsEnable(b *bool) *RouteCreate {
	if b != nil {
		rc.SetIsEnable(*b)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RouteCreate) SetDeletedAt(i int) *RouteCreate {
	rc.mutation.SetDeletedAt(i)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RouteCreate) SetNillableDeletedAt(i *int) *RouteCreate {
	if i != nil {
		rc.SetDeletedAt(*i)
	}
	return rc
}

// SetParentID sets the "parent_id" field.
func (rc *RouteCreate) SetParentID(i int) *RouteCreate {
	rc.mutation.SetParentID(i)
	return rc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (rc *RouteCreate) SetNillableParentID(i *int) *RouteCreate {
	if i != nil {
		rc.SetParentID(*i)
	}
	return rc
}

// SetPath sets the "path" field.
func (rc *RouteCreate) SetPath(s string) *RouteCreate {
	rc.mutation.SetPath(s)
	return rc
}

// SetComponent sets the "component" field.
func (rc *RouteCreate) SetComponent(s string) *RouteCreate {
	rc.mutation.SetComponent(s)
	return rc
}

// SetRedirect sets the "redirect" field.
func (rc *RouteCreate) SetRedirect(s string) *RouteCreate {
	rc.mutation.SetRedirect(s)
	return rc
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (rc *RouteCreate) SetNillableRedirect(s *string) *RouteCreate {
	if s != nil {
		rc.SetRedirect(*s)
	}
	return rc
}

// SetName sets the "name" field.
func (rc *RouteCreate) SetName(s string) *RouteCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetType sets the "type" field.
func (rc *RouteCreate) SetType(r route.Type) *RouteCreate {
	rc.mutation.SetType(r)
	return rc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rc *RouteCreate) SetNillableType(r *route.Type) *RouteCreate {
	if r != nil {
		rc.SetType(*r)
	}
	return rc
}

// SetMeta sets the "meta" field.
func (rc *RouteCreate) SetMeta(tm types.RouteMeta) *RouteCreate {
	rc.mutation.SetMeta(tm)
	return rc
}

// SetID sets the "id" field.
func (rc *RouteCreate) SetID(i int) *RouteCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetParent sets the "parent" edge to the Route entity.
func (rc *RouteCreate) SetParent(r *Route) *RouteCreate {
	return rc.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Route entity by IDs.
func (rc *RouteCreate) AddChildIDs(ids ...int) *RouteCreate {
	rc.mutation.AddChildIDs(ids...)
	return rc
}

// AddChildren adds the "children" edges to the Route entity.
func (rc *RouteCreate) AddChildren(r ...*Route) *RouteCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddChildIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (rc *RouteCreate) AddRoleIDs(ids ...int) *RouteCreate {
	rc.mutation.AddRoleIDs(ids...)
	return rc
}

// AddRoles adds the "roles" edges to the Role entity.
func (rc *RouteCreate) AddRoles(r ...*Role) *RouteCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRoleIDs(ids...)
}

// Mutation returns the RouteMutation object of the builder.
func (rc *RouteCreate) Mutation() *RouteMutation {
	return rc.mutation
}

// Save creates the Route in the database.
func (rc *RouteCreate) Save(ctx context.Context) (*Route, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RouteCreate) SaveX(ctx context.Context) *Route {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RouteCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RouteCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RouteCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if route.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized route.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := route.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if route.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized route.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := route.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.IsEnable(); !ok {
		v := route.DefaultIsEnable
		rc.mutation.SetIsEnable(v)
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		v := route.DefaultDeletedAt
		rc.mutation.SetDeletedAt(v)
	}
	if _, ok := rc.mutation.GetType(); !ok {
		v := route.DefaultType
		rc.mutation.SetType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RouteCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Route.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Route.updated_at"`)}
	}
	if _, ok := rc.mutation.IsEnable(); !ok {
		return &ValidationError{Name: "is_enable", err: errors.New(`ent: missing required field "Route.is_enable"`)}
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Route.deleted_at"`)}
	}
	if _, ok := rc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Route.path"`)}
	}
	if _, ok := rc.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required field "Route.component"`)}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Route.name"`)}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Route.type"`)}
	}
	if v, ok := rc.mutation.GetType(); ok {
		if err := route.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Route.type": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Meta(); !ok {
		return &ValidationError{Name: "meta", err: errors.New(`ent: missing required field "Route.meta"`)}
	}
	return nil
}

func (rc *RouteCreate) sqlSave(ctx context.Context) (*Route, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RouteCreate) createSpec() (*Route, *sqlgraph.CreateSpec) {
	var (
		_node = &Route{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(route.Table, sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(route.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(route.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.IsEnable(); ok {
		_spec.SetField(route.FieldIsEnable, field.TypeBool, value)
		_node.IsEnable = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(route.FieldDeletedAt, field.TypeInt, value)
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.Path(); ok {
		_spec.SetField(route.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := rc.mutation.Component(); ok {
		_spec.SetField(route.FieldComponent, field.TypeString, value)
		_node.Component = value
	}
	if value, ok := rc.mutation.Redirect(); ok {
		_spec.SetField(route.FieldRedirect, field.TypeString, value)
		_node.Redirect = &value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(route.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(route.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := rc.mutation.Meta(); ok {
		_spec.SetField(route.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	if nodes := rc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   route.ParentTable,
			Columns: []string{route.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   route.ChildrenTable,
			Columns: []string{route.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   route.RolesTable,
			Columns: route.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RouteCreateBulk is the builder for creating many Route entities in bulk.
type RouteCreateBulk struct {
	config
	err      error
	builders []*RouteCreate
}

// Save creates the Route entities in the database.
func (rcb *RouteCreateBulk) Save(ctx context.Context) ([]*Route, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Route, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RouteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RouteCreateBulk) SaveX(ctx context.Context) []*Route {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RouteCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RouteCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
