// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gva/app/database/schema/xid"
	"github.com/gva/internal/ent/role"
)

// Role is the model entity for the Role schema.
type Role struct {
	config `json:"-" rql:"-"`
	// ID of the ent.
	ID xid.ID `json:"id" rql:"filter,sort"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty" rql:"filter,sort"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// IsEnable holds the value of the "is_enable" field.
	IsEnable bool `json:"isEnable"  rql:"filter,sort"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt int `json:"-"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// IsChangeable holds the value of the "is_changeable" field.
	IsChangeable bool `json:"isChangeable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleQuery when eager-loading is set.
	Edges        RoleEdges `json:"edges" rql:"-"`
	selectValues sql.SelectValues
}

// RoleEdges holds the relations/edges for other nodes in the graph.
type RoleEdges struct {
	// Admins holds the value of the admins edge.
	Admins []*Admin `json:"admins,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// Routes holds the value of the routes edge.
	Routes []*Menu `json:"routes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedAdmins      map[string][]*Admin
	namedPermissions map[string][]*Permission
	namedRoutes      map[string][]*Menu
}

// AdminsOrErr returns the Admins value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) AdminsOrErr() ([]*Admin, error) {
	if e.loadedTypes[0] {
		return e.Admins, nil
	}
	return nil, &NotLoadedError{edge: "admins"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[1] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// RoutesOrErr returns the Routes value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) RoutesOrErr() ([]*Menu, error) {
	if e.loadedTypes[2] {
		return e.Menus, nil
	}
	return nil, &NotLoadedError{edge: "routes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Role) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case role.FieldIsEnable, role.FieldIsChangeable:
			values[i] = new(sql.NullBool)
		case role.FieldDeletedAt, role.FieldOrder:
			values[i] = new(sql.NullInt64)
		case role.FieldName, role.FieldDescription:
			values[i] = new(sql.NullString)
		case role.FieldCreatedAt, role.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case role.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Role fields.
func (r *Role) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case role.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case role.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case role.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case role.FieldIsEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enable", values[i])
			} else if value.Valid {
				r.IsEnable = value.Bool
			}
		case role.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = int(value.Int64)
			}
		case role.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case role.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case role.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				r.Order = int(value.Int64)
			}
		case role.FieldIsChangeable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_changeable", values[i])
			} else if value.Valid {
				r.IsChangeable = value.Bool
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Role.
// This includes values selected through modifiers, order, etc.
func (r *Role) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryAdmins queries the "admins" edge of the Role entity.
func (r *Role) QueryAdmins() *AdminQuery {
	return NewRoleClient(r.config).QueryAdmins(r)
}

// QueryPermissions queries the "permissions" edge of the Role entity.
func (r *Role) QueryPermissions() *PermissionQuery {
	return NewRoleClient(r.config).QueryPermissions(r)
}

// QueryRoutes queries the "routes" edge of the Role entity.
func (r *Role) QueryRoutes() *MenuQuery {
	return NewRoleClient(r.config).QueryRoutes(r)
}

// Update returns a builder for updating this Role.
// Note that you need to call Role.Unwrap() before calling this method if this Role
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Role) Update() *RoleUpdateOne {
	return NewRoleClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Role entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Role) Unwrap() *Role {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Role is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Role) String() string {
	var builder strings.Builder
	builder.WriteString("Role(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_enable=")
	builder.WriteString(fmt.Sprintf("%v", r.IsEnable))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", r.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", r.Order))
	builder.WriteString(", ")
	builder.WriteString("is_changeable=")
	builder.WriteString(fmt.Sprintf("%v", r.IsChangeable))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAdmins returns the Admins named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedAdmins(name string) ([]*Admin, error) {
	if r.Edges.namedAdmins == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedAdmins[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedAdmins(name string, edges ...*Admin) {
	if r.Edges.namedAdmins == nil {
		r.Edges.namedAdmins = make(map[string][]*Admin)
	}
	if len(edges) == 0 {
		r.Edges.namedAdmins[name] = []*Admin{}
	} else {
		r.Edges.namedAdmins[name] = append(r.Edges.namedAdmins[name], edges...)
	}
}

// NamedPermissions returns the Permissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedPermissions(name string) ([]*Permission, error) {
	if r.Edges.namedPermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedPermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedPermissions(name string, edges ...*Permission) {
	if r.Edges.namedPermissions == nil {
		r.Edges.namedPermissions = make(map[string][]*Permission)
	}
	if len(edges) == 0 {
		r.Edges.namedPermissions[name] = []*Permission{}
	} else {
		r.Edges.namedPermissions[name] = append(r.Edges.namedPermissions[name], edges...)
	}
}

// NamedRoutes returns the Routes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedRoutes(name string) ([]*Menu, error) {
	if r.Edges.namedRoutes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedRoutes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedRoutes(name string, edges ...*Menu) {
	if r.Edges.namedRoutes == nil {
		r.Edges.namedRoutes = make(map[string][]*Menu)
	}
	if len(edges) == 0 {
		r.Edges.namedRoutes[name] = []*Menu{}
	} else {
		r.Edges.namedRoutes[name] = append(r.Edges.namedRoutes[name], edges...)
	}
}

// Roles is a parsable slice of Role.
type Roles []*Role
