// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Admin) Roles(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryRoles().All(ctx)
	}
	return result, err
}

func (a *Admin) Department(ctx context.Context) (*Department, error) {
	result, err := a.Edges.DepartmentOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryDepartment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Department) Parent(ctx context.Context) (*Department, error) {
	result, err := d.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Department) Children(ctx context.Context) (result []*Department, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.ChildrenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryChildren().All(ctx)
	}
	return result, err
}

func (d *Department) Members(ctx context.Context) (result []*Admin, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = d.NamedMembers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = d.Edges.MembersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = d.QueryMembers().All(ctx)
	}
	return result, err
}

func (pe *Permission) Roles(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pe.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pe.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pe.QueryRoles().All(ctx)
	}
	return result, err
}

func (r *Region) Parent(ctx context.Context) (*Region, error) {
	result, err := r.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Region) Children(ctx context.Context) (result []*Region, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.ChildrenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryChildren().All(ctx)
	}
	return result, err
}

func (r *Role) Admins(ctx context.Context) (result []*Admin, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedAdmins(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.AdminsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryAdmins().All(ctx)
	}
	return result, err
}

func (r *Role) Permissions(ctx context.Context) (result []*Permission, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedPermissions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.PermissionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryPermissions().All(ctx)
	}
	return result, err
}

func (r *Role) Routes(ctx context.Context) (result []*Route, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedRoutes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.RoutesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryRoutes().All(ctx)
	}
	return result, err
}

func (r *Route) Parent(ctx context.Context) (*Route, error) {
	result, err := r.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Route) Children(ctx context.Context) (result []*Route, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.ChildrenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryChildren().All(ctx)
	}
	return result, err
}

func (r *Route) Roles(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryRoles().All(ctx)
	}
	return result, err
}
