// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gva/internal/ent/predicate"

	"github.com/gva/internal/ent/internal"
	"github.com/gva/internal/ent/mytodo1"
)

// MyTodo1Delete is the builder for deleting a MyTodo1 entity.
type MyTodo1Delete struct {
	config
	hooks    []Hook
	mutation *MyTodo1Mutation
}

// Where appends a list predicates to the MyTodo1Delete builder.
func (mt *MyTodo1Delete) Where(ps ...predicate.MyTodo1) *MyTodo1Delete {
	mt.mutation.Where(ps...)
	return mt
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mt *MyTodo1Delete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mt.sqlExec, mt.mutation, mt.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mt *MyTodo1Delete) ExecX(ctx context.Context) int {
	n, err := mt.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mt *MyTodo1Delete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(mytodo1.Table, sqlgraph.NewFieldSpec(mytodo1.FieldID, field.TypeString))
	_spec.Node.Schema = mt.schemaConfig.MyTodo1
	ctx = internal.NewSchemaConfigContext(ctx, mt.schemaConfig)
	if ps := mt.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mt.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mt.mutation.done = true
	return affected, err
}

// MyTodo1DeleteOne is the builder for deleting a single MyTodo1 entity.
type MyTodo1DeleteOne struct {
	mt *MyTodo1Delete
}

// Where appends a list predicates to the MyTodo1Delete builder.
func (mto *MyTodo1DeleteOne) Where(ps ...predicate.MyTodo1) *MyTodo1DeleteOne {
	mto.mt.mutation.Where(ps...)
	return mto
}

// Exec executes the deletion query.
func (mto *MyTodo1DeleteOne) Exec(ctx context.Context) error {
	n, err := mto.mt.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{mytodo1.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mto *MyTodo1DeleteOne) ExecX(ctx context.Context) {
	if err := mto.Exec(ctx); err != nil {
		panic(err)
	}
}
