// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gva/app/database/schema/xid"
	"github.com/gva/internal/ent/mytodo1"
)

// MyTodo1 is the model entity for the MyTodo1 schema.
type MyTodo1 struct {
	config `json:"-" rql:"-"`
	// ID of the ent.
	ID xid.ID `json:"id" rql:"filter,sort"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty" rql:"filter,sort"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt int `json:"-"`
	// Name holds the value of the "name" field.
	Name         string `json:"name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MyTodo1) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mytodo1.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case mytodo1.FieldName:
			values[i] = new(sql.NullString)
		case mytodo1.FieldCreatedAt, mytodo1.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case mytodo1.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MyTodo1 fields.
func (mt *MyTodo1) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mytodo1.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mt.ID = *value
			}
		case mytodo1.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mt.CreatedAt = value.Time
			}
		case mytodo1.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mt.UpdatedAt = value.Time
			}
		case mytodo1.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mt.DeletedAt = int(value.Int64)
			}
		case mytodo1.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mt.Name = value.String
			}
		default:
			mt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MyTodo1.
// This includes values selected through modifiers, order, etc.
func (mt *MyTodo1) Value(name string) (ent.Value, error) {
	return mt.selectValues.Get(name)
}

// Update returns a builder for updating this MyTodo1.
// Note that you need to call MyTodo1.Unwrap() before calling this method if this MyTodo1
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *MyTodo1) Update() *MyTodo1UpdateOne {
	return NewMyTodo1Client(mt.config).UpdateOne(mt)
}

// Unwrap unwraps the MyTodo1 entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mt *MyTodo1) Unwrap() *MyTodo1 {
	_tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MyTodo1 is not a transactional entity")
	}
	mt.config.driver = _tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *MyTodo1) String() string {
	var builder strings.Builder
	builder.WriteString("MyTodo1(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", mt.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(mt.Name)
	builder.WriteByte(')')
	return builder.String()
}

// MyTodo1s is a parsable slice of MyTodo1.
type MyTodo1s []*MyTodo1
