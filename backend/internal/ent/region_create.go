// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gva/app/database/schema/pxid"
	"github.com/gva/internal/ent/region"
)

// RegionCreate is the builder for creating a Region entity.
type RegionCreate struct {
	config
	mutation *RegionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *RegionCreate) SetCreatedAt(t time.Time) *RegionCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RegionCreate) SetNillableCreatedAt(t *time.Time) *RegionCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RegionCreate) SetUpdatedAt(t time.Time) *RegionCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RegionCreate) SetNillableUpdatedAt(t *time.Time) *RegionCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RegionCreate) SetDeletedAt(i int) *RegionCreate {
	rc.mutation.SetDeletedAt(i)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RegionCreate) SetNillableDeletedAt(i *int) *RegionCreate {
	if i != nil {
		rc.SetDeletedAt(*i)
	}
	return rc
}

// SetIsEnable sets the "is_enable" field.
func (rc *RegionCreate) SetIsEnable(b bool) *RegionCreate {
	rc.mutation.SetIsEnable(b)
	return rc
}

// SetNillableIsEnable sets the "is_enable" field if the given value is not nil.
func (rc *RegionCreate) SetNillableIsEnable(b *bool) *RegionCreate {
	if b != nil {
		rc.SetIsEnable(*b)
	}
	return rc
}

// SetNameID sets the "name_id" field.
func (rc *RegionCreate) SetNameID(s string) *RegionCreate {
	rc.mutation.SetNameID(s)
	return rc
}

// SetName sets the "name" field.
func (rc *RegionCreate) SetName(s string) *RegionCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetType sets the "type" field.
func (rc *RegionCreate) SetType(r region.Type) *RegionCreate {
	rc.mutation.SetType(r)
	return rc
}

// SetPid sets the "pid" field.
func (rc *RegionCreate) SetPid(px pxid.ID) *RegionCreate {
	rc.mutation.SetPid(px)
	return rc
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (rc *RegionCreate) SetNillablePid(px *pxid.ID) *RegionCreate {
	if px != nil {
		rc.SetPid(*px)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RegionCreate) SetID(px pxid.ID) *RegionCreate {
	rc.mutation.SetID(px)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RegionCreate) SetNillableID(px *pxid.ID) *RegionCreate {
	if px != nil {
		rc.SetID(*px)
	}
	return rc
}

// SetParentID sets the "parent" edge to the Region entity by ID.
func (rc *RegionCreate) SetParentID(id pxid.ID) *RegionCreate {
	rc.mutation.SetParentID(id)
	return rc
}

// SetNillableParentID sets the "parent" edge to the Region entity by ID if the given value is not nil.
func (rc *RegionCreate) SetNillableParentID(id *pxid.ID) *RegionCreate {
	if id != nil {
		rc = rc.SetParentID(*id)
	}
	return rc
}

// SetParent sets the "parent" edge to the Region entity.
func (rc *RegionCreate) SetParent(r *Region) *RegionCreate {
	return rc.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Region entity by IDs.
func (rc *RegionCreate) AddChildIDs(ids ...pxid.ID) *RegionCreate {
	rc.mutation.AddChildIDs(ids...)
	return rc
}

// AddChildren adds the "children" edges to the Region entity.
func (rc *RegionCreate) AddChildren(r ...*Region) *RegionCreate {
	ids := make([]pxid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddChildIDs(ids...)
}

// Mutation returns the RegionMutation object of the builder.
func (rc *RegionCreate) Mutation() *RegionMutation {
	return rc.mutation
}

// Save creates the Region in the database.
func (rc *RegionCreate) Save(ctx context.Context) (*Region, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RegionCreate) SaveX(ctx context.Context) *Region {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RegionCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RegionCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RegionCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if region.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized region.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := region.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if region.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized region.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := region.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		v := region.DefaultDeletedAt
		rc.mutation.SetDeletedAt(v)
	}
	if _, ok := rc.mutation.IsEnable(); !ok {
		v := region.DefaultIsEnable
		rc.mutation.SetIsEnable(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		if region.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized region.DefaultID (forgotten import ent/runtime?)")
		}
		v := region.DefaultID()
		rc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RegionCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Region.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Region.updated_at"`)}
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Region.deleted_at"`)}
	}
	if _, ok := rc.mutation.IsEnable(); !ok {
		return &ValidationError{Name: "is_enable", err: errors.New(`ent: missing required field "Region.is_enable"`)}
	}
	if _, ok := rc.mutation.NameID(); !ok {
		return &ValidationError{Name: "name_id", err: errors.New(`ent: missing required field "Region.name_id"`)}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Region.name"`)}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Region.type"`)}
	}
	if v, ok := rc.mutation.GetType(); ok {
		if err := region.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Region.type": %w`, err)}
		}
	}
	return nil
}

func (rc *RegionCreate) sqlSave(ctx context.Context) (*Region, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pxid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RegionCreate) createSpec() (*Region, *sqlgraph.CreateSpec) {
	var (
		_node = &Region{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(region.Table, sqlgraph.NewFieldSpec(region.FieldID, field.TypeString))
	)
	_spec.Schema = rc.schemaConfig.Region
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(region.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(region.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(region.FieldDeletedAt, field.TypeInt, value)
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.IsEnable(); ok {
		_spec.SetField(region.FieldIsEnable, field.TypeBool, value)
		_node.IsEnable = value
	}
	if value, ok := rc.mutation.NameID(); ok {
		_spec.SetField(region.FieldNameID, field.TypeString, value)
		_node.NameID = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(region.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(region.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := rc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.ParentTable,
			Columns: []string{region.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Region
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Pid = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Region
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Region.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rc *RegionCreate) OnConflict(opts ...sql.ConflictOption) *RegionUpsertOne {
	rc.conflict = opts
	return &RegionUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Region.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RegionCreate) OnConflictColumns(columns ...string) *RegionUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RegionUpsertOne{
		create: rc,
	}
}

type (
	// RegionUpsertOne is the builder for "upsert"-ing
	//  one Region node.
	RegionUpsertOne struct {
		create *RegionCreate
	}

	// RegionUpsert is the "OnConflict" setter.
	RegionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RegionUpsert) SetCreatedAt(v time.Time) *RegionUpsert {
	u.Set(region.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RegionUpsert) UpdateCreatedAt() *RegionUpsert {
	u.SetExcluded(region.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegionUpsert) SetUpdatedAt(v time.Time) *RegionUpsert {
	u.Set(region.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegionUpsert) UpdateUpdatedAt() *RegionUpsert {
	u.SetExcluded(region.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RegionUpsert) SetDeletedAt(v int) *RegionUpsert {
	u.Set(region.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RegionUpsert) UpdateDeletedAt() *RegionUpsert {
	u.SetExcluded(region.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RegionUpsert) AddDeletedAt(v int) *RegionUpsert {
	u.Add(region.FieldDeletedAt, v)
	return u
}

// SetIsEnable sets the "is_enable" field.
func (u *RegionUpsert) SetIsEnable(v bool) *RegionUpsert {
	u.Set(region.FieldIsEnable, v)
	return u
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *RegionUpsert) UpdateIsEnable() *RegionUpsert {
	u.SetExcluded(region.FieldIsEnable)
	return u
}

// SetNameID sets the "name_id" field.
func (u *RegionUpsert) SetNameID(v string) *RegionUpsert {
	u.Set(region.FieldNameID, v)
	return u
}

// UpdateNameID sets the "name_id" field to the value that was provided on create.
func (u *RegionUpsert) UpdateNameID() *RegionUpsert {
	u.SetExcluded(region.FieldNameID)
	return u
}

// SetName sets the "name" field.
func (u *RegionUpsert) SetName(v string) *RegionUpsert {
	u.Set(region.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegionUpsert) UpdateName() *RegionUpsert {
	u.SetExcluded(region.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *RegionUpsert) SetType(v region.Type) *RegionUpsert {
	u.Set(region.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RegionUpsert) UpdateType() *RegionUpsert {
	u.SetExcluded(region.FieldType)
	return u
}

// SetPid sets the "pid" field.
func (u *RegionUpsert) SetPid(v pxid.ID) *RegionUpsert {
	u.Set(region.FieldPid, v)
	return u
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *RegionUpsert) UpdatePid() *RegionUpsert {
	u.SetExcluded(region.FieldPid)
	return u
}

// ClearPid clears the value of the "pid" field.
func (u *RegionUpsert) ClearPid() *RegionUpsert {
	u.SetNull(region.FieldPid)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Region.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(region.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RegionUpsertOne) UpdateNewValues() *RegionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(region.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Region.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RegionUpsertOne) Ignore() *RegionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegionUpsertOne) DoNothing() *RegionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegionCreate.OnConflict
// documentation for more info.
func (u *RegionUpsertOne) Update(set func(*RegionUpsert)) *RegionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RegionUpsertOne) SetCreatedAt(v time.Time) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateCreatedAt() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegionUpsertOne) SetUpdatedAt(v time.Time) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateUpdatedAt() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RegionUpsertOne) SetDeletedAt(v int) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RegionUpsertOne) AddDeletedAt(v int) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateDeletedAt() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetIsEnable sets the "is_enable" field.
func (u *RegionUpsertOne) SetIsEnable(v bool) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetIsEnable(v)
	})
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateIsEnable() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateIsEnable()
	})
}

// SetNameID sets the "name_id" field.
func (u *RegionUpsertOne) SetNameID(v string) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetNameID(v)
	})
}

// UpdateNameID sets the "name_id" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateNameID() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateNameID()
	})
}

// SetName sets the "name" field.
func (u *RegionUpsertOne) SetName(v string) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateName() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *RegionUpsertOne) SetType(v region.Type) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateType() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateType()
	})
}

// SetPid sets the "pid" field.
func (u *RegionUpsertOne) SetPid(v pxid.ID) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetPid(v)
	})
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdatePid() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdatePid()
	})
}

// ClearPid clears the value of the "pid" field.
func (u *RegionUpsertOne) ClearPid() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.ClearPid()
	})
}

// Exec executes the query.
func (u *RegionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RegionUpsertOne) ID(ctx context.Context) (id pxid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RegionUpsertOne.ID is not supported by MySQL driver. Use RegionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RegionUpsertOne) IDX(ctx context.Context) pxid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RegionCreateBulk is the builder for creating many Region entities in bulk.
type RegionCreateBulk struct {
	config
	err      error
	builders []*RegionCreate
	conflict []sql.ConflictOption
}

// Save creates the Region entities in the database.
func (rcb *RegionCreateBulk) Save(ctx context.Context) ([]*Region, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Region, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RegionCreateBulk) SaveX(ctx context.Context) []*Region {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RegionCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RegionCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Region.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rcb *RegionCreateBulk) OnConflict(opts ...sql.ConflictOption) *RegionUpsertBulk {
	rcb.conflict = opts
	return &RegionUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Region.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RegionCreateBulk) OnConflictColumns(columns ...string) *RegionUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RegionUpsertBulk{
		create: rcb,
	}
}

// RegionUpsertBulk is the builder for "upsert"-ing
// a bulk of Region nodes.
type RegionUpsertBulk struct {
	create *RegionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Region.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(region.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RegionUpsertBulk) UpdateNewValues() *RegionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(region.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Region.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RegionUpsertBulk) Ignore() *RegionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegionUpsertBulk) DoNothing() *RegionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegionCreateBulk.OnConflict
// documentation for more info.
func (u *RegionUpsertBulk) Update(set func(*RegionUpsert)) *RegionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RegionUpsertBulk) SetCreatedAt(v time.Time) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateCreatedAt() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegionUpsertBulk) SetUpdatedAt(v time.Time) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateUpdatedAt() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RegionUpsertBulk) SetDeletedAt(v int) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RegionUpsertBulk) AddDeletedAt(v int) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateDeletedAt() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetIsEnable sets the "is_enable" field.
func (u *RegionUpsertBulk) SetIsEnable(v bool) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetIsEnable(v)
	})
}

// UpdateIsEnable sets the "is_enable" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateIsEnable() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateIsEnable()
	})
}

// SetNameID sets the "name_id" field.
func (u *RegionUpsertBulk) SetNameID(v string) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetNameID(v)
	})
}

// UpdateNameID sets the "name_id" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateNameID() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateNameID()
	})
}

// SetName sets the "name" field.
func (u *RegionUpsertBulk) SetName(v string) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateName() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *RegionUpsertBulk) SetType(v region.Type) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateType() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateType()
	})
}

// SetPid sets the "pid" field.
func (u *RegionUpsertBulk) SetPid(v pxid.ID) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetPid(v)
	})
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdatePid() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdatePid()
	})
}

// ClearPid clears the value of the "pid" field.
func (u *RegionUpsertBulk) ClearPid() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.ClearPid()
	})
}

// Exec executes the query.
func (u *RegionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RegionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
