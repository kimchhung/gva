// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package rql

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4bc42f5bDecodeGithubComA8mRql(in *jlexer.Lexer, out *Query) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			out.Limit = int(in.Int())
		case "offset":
			out.Offset = int(in.Int())
		case "select":
			if in.IsNull() {
				in.Skip()
				out.Select = nil
			} else {
				in.Delim('[')
				if out.Select == nil {
					if !in.IsDelim(']') {
						out.Select = make([]string, 0, 4)
					} else {
						out.Select = []string{}
					}
				} else {
					out.Select = (out.Select)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Select = append(out.Select, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "update":
			if in.IsNull() {
				in.Skip()
				out.Update = nil
			} else {
				in.Delim('[')
				if out.Update == nil {
					if !in.IsDelim(']') {
						out.Update = make([]string, 0, 4)
					} else {
						out.Update = []string{}
					}
				} else {
					out.Update = (out.Update)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Update = append(out.Update, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sort":
			if in.IsNull() {
				in.Skip()
				out.Sort = nil
			} else {
				in.Delim('[')
				if out.Sort == nil {
					if !in.IsDelim(']') {
						out.Sort = make([]string, 0, 4)
					} else {
						out.Sort = []string{}
					}
				} else {
					out.Sort = (out.Sort)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Sort = append(out.Sort, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "filter":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Filter = make(map[string]interface{})
				} else {
					out.Filter = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Filter)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "aggregate":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Aggregate = make(map[string]interface{})
				} else {
					out.Aggregate = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					(out.Aggregate)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				in.Delim('[')
				if out.Group == nil {
					if !in.IsDelim(']') {
						out.Group = make([]string, 0, 4)
					} else {
						out.Group = []string{}
					}
				} else {
					out.Group = (out.Group)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Group = append(out.Group, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4bc42f5bEncodeGithubComA8mRql(out *jwriter.Writer, in Query) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Limit))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Offset))
	}
	if len(in.Select) != 0 {
		const prefix string = ",\"select\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Select {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	if len(in.Update) != 0 {
		const prefix string = ",\"update\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Update {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.Sort) != 0 {
		const prefix string = ",\"sort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Sort {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if len(in.Filter) != 0 {
		const prefix string = ",\"filter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Filter {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if m, ok := v13Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v13Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v13Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Aggregate) != 0 {
		const prefix string = ",\"aggregate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.Aggregate {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				if m, ok := v14Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v14Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v14Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Group) != 0 {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Group {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Query) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4bc42f5bEncodeGithubComA8mRql(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Query) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4bc42f5bEncodeGithubComA8mRql(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Query) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4bc42f5bDecodeGithubComA8mRql(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Query) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4bc42f5bDecodeGithubComA8mRql(l, v)
}
